
CAN_device_F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008700  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  080087c0  080087c0  000187c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ae4  08008ae4  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008ae4  08008ae4  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ae4  08008ae4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ae4  08008ae4  00018ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ae8  08008ae8  00018ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002918  200001f4  08008ce0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b0c  08008ce0  00022b0c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018808  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e05  00000000  00000000  00038a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003c830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e115  00000000  00000000  0003efd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a051  00000000  00000000  0005d0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4321  00000000  00000000  0007713e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011b45f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f1c  00000000  00000000  0011b4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080087a8 	.word	0x080087a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	080087a8 	.word	0x080087a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 f9c3 	bl	80015bc <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 f913 	bl	800146c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 f9b5 	bl	80015bc <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 f9ab 	bl	80015bc <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 f93b 	bl	80014f0 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 f931 	bl	80014f0 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_fadd>:
 800029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029e:	46c6      	mov	lr, r8
 80002a0:	0243      	lsls	r3, r0, #9
 80002a2:	0a5b      	lsrs	r3, r3, #9
 80002a4:	024e      	lsls	r6, r1, #9
 80002a6:	0045      	lsls	r5, r0, #1
 80002a8:	004f      	lsls	r7, r1, #1
 80002aa:	00da      	lsls	r2, r3, #3
 80002ac:	0fc4      	lsrs	r4, r0, #31
 80002ae:	469c      	mov	ip, r3
 80002b0:	0a70      	lsrs	r0, r6, #9
 80002b2:	4690      	mov	r8, r2
 80002b4:	b500      	push	{lr}
 80002b6:	0e2d      	lsrs	r5, r5, #24
 80002b8:	0e3f      	lsrs	r7, r7, #24
 80002ba:	0fc9      	lsrs	r1, r1, #31
 80002bc:	09b6      	lsrs	r6, r6, #6
 80002be:	428c      	cmp	r4, r1
 80002c0:	d04b      	beq.n	800035a <__aeabi_fadd+0xbe>
 80002c2:	1bea      	subs	r2, r5, r7
 80002c4:	2a00      	cmp	r2, #0
 80002c6:	dd36      	ble.n	8000336 <__aeabi_fadd+0x9a>
 80002c8:	2f00      	cmp	r7, #0
 80002ca:	d061      	beq.n	8000390 <__aeabi_fadd+0xf4>
 80002cc:	2dff      	cmp	r5, #255	; 0xff
 80002ce:	d100      	bne.n	80002d2 <__aeabi_fadd+0x36>
 80002d0:	e0ad      	b.n	800042e <__aeabi_fadd+0x192>
 80002d2:	2380      	movs	r3, #128	; 0x80
 80002d4:	04db      	lsls	r3, r3, #19
 80002d6:	431e      	orrs	r6, r3
 80002d8:	2a1b      	cmp	r2, #27
 80002da:	dc00      	bgt.n	80002de <__aeabi_fadd+0x42>
 80002dc:	e0d3      	b.n	8000486 <__aeabi_fadd+0x1ea>
 80002de:	2001      	movs	r0, #1
 80002e0:	4643      	mov	r3, r8
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	0143      	lsls	r3, r0, #5
 80002e6:	d400      	bmi.n	80002ea <__aeabi_fadd+0x4e>
 80002e8:	e08c      	b.n	8000404 <__aeabi_fadd+0x168>
 80002ea:	0180      	lsls	r0, r0, #6
 80002ec:	0987      	lsrs	r7, r0, #6
 80002ee:	0038      	movs	r0, r7
 80002f0:	f002 f8e4 	bl	80024bc <__clzsi2>
 80002f4:	3805      	subs	r0, #5
 80002f6:	4087      	lsls	r7, r0
 80002f8:	4285      	cmp	r5, r0
 80002fa:	dc00      	bgt.n	80002fe <__aeabi_fadd+0x62>
 80002fc:	e0b6      	b.n	800046c <__aeabi_fadd+0x1d0>
 80002fe:	1a2d      	subs	r5, r5, r0
 8000300:	48b3      	ldr	r0, [pc, #716]	; (80005d0 <__aeabi_fadd+0x334>)
 8000302:	4038      	ands	r0, r7
 8000304:	0743      	lsls	r3, r0, #29
 8000306:	d004      	beq.n	8000312 <__aeabi_fadd+0x76>
 8000308:	230f      	movs	r3, #15
 800030a:	4003      	ands	r3, r0
 800030c:	2b04      	cmp	r3, #4
 800030e:	d000      	beq.n	8000312 <__aeabi_fadd+0x76>
 8000310:	3004      	adds	r0, #4
 8000312:	0143      	lsls	r3, r0, #5
 8000314:	d400      	bmi.n	8000318 <__aeabi_fadd+0x7c>
 8000316:	e078      	b.n	800040a <__aeabi_fadd+0x16e>
 8000318:	1c6a      	adds	r2, r5, #1
 800031a:	2dfe      	cmp	r5, #254	; 0xfe
 800031c:	d065      	beq.n	80003ea <__aeabi_fadd+0x14e>
 800031e:	0180      	lsls	r0, r0, #6
 8000320:	0a43      	lsrs	r3, r0, #9
 8000322:	469c      	mov	ip, r3
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	4663      	mov	r3, ip
 8000328:	05d0      	lsls	r0, r2, #23
 800032a:	4318      	orrs	r0, r3
 800032c:	07e4      	lsls	r4, r4, #31
 800032e:	4320      	orrs	r0, r4
 8000330:	bc80      	pop	{r7}
 8000332:	46b8      	mov	r8, r7
 8000334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000336:	2a00      	cmp	r2, #0
 8000338:	d035      	beq.n	80003a6 <__aeabi_fadd+0x10a>
 800033a:	1b7a      	subs	r2, r7, r5
 800033c:	2d00      	cmp	r5, #0
 800033e:	d000      	beq.n	8000342 <__aeabi_fadd+0xa6>
 8000340:	e0af      	b.n	80004a2 <__aeabi_fadd+0x206>
 8000342:	4643      	mov	r3, r8
 8000344:	2b00      	cmp	r3, #0
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0xae>
 8000348:	e0a7      	b.n	800049a <__aeabi_fadd+0x1fe>
 800034a:	1e53      	subs	r3, r2, #1
 800034c:	2a01      	cmp	r2, #1
 800034e:	d100      	bne.n	8000352 <__aeabi_fadd+0xb6>
 8000350:	e12f      	b.n	80005b2 <__aeabi_fadd+0x316>
 8000352:	2aff      	cmp	r2, #255	; 0xff
 8000354:	d069      	beq.n	800042a <__aeabi_fadd+0x18e>
 8000356:	001a      	movs	r2, r3
 8000358:	e0aa      	b.n	80004b0 <__aeabi_fadd+0x214>
 800035a:	1be9      	subs	r1, r5, r7
 800035c:	2900      	cmp	r1, #0
 800035e:	dd70      	ble.n	8000442 <__aeabi_fadd+0x1a6>
 8000360:	2f00      	cmp	r7, #0
 8000362:	d037      	beq.n	80003d4 <__aeabi_fadd+0x138>
 8000364:	2dff      	cmp	r5, #255	; 0xff
 8000366:	d062      	beq.n	800042e <__aeabi_fadd+0x192>
 8000368:	2380      	movs	r3, #128	; 0x80
 800036a:	04db      	lsls	r3, r3, #19
 800036c:	431e      	orrs	r6, r3
 800036e:	291b      	cmp	r1, #27
 8000370:	dc00      	bgt.n	8000374 <__aeabi_fadd+0xd8>
 8000372:	e0b0      	b.n	80004d6 <__aeabi_fadd+0x23a>
 8000374:	2001      	movs	r0, #1
 8000376:	4440      	add	r0, r8
 8000378:	0143      	lsls	r3, r0, #5
 800037a:	d543      	bpl.n	8000404 <__aeabi_fadd+0x168>
 800037c:	3501      	adds	r5, #1
 800037e:	2dff      	cmp	r5, #255	; 0xff
 8000380:	d033      	beq.n	80003ea <__aeabi_fadd+0x14e>
 8000382:	2301      	movs	r3, #1
 8000384:	4a93      	ldr	r2, [pc, #588]	; (80005d4 <__aeabi_fadd+0x338>)
 8000386:	4003      	ands	r3, r0
 8000388:	0840      	lsrs	r0, r0, #1
 800038a:	4010      	ands	r0, r2
 800038c:	4318      	orrs	r0, r3
 800038e:	e7b9      	b.n	8000304 <__aeabi_fadd+0x68>
 8000390:	2e00      	cmp	r6, #0
 8000392:	d100      	bne.n	8000396 <__aeabi_fadd+0xfa>
 8000394:	e083      	b.n	800049e <__aeabi_fadd+0x202>
 8000396:	1e51      	subs	r1, r2, #1
 8000398:	2a01      	cmp	r2, #1
 800039a:	d100      	bne.n	800039e <__aeabi_fadd+0x102>
 800039c:	e0d8      	b.n	8000550 <__aeabi_fadd+0x2b4>
 800039e:	2aff      	cmp	r2, #255	; 0xff
 80003a0:	d045      	beq.n	800042e <__aeabi_fadd+0x192>
 80003a2:	000a      	movs	r2, r1
 80003a4:	e798      	b.n	80002d8 <__aeabi_fadd+0x3c>
 80003a6:	27fe      	movs	r7, #254	; 0xfe
 80003a8:	1c6a      	adds	r2, r5, #1
 80003aa:	4217      	tst	r7, r2
 80003ac:	d000      	beq.n	80003b0 <__aeabi_fadd+0x114>
 80003ae:	e086      	b.n	80004be <__aeabi_fadd+0x222>
 80003b0:	2d00      	cmp	r5, #0
 80003b2:	d000      	beq.n	80003b6 <__aeabi_fadd+0x11a>
 80003b4:	e0b7      	b.n	8000526 <__aeabi_fadd+0x28a>
 80003b6:	4643      	mov	r3, r8
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d100      	bne.n	80003be <__aeabi_fadd+0x122>
 80003bc:	e0f3      	b.n	80005a6 <__aeabi_fadd+0x30a>
 80003be:	2200      	movs	r2, #0
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d0b0      	beq.n	8000326 <__aeabi_fadd+0x8a>
 80003c4:	1b98      	subs	r0, r3, r6
 80003c6:	0143      	lsls	r3, r0, #5
 80003c8:	d400      	bmi.n	80003cc <__aeabi_fadd+0x130>
 80003ca:	e0fa      	b.n	80005c2 <__aeabi_fadd+0x326>
 80003cc:	4643      	mov	r3, r8
 80003ce:	000c      	movs	r4, r1
 80003d0:	1af0      	subs	r0, r6, r3
 80003d2:	e797      	b.n	8000304 <__aeabi_fadd+0x68>
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d100      	bne.n	80003da <__aeabi_fadd+0x13e>
 80003d8:	e0c8      	b.n	800056c <__aeabi_fadd+0x2d0>
 80003da:	1e4a      	subs	r2, r1, #1
 80003dc:	2901      	cmp	r1, #1
 80003de:	d100      	bne.n	80003e2 <__aeabi_fadd+0x146>
 80003e0:	e0ae      	b.n	8000540 <__aeabi_fadd+0x2a4>
 80003e2:	29ff      	cmp	r1, #255	; 0xff
 80003e4:	d023      	beq.n	800042e <__aeabi_fadd+0x192>
 80003e6:	0011      	movs	r1, r2
 80003e8:	e7c1      	b.n	800036e <__aeabi_fadd+0xd2>
 80003ea:	2300      	movs	r3, #0
 80003ec:	22ff      	movs	r2, #255	; 0xff
 80003ee:	469c      	mov	ip, r3
 80003f0:	e799      	b.n	8000326 <__aeabi_fadd+0x8a>
 80003f2:	21fe      	movs	r1, #254	; 0xfe
 80003f4:	1c6a      	adds	r2, r5, #1
 80003f6:	4211      	tst	r1, r2
 80003f8:	d077      	beq.n	80004ea <__aeabi_fadd+0x24e>
 80003fa:	2aff      	cmp	r2, #255	; 0xff
 80003fc:	d0f5      	beq.n	80003ea <__aeabi_fadd+0x14e>
 80003fe:	0015      	movs	r5, r2
 8000400:	4446      	add	r6, r8
 8000402:	0870      	lsrs	r0, r6, #1
 8000404:	0743      	lsls	r3, r0, #29
 8000406:	d000      	beq.n	800040a <__aeabi_fadd+0x16e>
 8000408:	e77e      	b.n	8000308 <__aeabi_fadd+0x6c>
 800040a:	08c3      	lsrs	r3, r0, #3
 800040c:	2dff      	cmp	r5, #255	; 0xff
 800040e:	d00e      	beq.n	800042e <__aeabi_fadd+0x192>
 8000410:	025b      	lsls	r3, r3, #9
 8000412:	0a5b      	lsrs	r3, r3, #9
 8000414:	469c      	mov	ip, r3
 8000416:	b2ea      	uxtb	r2, r5
 8000418:	e785      	b.n	8000326 <__aeabi_fadd+0x8a>
 800041a:	2e00      	cmp	r6, #0
 800041c:	d007      	beq.n	800042e <__aeabi_fadd+0x192>
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	03d2      	lsls	r2, r2, #15
 8000422:	4213      	tst	r3, r2
 8000424:	d003      	beq.n	800042e <__aeabi_fadd+0x192>
 8000426:	4210      	tst	r0, r2
 8000428:	d101      	bne.n	800042e <__aeabi_fadd+0x192>
 800042a:	000c      	movs	r4, r1
 800042c:	0003      	movs	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d0db      	beq.n	80003ea <__aeabi_fadd+0x14e>
 8000432:	2080      	movs	r0, #128	; 0x80
 8000434:	03c0      	lsls	r0, r0, #15
 8000436:	4318      	orrs	r0, r3
 8000438:	0240      	lsls	r0, r0, #9
 800043a:	0a43      	lsrs	r3, r0, #9
 800043c:	469c      	mov	ip, r3
 800043e:	22ff      	movs	r2, #255	; 0xff
 8000440:	e771      	b.n	8000326 <__aeabi_fadd+0x8a>
 8000442:	2900      	cmp	r1, #0
 8000444:	d0d5      	beq.n	80003f2 <__aeabi_fadd+0x156>
 8000446:	1b7a      	subs	r2, r7, r5
 8000448:	2d00      	cmp	r5, #0
 800044a:	d160      	bne.n	800050e <__aeabi_fadd+0x272>
 800044c:	4643      	mov	r3, r8
 800044e:	2b00      	cmp	r3, #0
 8000450:	d024      	beq.n	800049c <__aeabi_fadd+0x200>
 8000452:	1e53      	subs	r3, r2, #1
 8000454:	2a01      	cmp	r2, #1
 8000456:	d073      	beq.n	8000540 <__aeabi_fadd+0x2a4>
 8000458:	2aff      	cmp	r2, #255	; 0xff
 800045a:	d0e7      	beq.n	800042c <__aeabi_fadd+0x190>
 800045c:	001a      	movs	r2, r3
 800045e:	2a1b      	cmp	r2, #27
 8000460:	dc00      	bgt.n	8000464 <__aeabi_fadd+0x1c8>
 8000462:	e085      	b.n	8000570 <__aeabi_fadd+0x2d4>
 8000464:	2001      	movs	r0, #1
 8000466:	003d      	movs	r5, r7
 8000468:	1980      	adds	r0, r0, r6
 800046a:	e785      	b.n	8000378 <__aeabi_fadd+0xdc>
 800046c:	2320      	movs	r3, #32
 800046e:	003a      	movs	r2, r7
 8000470:	1b45      	subs	r5, r0, r5
 8000472:	0038      	movs	r0, r7
 8000474:	3501      	adds	r5, #1
 8000476:	40ea      	lsrs	r2, r5
 8000478:	1b5d      	subs	r5, r3, r5
 800047a:	40a8      	lsls	r0, r5
 800047c:	1e43      	subs	r3, r0, #1
 800047e:	4198      	sbcs	r0, r3
 8000480:	2500      	movs	r5, #0
 8000482:	4310      	orrs	r0, r2
 8000484:	e73e      	b.n	8000304 <__aeabi_fadd+0x68>
 8000486:	2320      	movs	r3, #32
 8000488:	0030      	movs	r0, r6
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	0031      	movs	r1, r6
 800048e:	4098      	lsls	r0, r3
 8000490:	40d1      	lsrs	r1, r2
 8000492:	1e43      	subs	r3, r0, #1
 8000494:	4198      	sbcs	r0, r3
 8000496:	4308      	orrs	r0, r1
 8000498:	e722      	b.n	80002e0 <__aeabi_fadd+0x44>
 800049a:	000c      	movs	r4, r1
 800049c:	0003      	movs	r3, r0
 800049e:	0015      	movs	r5, r2
 80004a0:	e7b4      	b.n	800040c <__aeabi_fadd+0x170>
 80004a2:	2fff      	cmp	r7, #255	; 0xff
 80004a4:	d0c1      	beq.n	800042a <__aeabi_fadd+0x18e>
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	4640      	mov	r0, r8
 80004aa:	04db      	lsls	r3, r3, #19
 80004ac:	4318      	orrs	r0, r3
 80004ae:	4680      	mov	r8, r0
 80004b0:	2a1b      	cmp	r2, #27
 80004b2:	dd51      	ble.n	8000558 <__aeabi_fadd+0x2bc>
 80004b4:	2001      	movs	r0, #1
 80004b6:	000c      	movs	r4, r1
 80004b8:	003d      	movs	r5, r7
 80004ba:	1a30      	subs	r0, r6, r0
 80004bc:	e712      	b.n	80002e4 <__aeabi_fadd+0x48>
 80004be:	4643      	mov	r3, r8
 80004c0:	1b9f      	subs	r7, r3, r6
 80004c2:	017b      	lsls	r3, r7, #5
 80004c4:	d42b      	bmi.n	800051e <__aeabi_fadd+0x282>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_fadd+0x230>
 80004ca:	e710      	b.n	80002ee <__aeabi_fadd+0x52>
 80004cc:	2300      	movs	r3, #0
 80004ce:	2400      	movs	r4, #0
 80004d0:	2200      	movs	r2, #0
 80004d2:	469c      	mov	ip, r3
 80004d4:	e727      	b.n	8000326 <__aeabi_fadd+0x8a>
 80004d6:	2320      	movs	r3, #32
 80004d8:	0032      	movs	r2, r6
 80004da:	0030      	movs	r0, r6
 80004dc:	40ca      	lsrs	r2, r1
 80004de:	1a59      	subs	r1, r3, r1
 80004e0:	4088      	lsls	r0, r1
 80004e2:	1e43      	subs	r3, r0, #1
 80004e4:	4198      	sbcs	r0, r3
 80004e6:	4310      	orrs	r0, r2
 80004e8:	e745      	b.n	8000376 <__aeabi_fadd+0xda>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d14a      	bne.n	8000584 <__aeabi_fadd+0x2e8>
 80004ee:	4643      	mov	r3, r8
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d063      	beq.n	80005bc <__aeabi_fadd+0x320>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	d100      	bne.n	80004fc <__aeabi_fadd+0x260>
 80004fa:	e714      	b.n	8000326 <__aeabi_fadd+0x8a>
 80004fc:	0030      	movs	r0, r6
 80004fe:	4440      	add	r0, r8
 8000500:	0143      	lsls	r3, r0, #5
 8000502:	d400      	bmi.n	8000506 <__aeabi_fadd+0x26a>
 8000504:	e77e      	b.n	8000404 <__aeabi_fadd+0x168>
 8000506:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <__aeabi_fadd+0x334>)
 8000508:	3501      	adds	r5, #1
 800050a:	4018      	ands	r0, r3
 800050c:	e77a      	b.n	8000404 <__aeabi_fadd+0x168>
 800050e:	2fff      	cmp	r7, #255	; 0xff
 8000510:	d08c      	beq.n	800042c <__aeabi_fadd+0x190>
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	4641      	mov	r1, r8
 8000516:	04db      	lsls	r3, r3, #19
 8000518:	4319      	orrs	r1, r3
 800051a:	4688      	mov	r8, r1
 800051c:	e79f      	b.n	800045e <__aeabi_fadd+0x1c2>
 800051e:	4643      	mov	r3, r8
 8000520:	000c      	movs	r4, r1
 8000522:	1af7      	subs	r7, r6, r3
 8000524:	e6e3      	b.n	80002ee <__aeabi_fadd+0x52>
 8000526:	4642      	mov	r2, r8
 8000528:	2a00      	cmp	r2, #0
 800052a:	d000      	beq.n	800052e <__aeabi_fadd+0x292>
 800052c:	e775      	b.n	800041a <__aeabi_fadd+0x17e>
 800052e:	2e00      	cmp	r6, #0
 8000530:	d000      	beq.n	8000534 <__aeabi_fadd+0x298>
 8000532:	e77a      	b.n	800042a <__aeabi_fadd+0x18e>
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	03db      	lsls	r3, r3, #15
 8000538:	2400      	movs	r4, #0
 800053a:	469c      	mov	ip, r3
 800053c:	22ff      	movs	r2, #255	; 0xff
 800053e:	e6f2      	b.n	8000326 <__aeabi_fadd+0x8a>
 8000540:	0030      	movs	r0, r6
 8000542:	4440      	add	r0, r8
 8000544:	2501      	movs	r5, #1
 8000546:	0143      	lsls	r3, r0, #5
 8000548:	d400      	bmi.n	800054c <__aeabi_fadd+0x2b0>
 800054a:	e75b      	b.n	8000404 <__aeabi_fadd+0x168>
 800054c:	2502      	movs	r5, #2
 800054e:	e718      	b.n	8000382 <__aeabi_fadd+0xe6>
 8000550:	4643      	mov	r3, r8
 8000552:	2501      	movs	r5, #1
 8000554:	1b98      	subs	r0, r3, r6
 8000556:	e6c5      	b.n	80002e4 <__aeabi_fadd+0x48>
 8000558:	2320      	movs	r3, #32
 800055a:	4644      	mov	r4, r8
 800055c:	4640      	mov	r0, r8
 800055e:	40d4      	lsrs	r4, r2
 8000560:	1a9a      	subs	r2, r3, r2
 8000562:	4090      	lsls	r0, r2
 8000564:	1e43      	subs	r3, r0, #1
 8000566:	4198      	sbcs	r0, r3
 8000568:	4320      	orrs	r0, r4
 800056a:	e7a4      	b.n	80004b6 <__aeabi_fadd+0x21a>
 800056c:	000d      	movs	r5, r1
 800056e:	e74d      	b.n	800040c <__aeabi_fadd+0x170>
 8000570:	2320      	movs	r3, #32
 8000572:	4641      	mov	r1, r8
 8000574:	4640      	mov	r0, r8
 8000576:	40d1      	lsrs	r1, r2
 8000578:	1a9a      	subs	r2, r3, r2
 800057a:	4090      	lsls	r0, r2
 800057c:	1e43      	subs	r3, r0, #1
 800057e:	4198      	sbcs	r0, r3
 8000580:	4308      	orrs	r0, r1
 8000582:	e770      	b.n	8000466 <__aeabi_fadd+0x1ca>
 8000584:	4642      	mov	r2, r8
 8000586:	2a00      	cmp	r2, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x2f0>
 800058a:	e74f      	b.n	800042c <__aeabi_fadd+0x190>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x2f6>
 8000590:	e74d      	b.n	800042e <__aeabi_fadd+0x192>
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	03d2      	lsls	r2, r2, #15
 8000596:	4213      	tst	r3, r2
 8000598:	d100      	bne.n	800059c <__aeabi_fadd+0x300>
 800059a:	e748      	b.n	800042e <__aeabi_fadd+0x192>
 800059c:	4210      	tst	r0, r2
 800059e:	d000      	beq.n	80005a2 <__aeabi_fadd+0x306>
 80005a0:	e745      	b.n	800042e <__aeabi_fadd+0x192>
 80005a2:	0003      	movs	r3, r0
 80005a4:	e743      	b.n	800042e <__aeabi_fadd+0x192>
 80005a6:	2e00      	cmp	r6, #0
 80005a8:	d090      	beq.n	80004cc <__aeabi_fadd+0x230>
 80005aa:	000c      	movs	r4, r1
 80005ac:	4684      	mov	ip, r0
 80005ae:	2200      	movs	r2, #0
 80005b0:	e6b9      	b.n	8000326 <__aeabi_fadd+0x8a>
 80005b2:	4643      	mov	r3, r8
 80005b4:	000c      	movs	r4, r1
 80005b6:	1af0      	subs	r0, r6, r3
 80005b8:	3501      	adds	r5, #1
 80005ba:	e693      	b.n	80002e4 <__aeabi_fadd+0x48>
 80005bc:	4684      	mov	ip, r0
 80005be:	2200      	movs	r2, #0
 80005c0:	e6b1      	b.n	8000326 <__aeabi_fadd+0x8a>
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d000      	beq.n	80005c8 <__aeabi_fadd+0x32c>
 80005c6:	e71d      	b.n	8000404 <__aeabi_fadd+0x168>
 80005c8:	2300      	movs	r3, #0
 80005ca:	2400      	movs	r4, #0
 80005cc:	469c      	mov	ip, r3
 80005ce:	e6aa      	b.n	8000326 <__aeabi_fadd+0x8a>
 80005d0:	fbffffff 	.word	0xfbffffff
 80005d4:	7dffffff 	.word	0x7dffffff

080005d8 <__aeabi_fdiv>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	464f      	mov	r7, r9
 80005dc:	4646      	mov	r6, r8
 80005de:	46d6      	mov	lr, sl
 80005e0:	0245      	lsls	r5, r0, #9
 80005e2:	b5c0      	push	{r6, r7, lr}
 80005e4:	0047      	lsls	r7, r0, #1
 80005e6:	1c0c      	adds	r4, r1, #0
 80005e8:	0a6d      	lsrs	r5, r5, #9
 80005ea:	0e3f      	lsrs	r7, r7, #24
 80005ec:	0fc6      	lsrs	r6, r0, #31
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d100      	bne.n	80005f4 <__aeabi_fdiv+0x1c>
 80005f2:	e070      	b.n	80006d6 <__aeabi_fdiv+0xfe>
 80005f4:	2fff      	cmp	r7, #255	; 0xff
 80005f6:	d100      	bne.n	80005fa <__aeabi_fdiv+0x22>
 80005f8:	e075      	b.n	80006e6 <__aeabi_fdiv+0x10e>
 80005fa:	00eb      	lsls	r3, r5, #3
 80005fc:	2580      	movs	r5, #128	; 0x80
 80005fe:	04ed      	lsls	r5, r5, #19
 8000600:	431d      	orrs	r5, r3
 8000602:	2300      	movs	r3, #0
 8000604:	4699      	mov	r9, r3
 8000606:	469a      	mov	sl, r3
 8000608:	3f7f      	subs	r7, #127	; 0x7f
 800060a:	0260      	lsls	r0, r4, #9
 800060c:	0a43      	lsrs	r3, r0, #9
 800060e:	4698      	mov	r8, r3
 8000610:	0063      	lsls	r3, r4, #1
 8000612:	0e1b      	lsrs	r3, r3, #24
 8000614:	0fe4      	lsrs	r4, r4, #31
 8000616:	2b00      	cmp	r3, #0
 8000618:	d04e      	beq.n	80006b8 <__aeabi_fdiv+0xe0>
 800061a:	2bff      	cmp	r3, #255	; 0xff
 800061c:	d046      	beq.n	80006ac <__aeabi_fdiv+0xd4>
 800061e:	4642      	mov	r2, r8
 8000620:	00d0      	lsls	r0, r2, #3
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	04d2      	lsls	r2, r2, #19
 8000626:	4302      	orrs	r2, r0
 8000628:	4690      	mov	r8, r2
 800062a:	2200      	movs	r2, #0
 800062c:	3b7f      	subs	r3, #127	; 0x7f
 800062e:	0031      	movs	r1, r6
 8000630:	1aff      	subs	r7, r7, r3
 8000632:	464b      	mov	r3, r9
 8000634:	4061      	eors	r1, r4
 8000636:	b2c9      	uxtb	r1, r1
 8000638:	4313      	orrs	r3, r2
 800063a:	2b0f      	cmp	r3, #15
 800063c:	d900      	bls.n	8000640 <__aeabi_fdiv+0x68>
 800063e:	e0b5      	b.n	80007ac <__aeabi_fdiv+0x1d4>
 8000640:	486e      	ldr	r0, [pc, #440]	; (80007fc <__aeabi_fdiv+0x224>)
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	58c3      	ldr	r3, [r0, r3]
 8000646:	469f      	mov	pc, r3
 8000648:	2300      	movs	r3, #0
 800064a:	4698      	mov	r8, r3
 800064c:	0026      	movs	r6, r4
 800064e:	4645      	mov	r5, r8
 8000650:	4692      	mov	sl, r2
 8000652:	4653      	mov	r3, sl
 8000654:	2b02      	cmp	r3, #2
 8000656:	d100      	bne.n	800065a <__aeabi_fdiv+0x82>
 8000658:	e089      	b.n	800076e <__aeabi_fdiv+0x196>
 800065a:	2b03      	cmp	r3, #3
 800065c:	d100      	bne.n	8000660 <__aeabi_fdiv+0x88>
 800065e:	e09e      	b.n	800079e <__aeabi_fdiv+0x1c6>
 8000660:	2b01      	cmp	r3, #1
 8000662:	d018      	beq.n	8000696 <__aeabi_fdiv+0xbe>
 8000664:	003b      	movs	r3, r7
 8000666:	337f      	adds	r3, #127	; 0x7f
 8000668:	2b00      	cmp	r3, #0
 800066a:	dd69      	ble.n	8000740 <__aeabi_fdiv+0x168>
 800066c:	076a      	lsls	r2, r5, #29
 800066e:	d004      	beq.n	800067a <__aeabi_fdiv+0xa2>
 8000670:	220f      	movs	r2, #15
 8000672:	402a      	ands	r2, r5
 8000674:	2a04      	cmp	r2, #4
 8000676:	d000      	beq.n	800067a <__aeabi_fdiv+0xa2>
 8000678:	3504      	adds	r5, #4
 800067a:	012a      	lsls	r2, r5, #4
 800067c:	d503      	bpl.n	8000686 <__aeabi_fdiv+0xae>
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <__aeabi_fdiv+0x228>)
 8000680:	401d      	ands	r5, r3
 8000682:	003b      	movs	r3, r7
 8000684:	3380      	adds	r3, #128	; 0x80
 8000686:	2bfe      	cmp	r3, #254	; 0xfe
 8000688:	dd00      	ble.n	800068c <__aeabi_fdiv+0xb4>
 800068a:	e070      	b.n	800076e <__aeabi_fdiv+0x196>
 800068c:	01ad      	lsls	r5, r5, #6
 800068e:	0a6d      	lsrs	r5, r5, #9
 8000690:	b2d8      	uxtb	r0, r3
 8000692:	e002      	b.n	800069a <__aeabi_fdiv+0xc2>
 8000694:	000e      	movs	r6, r1
 8000696:	2000      	movs	r0, #0
 8000698:	2500      	movs	r5, #0
 800069a:	05c0      	lsls	r0, r0, #23
 800069c:	4328      	orrs	r0, r5
 800069e:	07f6      	lsls	r6, r6, #31
 80006a0:	4330      	orrs	r0, r6
 80006a2:	bce0      	pop	{r5, r6, r7}
 80006a4:	46ba      	mov	sl, r7
 80006a6:	46b1      	mov	r9, r6
 80006a8:	46a8      	mov	r8, r5
 80006aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ac:	4643      	mov	r3, r8
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d13f      	bne.n	8000732 <__aeabi_fdiv+0x15a>
 80006b2:	2202      	movs	r2, #2
 80006b4:	3fff      	subs	r7, #255	; 0xff
 80006b6:	e003      	b.n	80006c0 <__aeabi_fdiv+0xe8>
 80006b8:	4643      	mov	r3, r8
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d12d      	bne.n	800071a <__aeabi_fdiv+0x142>
 80006be:	2201      	movs	r2, #1
 80006c0:	0031      	movs	r1, r6
 80006c2:	464b      	mov	r3, r9
 80006c4:	4061      	eors	r1, r4
 80006c6:	b2c9      	uxtb	r1, r1
 80006c8:	4313      	orrs	r3, r2
 80006ca:	2b0f      	cmp	r3, #15
 80006cc:	d834      	bhi.n	8000738 <__aeabi_fdiv+0x160>
 80006ce:	484d      	ldr	r0, [pc, #308]	; (8000804 <__aeabi_fdiv+0x22c>)
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	58c3      	ldr	r3, [r0, r3]
 80006d4:	469f      	mov	pc, r3
 80006d6:	2d00      	cmp	r5, #0
 80006d8:	d113      	bne.n	8000702 <__aeabi_fdiv+0x12a>
 80006da:	2304      	movs	r3, #4
 80006dc:	4699      	mov	r9, r3
 80006de:	3b03      	subs	r3, #3
 80006e0:	2700      	movs	r7, #0
 80006e2:	469a      	mov	sl, r3
 80006e4:	e791      	b.n	800060a <__aeabi_fdiv+0x32>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d105      	bne.n	80006f6 <__aeabi_fdiv+0x11e>
 80006ea:	2308      	movs	r3, #8
 80006ec:	4699      	mov	r9, r3
 80006ee:	3b06      	subs	r3, #6
 80006f0:	27ff      	movs	r7, #255	; 0xff
 80006f2:	469a      	mov	sl, r3
 80006f4:	e789      	b.n	800060a <__aeabi_fdiv+0x32>
 80006f6:	230c      	movs	r3, #12
 80006f8:	4699      	mov	r9, r3
 80006fa:	3b09      	subs	r3, #9
 80006fc:	27ff      	movs	r7, #255	; 0xff
 80006fe:	469a      	mov	sl, r3
 8000700:	e783      	b.n	800060a <__aeabi_fdiv+0x32>
 8000702:	0028      	movs	r0, r5
 8000704:	f001 feda 	bl	80024bc <__clzsi2>
 8000708:	2776      	movs	r7, #118	; 0x76
 800070a:	1f43      	subs	r3, r0, #5
 800070c:	409d      	lsls	r5, r3
 800070e:	2300      	movs	r3, #0
 8000710:	427f      	negs	r7, r7
 8000712:	4699      	mov	r9, r3
 8000714:	469a      	mov	sl, r3
 8000716:	1a3f      	subs	r7, r7, r0
 8000718:	e777      	b.n	800060a <__aeabi_fdiv+0x32>
 800071a:	4640      	mov	r0, r8
 800071c:	f001 fece 	bl	80024bc <__clzsi2>
 8000720:	4642      	mov	r2, r8
 8000722:	1f43      	subs	r3, r0, #5
 8000724:	409a      	lsls	r2, r3
 8000726:	2376      	movs	r3, #118	; 0x76
 8000728:	425b      	negs	r3, r3
 800072a:	4690      	mov	r8, r2
 800072c:	1a1b      	subs	r3, r3, r0
 800072e:	2200      	movs	r2, #0
 8000730:	e77d      	b.n	800062e <__aeabi_fdiv+0x56>
 8000732:	23ff      	movs	r3, #255	; 0xff
 8000734:	2203      	movs	r2, #3
 8000736:	e77a      	b.n	800062e <__aeabi_fdiv+0x56>
 8000738:	000e      	movs	r6, r1
 800073a:	20ff      	movs	r0, #255	; 0xff
 800073c:	2500      	movs	r5, #0
 800073e:	e7ac      	b.n	800069a <__aeabi_fdiv+0xc2>
 8000740:	2001      	movs	r0, #1
 8000742:	1ac0      	subs	r0, r0, r3
 8000744:	281b      	cmp	r0, #27
 8000746:	dca6      	bgt.n	8000696 <__aeabi_fdiv+0xbe>
 8000748:	379e      	adds	r7, #158	; 0x9e
 800074a:	002a      	movs	r2, r5
 800074c:	40bd      	lsls	r5, r7
 800074e:	40c2      	lsrs	r2, r0
 8000750:	1e6b      	subs	r3, r5, #1
 8000752:	419d      	sbcs	r5, r3
 8000754:	4315      	orrs	r5, r2
 8000756:	076b      	lsls	r3, r5, #29
 8000758:	d004      	beq.n	8000764 <__aeabi_fdiv+0x18c>
 800075a:	230f      	movs	r3, #15
 800075c:	402b      	ands	r3, r5
 800075e:	2b04      	cmp	r3, #4
 8000760:	d000      	beq.n	8000764 <__aeabi_fdiv+0x18c>
 8000762:	3504      	adds	r5, #4
 8000764:	016b      	lsls	r3, r5, #5
 8000766:	d544      	bpl.n	80007f2 <__aeabi_fdiv+0x21a>
 8000768:	2001      	movs	r0, #1
 800076a:	2500      	movs	r5, #0
 800076c:	e795      	b.n	800069a <__aeabi_fdiv+0xc2>
 800076e:	20ff      	movs	r0, #255	; 0xff
 8000770:	2500      	movs	r5, #0
 8000772:	e792      	b.n	800069a <__aeabi_fdiv+0xc2>
 8000774:	2580      	movs	r5, #128	; 0x80
 8000776:	2600      	movs	r6, #0
 8000778:	20ff      	movs	r0, #255	; 0xff
 800077a:	03ed      	lsls	r5, r5, #15
 800077c:	e78d      	b.n	800069a <__aeabi_fdiv+0xc2>
 800077e:	2300      	movs	r3, #0
 8000780:	4698      	mov	r8, r3
 8000782:	2080      	movs	r0, #128	; 0x80
 8000784:	03c0      	lsls	r0, r0, #15
 8000786:	4205      	tst	r5, r0
 8000788:	d009      	beq.n	800079e <__aeabi_fdiv+0x1c6>
 800078a:	4643      	mov	r3, r8
 800078c:	4203      	tst	r3, r0
 800078e:	d106      	bne.n	800079e <__aeabi_fdiv+0x1c6>
 8000790:	4645      	mov	r5, r8
 8000792:	4305      	orrs	r5, r0
 8000794:	026d      	lsls	r5, r5, #9
 8000796:	0026      	movs	r6, r4
 8000798:	20ff      	movs	r0, #255	; 0xff
 800079a:	0a6d      	lsrs	r5, r5, #9
 800079c:	e77d      	b.n	800069a <__aeabi_fdiv+0xc2>
 800079e:	2080      	movs	r0, #128	; 0x80
 80007a0:	03c0      	lsls	r0, r0, #15
 80007a2:	4305      	orrs	r5, r0
 80007a4:	026d      	lsls	r5, r5, #9
 80007a6:	20ff      	movs	r0, #255	; 0xff
 80007a8:	0a6d      	lsrs	r5, r5, #9
 80007aa:	e776      	b.n	800069a <__aeabi_fdiv+0xc2>
 80007ac:	4642      	mov	r2, r8
 80007ae:	016b      	lsls	r3, r5, #5
 80007b0:	0150      	lsls	r0, r2, #5
 80007b2:	4283      	cmp	r3, r0
 80007b4:	d219      	bcs.n	80007ea <__aeabi_fdiv+0x212>
 80007b6:	221b      	movs	r2, #27
 80007b8:	2500      	movs	r5, #0
 80007ba:	3f01      	subs	r7, #1
 80007bc:	2601      	movs	r6, #1
 80007be:	001c      	movs	r4, r3
 80007c0:	006d      	lsls	r5, r5, #1
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	2c00      	cmp	r4, #0
 80007c6:	db01      	blt.n	80007cc <__aeabi_fdiv+0x1f4>
 80007c8:	4298      	cmp	r0, r3
 80007ca:	d801      	bhi.n	80007d0 <__aeabi_fdiv+0x1f8>
 80007cc:	1a1b      	subs	r3, r3, r0
 80007ce:	4335      	orrs	r5, r6
 80007d0:	3a01      	subs	r2, #1
 80007d2:	2a00      	cmp	r2, #0
 80007d4:	d1f3      	bne.n	80007be <__aeabi_fdiv+0x1e6>
 80007d6:	1e5a      	subs	r2, r3, #1
 80007d8:	4193      	sbcs	r3, r2
 80007da:	431d      	orrs	r5, r3
 80007dc:	003b      	movs	r3, r7
 80007de:	337f      	adds	r3, #127	; 0x7f
 80007e0:	000e      	movs	r6, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	dd00      	ble.n	80007e8 <__aeabi_fdiv+0x210>
 80007e6:	e741      	b.n	800066c <__aeabi_fdiv+0x94>
 80007e8:	e7aa      	b.n	8000740 <__aeabi_fdiv+0x168>
 80007ea:	221a      	movs	r2, #26
 80007ec:	2501      	movs	r5, #1
 80007ee:	1a1b      	subs	r3, r3, r0
 80007f0:	e7e4      	b.n	80007bc <__aeabi_fdiv+0x1e4>
 80007f2:	01ad      	lsls	r5, r5, #6
 80007f4:	2000      	movs	r0, #0
 80007f6:	0a6d      	lsrs	r5, r5, #9
 80007f8:	e74f      	b.n	800069a <__aeabi_fdiv+0xc2>
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	0800884c 	.word	0x0800884c
 8000800:	f7ffffff 	.word	0xf7ffffff
 8000804:	0800888c 	.word	0x0800888c

08000808 <__aeabi_dadd>:
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080a:	464f      	mov	r7, r9
 800080c:	4646      	mov	r6, r8
 800080e:	46d6      	mov	lr, sl
 8000810:	000d      	movs	r5, r1
 8000812:	0004      	movs	r4, r0
 8000814:	b5c0      	push	{r6, r7, lr}
 8000816:	001f      	movs	r7, r3
 8000818:	0011      	movs	r1, r2
 800081a:	0328      	lsls	r0, r5, #12
 800081c:	0f62      	lsrs	r2, r4, #29
 800081e:	0a40      	lsrs	r0, r0, #9
 8000820:	4310      	orrs	r0, r2
 8000822:	007a      	lsls	r2, r7, #1
 8000824:	0d52      	lsrs	r2, r2, #21
 8000826:	00e3      	lsls	r3, r4, #3
 8000828:	033c      	lsls	r4, r7, #12
 800082a:	4691      	mov	r9, r2
 800082c:	0a64      	lsrs	r4, r4, #9
 800082e:	0ffa      	lsrs	r2, r7, #31
 8000830:	0f4f      	lsrs	r7, r1, #29
 8000832:	006e      	lsls	r6, r5, #1
 8000834:	4327      	orrs	r7, r4
 8000836:	4692      	mov	sl, r2
 8000838:	46b8      	mov	r8, r7
 800083a:	0d76      	lsrs	r6, r6, #21
 800083c:	0fed      	lsrs	r5, r5, #31
 800083e:	00c9      	lsls	r1, r1, #3
 8000840:	4295      	cmp	r5, r2
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x3e>
 8000844:	e099      	b.n	800097a <__aeabi_dadd+0x172>
 8000846:	464c      	mov	r4, r9
 8000848:	1b34      	subs	r4, r6, r4
 800084a:	46a4      	mov	ip, r4
 800084c:	2c00      	cmp	r4, #0
 800084e:	dc00      	bgt.n	8000852 <__aeabi_dadd+0x4a>
 8000850:	e07c      	b.n	800094c <__aeabi_dadd+0x144>
 8000852:	464a      	mov	r2, r9
 8000854:	2a00      	cmp	r2, #0
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x52>
 8000858:	e0b8      	b.n	80009cc <__aeabi_dadd+0x1c4>
 800085a:	4ac5      	ldr	r2, [pc, #788]	; (8000b70 <__aeabi_dadd+0x368>)
 800085c:	4296      	cmp	r6, r2
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x5a>
 8000860:	e11c      	b.n	8000a9c <__aeabi_dadd+0x294>
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	003c      	movs	r4, r7
 8000866:	0412      	lsls	r2, r2, #16
 8000868:	4314      	orrs	r4, r2
 800086a:	46a0      	mov	r8, r4
 800086c:	4662      	mov	r2, ip
 800086e:	2a38      	cmp	r2, #56	; 0x38
 8000870:	dd00      	ble.n	8000874 <__aeabi_dadd+0x6c>
 8000872:	e161      	b.n	8000b38 <__aeabi_dadd+0x330>
 8000874:	2a1f      	cmp	r2, #31
 8000876:	dd00      	ble.n	800087a <__aeabi_dadd+0x72>
 8000878:	e1cc      	b.n	8000c14 <__aeabi_dadd+0x40c>
 800087a:	4664      	mov	r4, ip
 800087c:	2220      	movs	r2, #32
 800087e:	1b12      	subs	r2, r2, r4
 8000880:	4644      	mov	r4, r8
 8000882:	4094      	lsls	r4, r2
 8000884:	000f      	movs	r7, r1
 8000886:	46a1      	mov	r9, r4
 8000888:	4664      	mov	r4, ip
 800088a:	4091      	lsls	r1, r2
 800088c:	40e7      	lsrs	r7, r4
 800088e:	464c      	mov	r4, r9
 8000890:	1e4a      	subs	r2, r1, #1
 8000892:	4191      	sbcs	r1, r2
 8000894:	433c      	orrs	r4, r7
 8000896:	4642      	mov	r2, r8
 8000898:	4321      	orrs	r1, r4
 800089a:	4664      	mov	r4, ip
 800089c:	40e2      	lsrs	r2, r4
 800089e:	1a80      	subs	r0, r0, r2
 80008a0:	1a5c      	subs	r4, r3, r1
 80008a2:	42a3      	cmp	r3, r4
 80008a4:	419b      	sbcs	r3, r3
 80008a6:	425f      	negs	r7, r3
 80008a8:	1bc7      	subs	r7, r0, r7
 80008aa:	023b      	lsls	r3, r7, #8
 80008ac:	d400      	bmi.n	80008b0 <__aeabi_dadd+0xa8>
 80008ae:	e0d0      	b.n	8000a52 <__aeabi_dadd+0x24a>
 80008b0:	027f      	lsls	r7, r7, #9
 80008b2:	0a7f      	lsrs	r7, r7, #9
 80008b4:	2f00      	cmp	r7, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0xb2>
 80008b8:	e0ff      	b.n	8000aba <__aeabi_dadd+0x2b2>
 80008ba:	0038      	movs	r0, r7
 80008bc:	f001 fdfe 	bl	80024bc <__clzsi2>
 80008c0:	0001      	movs	r1, r0
 80008c2:	3908      	subs	r1, #8
 80008c4:	2320      	movs	r3, #32
 80008c6:	0022      	movs	r2, r4
 80008c8:	1a5b      	subs	r3, r3, r1
 80008ca:	408f      	lsls	r7, r1
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	408c      	lsls	r4, r1
 80008d0:	4317      	orrs	r7, r2
 80008d2:	42b1      	cmp	r1, r6
 80008d4:	da00      	bge.n	80008d8 <__aeabi_dadd+0xd0>
 80008d6:	e0ff      	b.n	8000ad8 <__aeabi_dadd+0x2d0>
 80008d8:	1b89      	subs	r1, r1, r6
 80008da:	1c4b      	adds	r3, r1, #1
 80008dc:	2b1f      	cmp	r3, #31
 80008de:	dd00      	ble.n	80008e2 <__aeabi_dadd+0xda>
 80008e0:	e0a8      	b.n	8000a34 <__aeabi_dadd+0x22c>
 80008e2:	2220      	movs	r2, #32
 80008e4:	0039      	movs	r1, r7
 80008e6:	1ad2      	subs	r2, r2, r3
 80008e8:	0020      	movs	r0, r4
 80008ea:	4094      	lsls	r4, r2
 80008ec:	4091      	lsls	r1, r2
 80008ee:	40d8      	lsrs	r0, r3
 80008f0:	1e62      	subs	r2, r4, #1
 80008f2:	4194      	sbcs	r4, r2
 80008f4:	40df      	lsrs	r7, r3
 80008f6:	2600      	movs	r6, #0
 80008f8:	4301      	orrs	r1, r0
 80008fa:	430c      	orrs	r4, r1
 80008fc:	0763      	lsls	r3, r4, #29
 80008fe:	d009      	beq.n	8000914 <__aeabi_dadd+0x10c>
 8000900:	230f      	movs	r3, #15
 8000902:	4023      	ands	r3, r4
 8000904:	2b04      	cmp	r3, #4
 8000906:	d005      	beq.n	8000914 <__aeabi_dadd+0x10c>
 8000908:	1d23      	adds	r3, r4, #4
 800090a:	42a3      	cmp	r3, r4
 800090c:	41a4      	sbcs	r4, r4
 800090e:	4264      	negs	r4, r4
 8000910:	193f      	adds	r7, r7, r4
 8000912:	001c      	movs	r4, r3
 8000914:	023b      	lsls	r3, r7, #8
 8000916:	d400      	bmi.n	800091a <__aeabi_dadd+0x112>
 8000918:	e09e      	b.n	8000a58 <__aeabi_dadd+0x250>
 800091a:	4b95      	ldr	r3, [pc, #596]	; (8000b70 <__aeabi_dadd+0x368>)
 800091c:	3601      	adds	r6, #1
 800091e:	429e      	cmp	r6, r3
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x11c>
 8000922:	e0b7      	b.n	8000a94 <__aeabi_dadd+0x28c>
 8000924:	4a93      	ldr	r2, [pc, #588]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000926:	08e4      	lsrs	r4, r4, #3
 8000928:	4017      	ands	r7, r2
 800092a:	077b      	lsls	r3, r7, #29
 800092c:	0571      	lsls	r1, r6, #21
 800092e:	027f      	lsls	r7, r7, #9
 8000930:	4323      	orrs	r3, r4
 8000932:	0b3f      	lsrs	r7, r7, #12
 8000934:	0d4a      	lsrs	r2, r1, #21
 8000936:	0512      	lsls	r2, r2, #20
 8000938:	433a      	orrs	r2, r7
 800093a:	07ed      	lsls	r5, r5, #31
 800093c:	432a      	orrs	r2, r5
 800093e:	0018      	movs	r0, r3
 8000940:	0011      	movs	r1, r2
 8000942:	bce0      	pop	{r5, r6, r7}
 8000944:	46ba      	mov	sl, r7
 8000946:	46b1      	mov	r9, r6
 8000948:	46a8      	mov	r8, r5
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	2c00      	cmp	r4, #0
 800094e:	d04b      	beq.n	80009e8 <__aeabi_dadd+0x1e0>
 8000950:	464c      	mov	r4, r9
 8000952:	1ba4      	subs	r4, r4, r6
 8000954:	46a4      	mov	ip, r4
 8000956:	2e00      	cmp	r6, #0
 8000958:	d000      	beq.n	800095c <__aeabi_dadd+0x154>
 800095a:	e123      	b.n	8000ba4 <__aeabi_dadd+0x39c>
 800095c:	0004      	movs	r4, r0
 800095e:	431c      	orrs	r4, r3
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x15c>
 8000962:	e1af      	b.n	8000cc4 <__aeabi_dadd+0x4bc>
 8000964:	4662      	mov	r2, ip
 8000966:	1e54      	subs	r4, r2, #1
 8000968:	2a01      	cmp	r2, #1
 800096a:	d100      	bne.n	800096e <__aeabi_dadd+0x166>
 800096c:	e215      	b.n	8000d9a <__aeabi_dadd+0x592>
 800096e:	4d80      	ldr	r5, [pc, #512]	; (8000b70 <__aeabi_dadd+0x368>)
 8000970:	45ac      	cmp	ip, r5
 8000972:	d100      	bne.n	8000976 <__aeabi_dadd+0x16e>
 8000974:	e1c8      	b.n	8000d08 <__aeabi_dadd+0x500>
 8000976:	46a4      	mov	ip, r4
 8000978:	e11b      	b.n	8000bb2 <__aeabi_dadd+0x3aa>
 800097a:	464a      	mov	r2, r9
 800097c:	1ab2      	subs	r2, r6, r2
 800097e:	4694      	mov	ip, r2
 8000980:	2a00      	cmp	r2, #0
 8000982:	dc00      	bgt.n	8000986 <__aeabi_dadd+0x17e>
 8000984:	e0ac      	b.n	8000ae0 <__aeabi_dadd+0x2d8>
 8000986:	464a      	mov	r2, r9
 8000988:	2a00      	cmp	r2, #0
 800098a:	d043      	beq.n	8000a14 <__aeabi_dadd+0x20c>
 800098c:	4a78      	ldr	r2, [pc, #480]	; (8000b70 <__aeabi_dadd+0x368>)
 800098e:	4296      	cmp	r6, r2
 8000990:	d100      	bne.n	8000994 <__aeabi_dadd+0x18c>
 8000992:	e1af      	b.n	8000cf4 <__aeabi_dadd+0x4ec>
 8000994:	2280      	movs	r2, #128	; 0x80
 8000996:	003c      	movs	r4, r7
 8000998:	0412      	lsls	r2, r2, #16
 800099a:	4314      	orrs	r4, r2
 800099c:	46a0      	mov	r8, r4
 800099e:	4662      	mov	r2, ip
 80009a0:	2a38      	cmp	r2, #56	; 0x38
 80009a2:	dc67      	bgt.n	8000a74 <__aeabi_dadd+0x26c>
 80009a4:	2a1f      	cmp	r2, #31
 80009a6:	dc00      	bgt.n	80009aa <__aeabi_dadd+0x1a2>
 80009a8:	e15f      	b.n	8000c6a <__aeabi_dadd+0x462>
 80009aa:	4647      	mov	r7, r8
 80009ac:	3a20      	subs	r2, #32
 80009ae:	40d7      	lsrs	r7, r2
 80009b0:	4662      	mov	r2, ip
 80009b2:	2a20      	cmp	r2, #32
 80009b4:	d005      	beq.n	80009c2 <__aeabi_dadd+0x1ba>
 80009b6:	4664      	mov	r4, ip
 80009b8:	2240      	movs	r2, #64	; 0x40
 80009ba:	1b12      	subs	r2, r2, r4
 80009bc:	4644      	mov	r4, r8
 80009be:	4094      	lsls	r4, r2
 80009c0:	4321      	orrs	r1, r4
 80009c2:	1e4a      	subs	r2, r1, #1
 80009c4:	4191      	sbcs	r1, r2
 80009c6:	000c      	movs	r4, r1
 80009c8:	433c      	orrs	r4, r7
 80009ca:	e057      	b.n	8000a7c <__aeabi_dadd+0x274>
 80009cc:	003a      	movs	r2, r7
 80009ce:	430a      	orrs	r2, r1
 80009d0:	d100      	bne.n	80009d4 <__aeabi_dadd+0x1cc>
 80009d2:	e105      	b.n	8000be0 <__aeabi_dadd+0x3d8>
 80009d4:	0022      	movs	r2, r4
 80009d6:	3a01      	subs	r2, #1
 80009d8:	2c01      	cmp	r4, #1
 80009da:	d100      	bne.n	80009de <__aeabi_dadd+0x1d6>
 80009dc:	e182      	b.n	8000ce4 <__aeabi_dadd+0x4dc>
 80009de:	4c64      	ldr	r4, [pc, #400]	; (8000b70 <__aeabi_dadd+0x368>)
 80009e0:	45a4      	cmp	ip, r4
 80009e2:	d05b      	beq.n	8000a9c <__aeabi_dadd+0x294>
 80009e4:	4694      	mov	ip, r2
 80009e6:	e741      	b.n	800086c <__aeabi_dadd+0x64>
 80009e8:	4c63      	ldr	r4, [pc, #396]	; (8000b78 <__aeabi_dadd+0x370>)
 80009ea:	1c77      	adds	r7, r6, #1
 80009ec:	4227      	tst	r7, r4
 80009ee:	d000      	beq.n	80009f2 <__aeabi_dadd+0x1ea>
 80009f0:	e0c4      	b.n	8000b7c <__aeabi_dadd+0x374>
 80009f2:	0004      	movs	r4, r0
 80009f4:	431c      	orrs	r4, r3
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	d000      	beq.n	80009fc <__aeabi_dadd+0x1f4>
 80009fa:	e169      	b.n	8000cd0 <__aeabi_dadd+0x4c8>
 80009fc:	2c00      	cmp	r4, #0
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dadd+0x1fa>
 8000a00:	e1bf      	b.n	8000d82 <__aeabi_dadd+0x57a>
 8000a02:	4644      	mov	r4, r8
 8000a04:	430c      	orrs	r4, r1
 8000a06:	d000      	beq.n	8000a0a <__aeabi_dadd+0x202>
 8000a08:	e1d0      	b.n	8000dac <__aeabi_dadd+0x5a4>
 8000a0a:	0742      	lsls	r2, r0, #29
 8000a0c:	08db      	lsrs	r3, r3, #3
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	08c0      	lsrs	r0, r0, #3
 8000a12:	e029      	b.n	8000a68 <__aeabi_dadd+0x260>
 8000a14:	003a      	movs	r2, r7
 8000a16:	430a      	orrs	r2, r1
 8000a18:	d100      	bne.n	8000a1c <__aeabi_dadd+0x214>
 8000a1a:	e170      	b.n	8000cfe <__aeabi_dadd+0x4f6>
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	4664      	mov	r4, ip
 8000a20:	3a01      	subs	r2, #1
 8000a22:	2c01      	cmp	r4, #1
 8000a24:	d100      	bne.n	8000a28 <__aeabi_dadd+0x220>
 8000a26:	e0e0      	b.n	8000bea <__aeabi_dadd+0x3e2>
 8000a28:	4c51      	ldr	r4, [pc, #324]	; (8000b70 <__aeabi_dadd+0x368>)
 8000a2a:	45a4      	cmp	ip, r4
 8000a2c:	d100      	bne.n	8000a30 <__aeabi_dadd+0x228>
 8000a2e:	e161      	b.n	8000cf4 <__aeabi_dadd+0x4ec>
 8000a30:	4694      	mov	ip, r2
 8000a32:	e7b4      	b.n	800099e <__aeabi_dadd+0x196>
 8000a34:	003a      	movs	r2, r7
 8000a36:	391f      	subs	r1, #31
 8000a38:	40ca      	lsrs	r2, r1
 8000a3a:	0011      	movs	r1, r2
 8000a3c:	2b20      	cmp	r3, #32
 8000a3e:	d003      	beq.n	8000a48 <__aeabi_dadd+0x240>
 8000a40:	2240      	movs	r2, #64	; 0x40
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	409f      	lsls	r7, r3
 8000a46:	433c      	orrs	r4, r7
 8000a48:	1e63      	subs	r3, r4, #1
 8000a4a:	419c      	sbcs	r4, r3
 8000a4c:	2700      	movs	r7, #0
 8000a4e:	2600      	movs	r6, #0
 8000a50:	430c      	orrs	r4, r1
 8000a52:	0763      	lsls	r3, r4, #29
 8000a54:	d000      	beq.n	8000a58 <__aeabi_dadd+0x250>
 8000a56:	e753      	b.n	8000900 <__aeabi_dadd+0xf8>
 8000a58:	46b4      	mov	ip, r6
 8000a5a:	08e4      	lsrs	r4, r4, #3
 8000a5c:	077b      	lsls	r3, r7, #29
 8000a5e:	4323      	orrs	r3, r4
 8000a60:	08f8      	lsrs	r0, r7, #3
 8000a62:	4a43      	ldr	r2, [pc, #268]	; (8000b70 <__aeabi_dadd+0x368>)
 8000a64:	4594      	cmp	ip, r2
 8000a66:	d01d      	beq.n	8000aa4 <__aeabi_dadd+0x29c>
 8000a68:	4662      	mov	r2, ip
 8000a6a:	0307      	lsls	r7, r0, #12
 8000a6c:	0552      	lsls	r2, r2, #21
 8000a6e:	0b3f      	lsrs	r7, r7, #12
 8000a70:	0d52      	lsrs	r2, r2, #21
 8000a72:	e760      	b.n	8000936 <__aeabi_dadd+0x12e>
 8000a74:	4644      	mov	r4, r8
 8000a76:	430c      	orrs	r4, r1
 8000a78:	1e62      	subs	r2, r4, #1
 8000a7a:	4194      	sbcs	r4, r2
 8000a7c:	18e4      	adds	r4, r4, r3
 8000a7e:	429c      	cmp	r4, r3
 8000a80:	419b      	sbcs	r3, r3
 8000a82:	425f      	negs	r7, r3
 8000a84:	183f      	adds	r7, r7, r0
 8000a86:	023b      	lsls	r3, r7, #8
 8000a88:	d5e3      	bpl.n	8000a52 <__aeabi_dadd+0x24a>
 8000a8a:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <__aeabi_dadd+0x368>)
 8000a8c:	3601      	adds	r6, #1
 8000a8e:	429e      	cmp	r6, r3
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dadd+0x28c>
 8000a92:	e0b5      	b.n	8000c00 <__aeabi_dadd+0x3f8>
 8000a94:	0032      	movs	r2, r6
 8000a96:	2700      	movs	r7, #0
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e74c      	b.n	8000936 <__aeabi_dadd+0x12e>
 8000a9c:	0742      	lsls	r2, r0, #29
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	08c0      	lsrs	r0, r0, #3
 8000aa4:	001a      	movs	r2, r3
 8000aa6:	4302      	orrs	r2, r0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dadd+0x2a4>
 8000aaa:	e1e1      	b.n	8000e70 <__aeabi_dadd+0x668>
 8000aac:	2780      	movs	r7, #128	; 0x80
 8000aae:	033f      	lsls	r7, r7, #12
 8000ab0:	4307      	orrs	r7, r0
 8000ab2:	033f      	lsls	r7, r7, #12
 8000ab4:	4a2e      	ldr	r2, [pc, #184]	; (8000b70 <__aeabi_dadd+0x368>)
 8000ab6:	0b3f      	lsrs	r7, r7, #12
 8000ab8:	e73d      	b.n	8000936 <__aeabi_dadd+0x12e>
 8000aba:	0020      	movs	r0, r4
 8000abc:	f001 fcfe 	bl	80024bc <__clzsi2>
 8000ac0:	0001      	movs	r1, r0
 8000ac2:	3118      	adds	r1, #24
 8000ac4:	291f      	cmp	r1, #31
 8000ac6:	dc00      	bgt.n	8000aca <__aeabi_dadd+0x2c2>
 8000ac8:	e6fc      	b.n	80008c4 <__aeabi_dadd+0xbc>
 8000aca:	3808      	subs	r0, #8
 8000acc:	4084      	lsls	r4, r0
 8000ace:	0027      	movs	r7, r4
 8000ad0:	2400      	movs	r4, #0
 8000ad2:	42b1      	cmp	r1, r6
 8000ad4:	db00      	blt.n	8000ad8 <__aeabi_dadd+0x2d0>
 8000ad6:	e6ff      	b.n	80008d8 <__aeabi_dadd+0xd0>
 8000ad8:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <__aeabi_dadd+0x36c>)
 8000ada:	1a76      	subs	r6, r6, r1
 8000adc:	4017      	ands	r7, r2
 8000ade:	e70d      	b.n	80008fc <__aeabi_dadd+0xf4>
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	d02f      	beq.n	8000b44 <__aeabi_dadd+0x33c>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	1b92      	subs	r2, r2, r6
 8000ae8:	4694      	mov	ip, r2
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d100      	bne.n	8000af0 <__aeabi_dadd+0x2e8>
 8000aee:	e0ad      	b.n	8000c4c <__aeabi_dadd+0x444>
 8000af0:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <__aeabi_dadd+0x368>)
 8000af2:	4591      	cmp	r9, r2
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x2f0>
 8000af6:	e10f      	b.n	8000d18 <__aeabi_dadd+0x510>
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	0412      	lsls	r2, r2, #16
 8000afc:	4310      	orrs	r0, r2
 8000afe:	4662      	mov	r2, ip
 8000b00:	2a38      	cmp	r2, #56	; 0x38
 8000b02:	dd00      	ble.n	8000b06 <__aeabi_dadd+0x2fe>
 8000b04:	e10f      	b.n	8000d26 <__aeabi_dadd+0x51e>
 8000b06:	2a1f      	cmp	r2, #31
 8000b08:	dd00      	ble.n	8000b0c <__aeabi_dadd+0x304>
 8000b0a:	e180      	b.n	8000e0e <__aeabi_dadd+0x606>
 8000b0c:	4664      	mov	r4, ip
 8000b0e:	2220      	movs	r2, #32
 8000b10:	001e      	movs	r6, r3
 8000b12:	1b12      	subs	r2, r2, r4
 8000b14:	4667      	mov	r7, ip
 8000b16:	0004      	movs	r4, r0
 8000b18:	4093      	lsls	r3, r2
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	40fe      	lsrs	r6, r7
 8000b1e:	1e5a      	subs	r2, r3, #1
 8000b20:	4193      	sbcs	r3, r2
 8000b22:	40f8      	lsrs	r0, r7
 8000b24:	4334      	orrs	r4, r6
 8000b26:	431c      	orrs	r4, r3
 8000b28:	4480      	add	r8, r0
 8000b2a:	1864      	adds	r4, r4, r1
 8000b2c:	428c      	cmp	r4, r1
 8000b2e:	41bf      	sbcs	r7, r7
 8000b30:	427f      	negs	r7, r7
 8000b32:	464e      	mov	r6, r9
 8000b34:	4447      	add	r7, r8
 8000b36:	e7a6      	b.n	8000a86 <__aeabi_dadd+0x27e>
 8000b38:	4642      	mov	r2, r8
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	0011      	movs	r1, r2
 8000b3e:	1e4a      	subs	r2, r1, #1
 8000b40:	4191      	sbcs	r1, r2
 8000b42:	e6ad      	b.n	80008a0 <__aeabi_dadd+0x98>
 8000b44:	4c0c      	ldr	r4, [pc, #48]	; (8000b78 <__aeabi_dadd+0x370>)
 8000b46:	1c72      	adds	r2, r6, #1
 8000b48:	4222      	tst	r2, r4
 8000b4a:	d000      	beq.n	8000b4e <__aeabi_dadd+0x346>
 8000b4c:	e0a1      	b.n	8000c92 <__aeabi_dadd+0x48a>
 8000b4e:	0002      	movs	r2, r0
 8000b50:	431a      	orrs	r2, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d000      	beq.n	8000b58 <__aeabi_dadd+0x350>
 8000b56:	e0fa      	b.n	8000d4e <__aeabi_dadd+0x546>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dadd+0x356>
 8000b5c:	e145      	b.n	8000dea <__aeabi_dadd+0x5e2>
 8000b5e:	003a      	movs	r2, r7
 8000b60:	430a      	orrs	r2, r1
 8000b62:	d000      	beq.n	8000b66 <__aeabi_dadd+0x35e>
 8000b64:	e146      	b.n	8000df4 <__aeabi_dadd+0x5ec>
 8000b66:	0742      	lsls	r2, r0, #29
 8000b68:	08db      	lsrs	r3, r3, #3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	08c0      	lsrs	r0, r0, #3
 8000b6e:	e77b      	b.n	8000a68 <__aeabi_dadd+0x260>
 8000b70:	000007ff 	.word	0x000007ff
 8000b74:	ff7fffff 	.word	0xff7fffff
 8000b78:	000007fe 	.word	0x000007fe
 8000b7c:	4647      	mov	r7, r8
 8000b7e:	1a5c      	subs	r4, r3, r1
 8000b80:	1bc2      	subs	r2, r0, r7
 8000b82:	42a3      	cmp	r3, r4
 8000b84:	41bf      	sbcs	r7, r7
 8000b86:	427f      	negs	r7, r7
 8000b88:	46b9      	mov	r9, r7
 8000b8a:	0017      	movs	r7, r2
 8000b8c:	464a      	mov	r2, r9
 8000b8e:	1abf      	subs	r7, r7, r2
 8000b90:	023a      	lsls	r2, r7, #8
 8000b92:	d500      	bpl.n	8000b96 <__aeabi_dadd+0x38e>
 8000b94:	e08d      	b.n	8000cb2 <__aeabi_dadd+0x4aa>
 8000b96:	0023      	movs	r3, r4
 8000b98:	433b      	orrs	r3, r7
 8000b9a:	d000      	beq.n	8000b9e <__aeabi_dadd+0x396>
 8000b9c:	e68a      	b.n	80008b4 <__aeabi_dadd+0xac>
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	2500      	movs	r5, #0
 8000ba2:	e761      	b.n	8000a68 <__aeabi_dadd+0x260>
 8000ba4:	4cb4      	ldr	r4, [pc, #720]	; (8000e78 <__aeabi_dadd+0x670>)
 8000ba6:	45a1      	cmp	r9, r4
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dadd+0x3a4>
 8000baa:	e0ad      	b.n	8000d08 <__aeabi_dadd+0x500>
 8000bac:	2480      	movs	r4, #128	; 0x80
 8000bae:	0424      	lsls	r4, r4, #16
 8000bb0:	4320      	orrs	r0, r4
 8000bb2:	4664      	mov	r4, ip
 8000bb4:	2c38      	cmp	r4, #56	; 0x38
 8000bb6:	dc3d      	bgt.n	8000c34 <__aeabi_dadd+0x42c>
 8000bb8:	4662      	mov	r2, ip
 8000bba:	2c1f      	cmp	r4, #31
 8000bbc:	dd00      	ble.n	8000bc0 <__aeabi_dadd+0x3b8>
 8000bbe:	e0b7      	b.n	8000d30 <__aeabi_dadd+0x528>
 8000bc0:	2520      	movs	r5, #32
 8000bc2:	001e      	movs	r6, r3
 8000bc4:	1b2d      	subs	r5, r5, r4
 8000bc6:	0004      	movs	r4, r0
 8000bc8:	40ab      	lsls	r3, r5
 8000bca:	40ac      	lsls	r4, r5
 8000bcc:	40d6      	lsrs	r6, r2
 8000bce:	40d0      	lsrs	r0, r2
 8000bd0:	4642      	mov	r2, r8
 8000bd2:	1e5d      	subs	r5, r3, #1
 8000bd4:	41ab      	sbcs	r3, r5
 8000bd6:	4334      	orrs	r4, r6
 8000bd8:	1a12      	subs	r2, r2, r0
 8000bda:	4690      	mov	r8, r2
 8000bdc:	4323      	orrs	r3, r4
 8000bde:	e02c      	b.n	8000c3a <__aeabi_dadd+0x432>
 8000be0:	0742      	lsls	r2, r0, #29
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	08c0      	lsrs	r0, r0, #3
 8000be8:	e73b      	b.n	8000a62 <__aeabi_dadd+0x25a>
 8000bea:	185c      	adds	r4, r3, r1
 8000bec:	429c      	cmp	r4, r3
 8000bee:	419b      	sbcs	r3, r3
 8000bf0:	4440      	add	r0, r8
 8000bf2:	425b      	negs	r3, r3
 8000bf4:	18c7      	adds	r7, r0, r3
 8000bf6:	2601      	movs	r6, #1
 8000bf8:	023b      	lsls	r3, r7, #8
 8000bfa:	d400      	bmi.n	8000bfe <__aeabi_dadd+0x3f6>
 8000bfc:	e729      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000bfe:	2602      	movs	r6, #2
 8000c00:	4a9e      	ldr	r2, [pc, #632]	; (8000e7c <__aeabi_dadd+0x674>)
 8000c02:	0863      	lsrs	r3, r4, #1
 8000c04:	4017      	ands	r7, r2
 8000c06:	2201      	movs	r2, #1
 8000c08:	4014      	ands	r4, r2
 8000c0a:	431c      	orrs	r4, r3
 8000c0c:	07fb      	lsls	r3, r7, #31
 8000c0e:	431c      	orrs	r4, r3
 8000c10:	087f      	lsrs	r7, r7, #1
 8000c12:	e673      	b.n	80008fc <__aeabi_dadd+0xf4>
 8000c14:	4644      	mov	r4, r8
 8000c16:	3a20      	subs	r2, #32
 8000c18:	40d4      	lsrs	r4, r2
 8000c1a:	4662      	mov	r2, ip
 8000c1c:	2a20      	cmp	r2, #32
 8000c1e:	d005      	beq.n	8000c2c <__aeabi_dadd+0x424>
 8000c20:	4667      	mov	r7, ip
 8000c22:	2240      	movs	r2, #64	; 0x40
 8000c24:	1bd2      	subs	r2, r2, r7
 8000c26:	4647      	mov	r7, r8
 8000c28:	4097      	lsls	r7, r2
 8000c2a:	4339      	orrs	r1, r7
 8000c2c:	1e4a      	subs	r2, r1, #1
 8000c2e:	4191      	sbcs	r1, r2
 8000c30:	4321      	orrs	r1, r4
 8000c32:	e635      	b.n	80008a0 <__aeabi_dadd+0x98>
 8000c34:	4303      	orrs	r3, r0
 8000c36:	1e58      	subs	r0, r3, #1
 8000c38:	4183      	sbcs	r3, r0
 8000c3a:	1acc      	subs	r4, r1, r3
 8000c3c:	42a1      	cmp	r1, r4
 8000c3e:	41bf      	sbcs	r7, r7
 8000c40:	4643      	mov	r3, r8
 8000c42:	427f      	negs	r7, r7
 8000c44:	4655      	mov	r5, sl
 8000c46:	464e      	mov	r6, r9
 8000c48:	1bdf      	subs	r7, r3, r7
 8000c4a:	e62e      	b.n	80008aa <__aeabi_dadd+0xa2>
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	431a      	orrs	r2, r3
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dadd+0x44c>
 8000c52:	e0bd      	b.n	8000dd0 <__aeabi_dadd+0x5c8>
 8000c54:	4662      	mov	r2, ip
 8000c56:	4664      	mov	r4, ip
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	2c01      	cmp	r4, #1
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_dadd+0x458>
 8000c5e:	e0e5      	b.n	8000e2c <__aeabi_dadd+0x624>
 8000c60:	4c85      	ldr	r4, [pc, #532]	; (8000e78 <__aeabi_dadd+0x670>)
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d058      	beq.n	8000d18 <__aeabi_dadd+0x510>
 8000c66:	4694      	mov	ip, r2
 8000c68:	e749      	b.n	8000afe <__aeabi_dadd+0x2f6>
 8000c6a:	4664      	mov	r4, ip
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	1b12      	subs	r2, r2, r4
 8000c70:	4644      	mov	r4, r8
 8000c72:	4094      	lsls	r4, r2
 8000c74:	000f      	movs	r7, r1
 8000c76:	46a1      	mov	r9, r4
 8000c78:	4664      	mov	r4, ip
 8000c7a:	4091      	lsls	r1, r2
 8000c7c:	40e7      	lsrs	r7, r4
 8000c7e:	464c      	mov	r4, r9
 8000c80:	1e4a      	subs	r2, r1, #1
 8000c82:	4191      	sbcs	r1, r2
 8000c84:	433c      	orrs	r4, r7
 8000c86:	4642      	mov	r2, r8
 8000c88:	430c      	orrs	r4, r1
 8000c8a:	4661      	mov	r1, ip
 8000c8c:	40ca      	lsrs	r2, r1
 8000c8e:	1880      	adds	r0, r0, r2
 8000c90:	e6f4      	b.n	8000a7c <__aeabi_dadd+0x274>
 8000c92:	4c79      	ldr	r4, [pc, #484]	; (8000e78 <__aeabi_dadd+0x670>)
 8000c94:	42a2      	cmp	r2, r4
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x492>
 8000c98:	e6fd      	b.n	8000a96 <__aeabi_dadd+0x28e>
 8000c9a:	1859      	adds	r1, r3, r1
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	419b      	sbcs	r3, r3
 8000ca0:	4440      	add	r0, r8
 8000ca2:	425f      	negs	r7, r3
 8000ca4:	19c7      	adds	r7, r0, r7
 8000ca6:	07fc      	lsls	r4, r7, #31
 8000ca8:	0849      	lsrs	r1, r1, #1
 8000caa:	0016      	movs	r6, r2
 8000cac:	430c      	orrs	r4, r1
 8000cae:	087f      	lsrs	r7, r7, #1
 8000cb0:	e6cf      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000cb2:	1acc      	subs	r4, r1, r3
 8000cb4:	42a1      	cmp	r1, r4
 8000cb6:	41bf      	sbcs	r7, r7
 8000cb8:	4643      	mov	r3, r8
 8000cba:	427f      	negs	r7, r7
 8000cbc:	1a18      	subs	r0, r3, r0
 8000cbe:	4655      	mov	r5, sl
 8000cc0:	1bc7      	subs	r7, r0, r7
 8000cc2:	e5f7      	b.n	80008b4 <__aeabi_dadd+0xac>
 8000cc4:	08c9      	lsrs	r1, r1, #3
 8000cc6:	077b      	lsls	r3, r7, #29
 8000cc8:	4655      	mov	r5, sl
 8000cca:	430b      	orrs	r3, r1
 8000ccc:	08f8      	lsrs	r0, r7, #3
 8000cce:	e6c8      	b.n	8000a62 <__aeabi_dadd+0x25a>
 8000cd0:	2c00      	cmp	r4, #0
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dadd+0x4ce>
 8000cd4:	e081      	b.n	8000dda <__aeabi_dadd+0x5d2>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	430b      	orrs	r3, r1
 8000cda:	d115      	bne.n	8000d08 <__aeabi_dadd+0x500>
 8000cdc:	2080      	movs	r0, #128	; 0x80
 8000cde:	2500      	movs	r5, #0
 8000ce0:	0300      	lsls	r0, r0, #12
 8000ce2:	e6e3      	b.n	8000aac <__aeabi_dadd+0x2a4>
 8000ce4:	1a5c      	subs	r4, r3, r1
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	419b      	sbcs	r3, r3
 8000cea:	1bc7      	subs	r7, r0, r7
 8000cec:	425b      	negs	r3, r3
 8000cee:	2601      	movs	r6, #1
 8000cf0:	1aff      	subs	r7, r7, r3
 8000cf2:	e5da      	b.n	80008aa <__aeabi_dadd+0xa2>
 8000cf4:	0742      	lsls	r2, r0, #29
 8000cf6:	08db      	lsrs	r3, r3, #3
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	08c0      	lsrs	r0, r0, #3
 8000cfc:	e6d2      	b.n	8000aa4 <__aeabi_dadd+0x29c>
 8000cfe:	0742      	lsls	r2, r0, #29
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	08c0      	lsrs	r0, r0, #3
 8000d06:	e6ac      	b.n	8000a62 <__aeabi_dadd+0x25a>
 8000d08:	4643      	mov	r3, r8
 8000d0a:	4642      	mov	r2, r8
 8000d0c:	08c9      	lsrs	r1, r1, #3
 8000d0e:	075b      	lsls	r3, r3, #29
 8000d10:	4655      	mov	r5, sl
 8000d12:	430b      	orrs	r3, r1
 8000d14:	08d0      	lsrs	r0, r2, #3
 8000d16:	e6c5      	b.n	8000aa4 <__aeabi_dadd+0x29c>
 8000d18:	4643      	mov	r3, r8
 8000d1a:	4642      	mov	r2, r8
 8000d1c:	075b      	lsls	r3, r3, #29
 8000d1e:	08c9      	lsrs	r1, r1, #3
 8000d20:	430b      	orrs	r3, r1
 8000d22:	08d0      	lsrs	r0, r2, #3
 8000d24:	e6be      	b.n	8000aa4 <__aeabi_dadd+0x29c>
 8000d26:	4303      	orrs	r3, r0
 8000d28:	001c      	movs	r4, r3
 8000d2a:	1e63      	subs	r3, r4, #1
 8000d2c:	419c      	sbcs	r4, r3
 8000d2e:	e6fc      	b.n	8000b2a <__aeabi_dadd+0x322>
 8000d30:	0002      	movs	r2, r0
 8000d32:	3c20      	subs	r4, #32
 8000d34:	40e2      	lsrs	r2, r4
 8000d36:	0014      	movs	r4, r2
 8000d38:	4662      	mov	r2, ip
 8000d3a:	2a20      	cmp	r2, #32
 8000d3c:	d003      	beq.n	8000d46 <__aeabi_dadd+0x53e>
 8000d3e:	2540      	movs	r5, #64	; 0x40
 8000d40:	1aad      	subs	r5, r5, r2
 8000d42:	40a8      	lsls	r0, r5
 8000d44:	4303      	orrs	r3, r0
 8000d46:	1e58      	subs	r0, r3, #1
 8000d48:	4183      	sbcs	r3, r0
 8000d4a:	4323      	orrs	r3, r4
 8000d4c:	e775      	b.n	8000c3a <__aeabi_dadd+0x432>
 8000d4e:	2a00      	cmp	r2, #0
 8000d50:	d0e2      	beq.n	8000d18 <__aeabi_dadd+0x510>
 8000d52:	003a      	movs	r2, r7
 8000d54:	430a      	orrs	r2, r1
 8000d56:	d0cd      	beq.n	8000cf4 <__aeabi_dadd+0x4ec>
 8000d58:	0742      	lsls	r2, r0, #29
 8000d5a:	08db      	lsrs	r3, r3, #3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	2280      	movs	r2, #128	; 0x80
 8000d60:	08c0      	lsrs	r0, r0, #3
 8000d62:	0312      	lsls	r2, r2, #12
 8000d64:	4210      	tst	r0, r2
 8000d66:	d006      	beq.n	8000d76 <__aeabi_dadd+0x56e>
 8000d68:	08fc      	lsrs	r4, r7, #3
 8000d6a:	4214      	tst	r4, r2
 8000d6c:	d103      	bne.n	8000d76 <__aeabi_dadd+0x56e>
 8000d6e:	0020      	movs	r0, r4
 8000d70:	08cb      	lsrs	r3, r1, #3
 8000d72:	077a      	lsls	r2, r7, #29
 8000d74:	4313      	orrs	r3, r2
 8000d76:	0f5a      	lsrs	r2, r3, #29
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	0752      	lsls	r2, r2, #29
 8000d7c:	08db      	lsrs	r3, r3, #3
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	e690      	b.n	8000aa4 <__aeabi_dadd+0x29c>
 8000d82:	4643      	mov	r3, r8
 8000d84:	430b      	orrs	r3, r1
 8000d86:	d100      	bne.n	8000d8a <__aeabi_dadd+0x582>
 8000d88:	e709      	b.n	8000b9e <__aeabi_dadd+0x396>
 8000d8a:	4643      	mov	r3, r8
 8000d8c:	4642      	mov	r2, r8
 8000d8e:	08c9      	lsrs	r1, r1, #3
 8000d90:	075b      	lsls	r3, r3, #29
 8000d92:	4655      	mov	r5, sl
 8000d94:	430b      	orrs	r3, r1
 8000d96:	08d0      	lsrs	r0, r2, #3
 8000d98:	e666      	b.n	8000a68 <__aeabi_dadd+0x260>
 8000d9a:	1acc      	subs	r4, r1, r3
 8000d9c:	42a1      	cmp	r1, r4
 8000d9e:	4189      	sbcs	r1, r1
 8000da0:	1a3f      	subs	r7, r7, r0
 8000da2:	4249      	negs	r1, r1
 8000da4:	4655      	mov	r5, sl
 8000da6:	2601      	movs	r6, #1
 8000da8:	1a7f      	subs	r7, r7, r1
 8000daa:	e57e      	b.n	80008aa <__aeabi_dadd+0xa2>
 8000dac:	4642      	mov	r2, r8
 8000dae:	1a5c      	subs	r4, r3, r1
 8000db0:	1a87      	subs	r7, r0, r2
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	4192      	sbcs	r2, r2
 8000db6:	4252      	negs	r2, r2
 8000db8:	1abf      	subs	r7, r7, r2
 8000dba:	023a      	lsls	r2, r7, #8
 8000dbc:	d53d      	bpl.n	8000e3a <__aeabi_dadd+0x632>
 8000dbe:	1acc      	subs	r4, r1, r3
 8000dc0:	42a1      	cmp	r1, r4
 8000dc2:	4189      	sbcs	r1, r1
 8000dc4:	4643      	mov	r3, r8
 8000dc6:	4249      	negs	r1, r1
 8000dc8:	1a1f      	subs	r7, r3, r0
 8000dca:	4655      	mov	r5, sl
 8000dcc:	1a7f      	subs	r7, r7, r1
 8000dce:	e595      	b.n	80008fc <__aeabi_dadd+0xf4>
 8000dd0:	077b      	lsls	r3, r7, #29
 8000dd2:	08c9      	lsrs	r1, r1, #3
 8000dd4:	430b      	orrs	r3, r1
 8000dd6:	08f8      	lsrs	r0, r7, #3
 8000dd8:	e643      	b.n	8000a62 <__aeabi_dadd+0x25a>
 8000dda:	4644      	mov	r4, r8
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	430c      	orrs	r4, r1
 8000de0:	d130      	bne.n	8000e44 <__aeabi_dadd+0x63c>
 8000de2:	0742      	lsls	r2, r0, #29
 8000de4:	4313      	orrs	r3, r2
 8000de6:	08c0      	lsrs	r0, r0, #3
 8000de8:	e65c      	b.n	8000aa4 <__aeabi_dadd+0x29c>
 8000dea:	077b      	lsls	r3, r7, #29
 8000dec:	08c9      	lsrs	r1, r1, #3
 8000dee:	430b      	orrs	r3, r1
 8000df0:	08f8      	lsrs	r0, r7, #3
 8000df2:	e639      	b.n	8000a68 <__aeabi_dadd+0x260>
 8000df4:	185c      	adds	r4, r3, r1
 8000df6:	429c      	cmp	r4, r3
 8000df8:	419b      	sbcs	r3, r3
 8000dfa:	4440      	add	r0, r8
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	18c7      	adds	r7, r0, r3
 8000e00:	023b      	lsls	r3, r7, #8
 8000e02:	d400      	bmi.n	8000e06 <__aeabi_dadd+0x5fe>
 8000e04:	e625      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <__aeabi_dadd+0x674>)
 8000e08:	2601      	movs	r6, #1
 8000e0a:	401f      	ands	r7, r3
 8000e0c:	e621      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000e0e:	0004      	movs	r4, r0
 8000e10:	3a20      	subs	r2, #32
 8000e12:	40d4      	lsrs	r4, r2
 8000e14:	4662      	mov	r2, ip
 8000e16:	2a20      	cmp	r2, #32
 8000e18:	d004      	beq.n	8000e24 <__aeabi_dadd+0x61c>
 8000e1a:	2240      	movs	r2, #64	; 0x40
 8000e1c:	4666      	mov	r6, ip
 8000e1e:	1b92      	subs	r2, r2, r6
 8000e20:	4090      	lsls	r0, r2
 8000e22:	4303      	orrs	r3, r0
 8000e24:	1e5a      	subs	r2, r3, #1
 8000e26:	4193      	sbcs	r3, r2
 8000e28:	431c      	orrs	r4, r3
 8000e2a:	e67e      	b.n	8000b2a <__aeabi_dadd+0x322>
 8000e2c:	185c      	adds	r4, r3, r1
 8000e2e:	428c      	cmp	r4, r1
 8000e30:	4189      	sbcs	r1, r1
 8000e32:	4440      	add	r0, r8
 8000e34:	4249      	negs	r1, r1
 8000e36:	1847      	adds	r7, r0, r1
 8000e38:	e6dd      	b.n	8000bf6 <__aeabi_dadd+0x3ee>
 8000e3a:	0023      	movs	r3, r4
 8000e3c:	433b      	orrs	r3, r7
 8000e3e:	d100      	bne.n	8000e42 <__aeabi_dadd+0x63a>
 8000e40:	e6ad      	b.n	8000b9e <__aeabi_dadd+0x396>
 8000e42:	e606      	b.n	8000a52 <__aeabi_dadd+0x24a>
 8000e44:	0744      	lsls	r4, r0, #29
 8000e46:	4323      	orrs	r3, r4
 8000e48:	2480      	movs	r4, #128	; 0x80
 8000e4a:	08c0      	lsrs	r0, r0, #3
 8000e4c:	0324      	lsls	r4, r4, #12
 8000e4e:	4220      	tst	r0, r4
 8000e50:	d008      	beq.n	8000e64 <__aeabi_dadd+0x65c>
 8000e52:	4642      	mov	r2, r8
 8000e54:	08d6      	lsrs	r6, r2, #3
 8000e56:	4226      	tst	r6, r4
 8000e58:	d104      	bne.n	8000e64 <__aeabi_dadd+0x65c>
 8000e5a:	4655      	mov	r5, sl
 8000e5c:	0030      	movs	r0, r6
 8000e5e:	08cb      	lsrs	r3, r1, #3
 8000e60:	0751      	lsls	r1, r2, #29
 8000e62:	430b      	orrs	r3, r1
 8000e64:	0f5a      	lsrs	r2, r3, #29
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	08db      	lsrs	r3, r3, #3
 8000e6a:	0752      	lsls	r2, r2, #29
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	e619      	b.n	8000aa4 <__aeabi_dadd+0x29c>
 8000e70:	2300      	movs	r3, #0
 8000e72:	4a01      	ldr	r2, [pc, #4]	; (8000e78 <__aeabi_dadd+0x670>)
 8000e74:	001f      	movs	r7, r3
 8000e76:	e55e      	b.n	8000936 <__aeabi_dadd+0x12e>
 8000e78:	000007ff 	.word	0x000007ff
 8000e7c:	ff7fffff 	.word	0xff7fffff

08000e80 <__aeabi_ddiv>:
 8000e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e82:	4657      	mov	r7, sl
 8000e84:	464e      	mov	r6, r9
 8000e86:	4645      	mov	r5, r8
 8000e88:	46de      	mov	lr, fp
 8000e8a:	b5e0      	push	{r5, r6, r7, lr}
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	0005      	movs	r5, r0
 8000e90:	030c      	lsls	r4, r1, #12
 8000e92:	0048      	lsls	r0, r1, #1
 8000e94:	4692      	mov	sl, r2
 8000e96:	001f      	movs	r7, r3
 8000e98:	b085      	sub	sp, #20
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	0d40      	lsrs	r0, r0, #21
 8000e9e:	0fce      	lsrs	r6, r1, #31
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_ddiv+0x26>
 8000ea4:	e156      	b.n	8001154 <__aeabi_ddiv+0x2d4>
 8000ea6:	4bd4      	ldr	r3, [pc, #848]	; (80011f8 <__aeabi_ddiv+0x378>)
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	d100      	bne.n	8000eae <__aeabi_ddiv+0x2e>
 8000eac:	e172      	b.n	8001194 <__aeabi_ddiv+0x314>
 8000eae:	0f6b      	lsrs	r3, r5, #29
 8000eb0:	00e4      	lsls	r4, r4, #3
 8000eb2:	431c      	orrs	r4, r3
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	041b      	lsls	r3, r3, #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	4698      	mov	r8, r3
 8000ebc:	4bcf      	ldr	r3, [pc, #828]	; (80011fc <__aeabi_ddiv+0x37c>)
 8000ebe:	00ed      	lsls	r5, r5, #3
 8000ec0:	469b      	mov	fp, r3
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	4699      	mov	r9, r3
 8000ec6:	4483      	add	fp, r0
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	033c      	lsls	r4, r7, #12
 8000ecc:	007b      	lsls	r3, r7, #1
 8000ece:	4650      	mov	r0, sl
 8000ed0:	0b24      	lsrs	r4, r4, #12
 8000ed2:	0d5b      	lsrs	r3, r3, #21
 8000ed4:	0fff      	lsrs	r7, r7, #31
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_ddiv+0x5c>
 8000eda:	e11f      	b.n	800111c <__aeabi_ddiv+0x29c>
 8000edc:	4ac6      	ldr	r2, [pc, #792]	; (80011f8 <__aeabi_ddiv+0x378>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d100      	bne.n	8000ee4 <__aeabi_ddiv+0x64>
 8000ee2:	e162      	b.n	80011aa <__aeabi_ddiv+0x32a>
 8000ee4:	49c5      	ldr	r1, [pc, #788]	; (80011fc <__aeabi_ddiv+0x37c>)
 8000ee6:	0f42      	lsrs	r2, r0, #29
 8000ee8:	468c      	mov	ip, r1
 8000eea:	00e4      	lsls	r4, r4, #3
 8000eec:	4659      	mov	r1, fp
 8000eee:	4314      	orrs	r4, r2
 8000ef0:	2280      	movs	r2, #128	; 0x80
 8000ef2:	4463      	add	r3, ip
 8000ef4:	0412      	lsls	r2, r2, #16
 8000ef6:	1acb      	subs	r3, r1, r3
 8000ef8:	4314      	orrs	r4, r2
 8000efa:	469b      	mov	fp, r3
 8000efc:	00c2      	lsls	r2, r0, #3
 8000efe:	2000      	movs	r0, #0
 8000f00:	0033      	movs	r3, r6
 8000f02:	407b      	eors	r3, r7
 8000f04:	469a      	mov	sl, r3
 8000f06:	464b      	mov	r3, r9
 8000f08:	2b0f      	cmp	r3, #15
 8000f0a:	d827      	bhi.n	8000f5c <__aeabi_ddiv+0xdc>
 8000f0c:	49bc      	ldr	r1, [pc, #752]	; (8001200 <__aeabi_ddiv+0x380>)
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	58cb      	ldr	r3, [r1, r3]
 8000f12:	469f      	mov	pc, r3
 8000f14:	46b2      	mov	sl, r6
 8000f16:	9b00      	ldr	r3, [sp, #0]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d016      	beq.n	8000f4a <__aeabi_ddiv+0xca>
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0xa2>
 8000f20:	e28e      	b.n	8001440 <__aeabi_ddiv+0x5c0>
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d000      	beq.n	8000f28 <__aeabi_ddiv+0xa8>
 8000f26:	e0d9      	b.n	80010dc <__aeabi_ddiv+0x25c>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2400      	movs	r4, #0
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	4652      	mov	r2, sl
 8000f30:	051b      	lsls	r3, r3, #20
 8000f32:	4323      	orrs	r3, r4
 8000f34:	07d2      	lsls	r2, r2, #31
 8000f36:	4313      	orrs	r3, r2
 8000f38:	0028      	movs	r0, r5
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	b005      	add	sp, #20
 8000f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f40:	46bb      	mov	fp, r7
 8000f42:	46b2      	mov	sl, r6
 8000f44:	46a9      	mov	r9, r5
 8000f46:	46a0      	mov	r8, r4
 8000f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f4a:	2400      	movs	r4, #0
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	4baa      	ldr	r3, [pc, #680]	; (80011f8 <__aeabi_ddiv+0x378>)
 8000f50:	e7ed      	b.n	8000f2e <__aeabi_ddiv+0xae>
 8000f52:	46ba      	mov	sl, r7
 8000f54:	46a0      	mov	r8, r4
 8000f56:	0015      	movs	r5, r2
 8000f58:	9000      	str	r0, [sp, #0]
 8000f5a:	e7dc      	b.n	8000f16 <__aeabi_ddiv+0x96>
 8000f5c:	4544      	cmp	r4, r8
 8000f5e:	d200      	bcs.n	8000f62 <__aeabi_ddiv+0xe2>
 8000f60:	e1c7      	b.n	80012f2 <__aeabi_ddiv+0x472>
 8000f62:	d100      	bne.n	8000f66 <__aeabi_ddiv+0xe6>
 8000f64:	e1c2      	b.n	80012ec <__aeabi_ddiv+0x46c>
 8000f66:	2301      	movs	r3, #1
 8000f68:	425b      	negs	r3, r3
 8000f6a:	469c      	mov	ip, r3
 8000f6c:	002e      	movs	r6, r5
 8000f6e:	4640      	mov	r0, r8
 8000f70:	2500      	movs	r5, #0
 8000f72:	44e3      	add	fp, ip
 8000f74:	0223      	lsls	r3, r4, #8
 8000f76:	0e14      	lsrs	r4, r2, #24
 8000f78:	431c      	orrs	r4, r3
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	4699      	mov	r9, r3
 8000f7e:	0423      	lsls	r3, r4, #16
 8000f80:	0c1f      	lsrs	r7, r3, #16
 8000f82:	0212      	lsls	r2, r2, #8
 8000f84:	4649      	mov	r1, r9
 8000f86:	9200      	str	r2, [sp, #0]
 8000f88:	9701      	str	r7, [sp, #4]
 8000f8a:	f7ff f943 	bl	8000214 <__aeabi_uidivmod>
 8000f8e:	0002      	movs	r2, r0
 8000f90:	437a      	muls	r2, r7
 8000f92:	040b      	lsls	r3, r1, #16
 8000f94:	0c31      	lsrs	r1, r6, #16
 8000f96:	4680      	mov	r8, r0
 8000f98:	4319      	orrs	r1, r3
 8000f9a:	428a      	cmp	r2, r1
 8000f9c:	d907      	bls.n	8000fae <__aeabi_ddiv+0x12e>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	425b      	negs	r3, r3
 8000fa2:	469c      	mov	ip, r3
 8000fa4:	1909      	adds	r1, r1, r4
 8000fa6:	44e0      	add	r8, ip
 8000fa8:	428c      	cmp	r4, r1
 8000faa:	d800      	bhi.n	8000fae <__aeabi_ddiv+0x12e>
 8000fac:	e207      	b.n	80013be <__aeabi_ddiv+0x53e>
 8000fae:	1a88      	subs	r0, r1, r2
 8000fb0:	4649      	mov	r1, r9
 8000fb2:	f7ff f92f 	bl	8000214 <__aeabi_uidivmod>
 8000fb6:	0409      	lsls	r1, r1, #16
 8000fb8:	468c      	mov	ip, r1
 8000fba:	0431      	lsls	r1, r6, #16
 8000fbc:	4666      	mov	r6, ip
 8000fbe:	9a01      	ldr	r2, [sp, #4]
 8000fc0:	0c09      	lsrs	r1, r1, #16
 8000fc2:	4342      	muls	r2, r0
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	4331      	orrs	r1, r6
 8000fc8:	428a      	cmp	r2, r1
 8000fca:	d904      	bls.n	8000fd6 <__aeabi_ddiv+0x156>
 8000fcc:	1909      	adds	r1, r1, r4
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	428c      	cmp	r4, r1
 8000fd2:	d800      	bhi.n	8000fd6 <__aeabi_ddiv+0x156>
 8000fd4:	e1ed      	b.n	80013b2 <__aeabi_ddiv+0x532>
 8000fd6:	1a88      	subs	r0, r1, r2
 8000fd8:	4642      	mov	r2, r8
 8000fda:	0412      	lsls	r2, r2, #16
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	4690      	mov	r8, r2
 8000fe0:	4641      	mov	r1, r8
 8000fe2:	9b00      	ldr	r3, [sp, #0]
 8000fe4:	040e      	lsls	r6, r1, #16
 8000fe6:	0c1b      	lsrs	r3, r3, #16
 8000fe8:	001f      	movs	r7, r3
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	9b00      	ldr	r3, [sp, #0]
 8000fee:	0c36      	lsrs	r6, r6, #16
 8000ff0:	041b      	lsls	r3, r3, #16
 8000ff2:	0c19      	lsrs	r1, r3, #16
 8000ff4:	000b      	movs	r3, r1
 8000ff6:	4373      	muls	r3, r6
 8000ff8:	0c12      	lsrs	r2, r2, #16
 8000ffa:	437e      	muls	r6, r7
 8000ffc:	9103      	str	r1, [sp, #12]
 8000ffe:	4351      	muls	r1, r2
 8001000:	437a      	muls	r2, r7
 8001002:	0c1f      	lsrs	r7, r3, #16
 8001004:	46bc      	mov	ip, r7
 8001006:	1876      	adds	r6, r6, r1
 8001008:	4466      	add	r6, ip
 800100a:	42b1      	cmp	r1, r6
 800100c:	d903      	bls.n	8001016 <__aeabi_ddiv+0x196>
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	0249      	lsls	r1, r1, #9
 8001012:	468c      	mov	ip, r1
 8001014:	4462      	add	r2, ip
 8001016:	0c31      	lsrs	r1, r6, #16
 8001018:	188a      	adds	r2, r1, r2
 800101a:	0431      	lsls	r1, r6, #16
 800101c:	041e      	lsls	r6, r3, #16
 800101e:	0c36      	lsrs	r6, r6, #16
 8001020:	198e      	adds	r6, r1, r6
 8001022:	4290      	cmp	r0, r2
 8001024:	d302      	bcc.n	800102c <__aeabi_ddiv+0x1ac>
 8001026:	d112      	bne.n	800104e <__aeabi_ddiv+0x1ce>
 8001028:	42b5      	cmp	r5, r6
 800102a:	d210      	bcs.n	800104e <__aeabi_ddiv+0x1ce>
 800102c:	4643      	mov	r3, r8
 800102e:	1e59      	subs	r1, r3, #1
 8001030:	9b00      	ldr	r3, [sp, #0]
 8001032:	469c      	mov	ip, r3
 8001034:	4465      	add	r5, ip
 8001036:	001f      	movs	r7, r3
 8001038:	429d      	cmp	r5, r3
 800103a:	419b      	sbcs	r3, r3
 800103c:	425b      	negs	r3, r3
 800103e:	191b      	adds	r3, r3, r4
 8001040:	18c0      	adds	r0, r0, r3
 8001042:	4284      	cmp	r4, r0
 8001044:	d200      	bcs.n	8001048 <__aeabi_ddiv+0x1c8>
 8001046:	e1a0      	b.n	800138a <__aeabi_ddiv+0x50a>
 8001048:	d100      	bne.n	800104c <__aeabi_ddiv+0x1cc>
 800104a:	e19b      	b.n	8001384 <__aeabi_ddiv+0x504>
 800104c:	4688      	mov	r8, r1
 800104e:	1bae      	subs	r6, r5, r6
 8001050:	42b5      	cmp	r5, r6
 8001052:	41ad      	sbcs	r5, r5
 8001054:	1a80      	subs	r0, r0, r2
 8001056:	426d      	negs	r5, r5
 8001058:	1b40      	subs	r0, r0, r5
 800105a:	4284      	cmp	r4, r0
 800105c:	d100      	bne.n	8001060 <__aeabi_ddiv+0x1e0>
 800105e:	e1d5      	b.n	800140c <__aeabi_ddiv+0x58c>
 8001060:	4649      	mov	r1, r9
 8001062:	f7ff f8d7 	bl	8000214 <__aeabi_uidivmod>
 8001066:	9a01      	ldr	r2, [sp, #4]
 8001068:	040b      	lsls	r3, r1, #16
 800106a:	4342      	muls	r2, r0
 800106c:	0c31      	lsrs	r1, r6, #16
 800106e:	0005      	movs	r5, r0
 8001070:	4319      	orrs	r1, r3
 8001072:	428a      	cmp	r2, r1
 8001074:	d900      	bls.n	8001078 <__aeabi_ddiv+0x1f8>
 8001076:	e16c      	b.n	8001352 <__aeabi_ddiv+0x4d2>
 8001078:	1a88      	subs	r0, r1, r2
 800107a:	4649      	mov	r1, r9
 800107c:	f7ff f8ca 	bl	8000214 <__aeabi_uidivmod>
 8001080:	9a01      	ldr	r2, [sp, #4]
 8001082:	0436      	lsls	r6, r6, #16
 8001084:	4342      	muls	r2, r0
 8001086:	0409      	lsls	r1, r1, #16
 8001088:	0c36      	lsrs	r6, r6, #16
 800108a:	0003      	movs	r3, r0
 800108c:	430e      	orrs	r6, r1
 800108e:	42b2      	cmp	r2, r6
 8001090:	d900      	bls.n	8001094 <__aeabi_ddiv+0x214>
 8001092:	e153      	b.n	800133c <__aeabi_ddiv+0x4bc>
 8001094:	9803      	ldr	r0, [sp, #12]
 8001096:	1ab6      	subs	r6, r6, r2
 8001098:	0002      	movs	r2, r0
 800109a:	042d      	lsls	r5, r5, #16
 800109c:	431d      	orrs	r5, r3
 800109e:	9f02      	ldr	r7, [sp, #8]
 80010a0:	042b      	lsls	r3, r5, #16
 80010a2:	0c1b      	lsrs	r3, r3, #16
 80010a4:	435a      	muls	r2, r3
 80010a6:	437b      	muls	r3, r7
 80010a8:	469c      	mov	ip, r3
 80010aa:	0c29      	lsrs	r1, r5, #16
 80010ac:	4348      	muls	r0, r1
 80010ae:	0c13      	lsrs	r3, r2, #16
 80010b0:	4484      	add	ip, r0
 80010b2:	4463      	add	r3, ip
 80010b4:	4379      	muls	r1, r7
 80010b6:	4298      	cmp	r0, r3
 80010b8:	d903      	bls.n	80010c2 <__aeabi_ddiv+0x242>
 80010ba:	2080      	movs	r0, #128	; 0x80
 80010bc:	0240      	lsls	r0, r0, #9
 80010be:	4684      	mov	ip, r0
 80010c0:	4461      	add	r1, ip
 80010c2:	0c18      	lsrs	r0, r3, #16
 80010c4:	0412      	lsls	r2, r2, #16
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	0c12      	lsrs	r2, r2, #16
 80010ca:	1841      	adds	r1, r0, r1
 80010cc:	189b      	adds	r3, r3, r2
 80010ce:	428e      	cmp	r6, r1
 80010d0:	d200      	bcs.n	80010d4 <__aeabi_ddiv+0x254>
 80010d2:	e0ff      	b.n	80012d4 <__aeabi_ddiv+0x454>
 80010d4:	d100      	bne.n	80010d8 <__aeabi_ddiv+0x258>
 80010d6:	e0fa      	b.n	80012ce <__aeabi_ddiv+0x44e>
 80010d8:	2301      	movs	r3, #1
 80010da:	431d      	orrs	r5, r3
 80010dc:	4a49      	ldr	r2, [pc, #292]	; (8001204 <__aeabi_ddiv+0x384>)
 80010de:	445a      	add	r2, fp
 80010e0:	2a00      	cmp	r2, #0
 80010e2:	dc00      	bgt.n	80010e6 <__aeabi_ddiv+0x266>
 80010e4:	e0aa      	b.n	800123c <__aeabi_ddiv+0x3bc>
 80010e6:	076b      	lsls	r3, r5, #29
 80010e8:	d000      	beq.n	80010ec <__aeabi_ddiv+0x26c>
 80010ea:	e13d      	b.n	8001368 <__aeabi_ddiv+0x4e8>
 80010ec:	08ed      	lsrs	r5, r5, #3
 80010ee:	4643      	mov	r3, r8
 80010f0:	01db      	lsls	r3, r3, #7
 80010f2:	d506      	bpl.n	8001102 <__aeabi_ddiv+0x282>
 80010f4:	4642      	mov	r2, r8
 80010f6:	4b44      	ldr	r3, [pc, #272]	; (8001208 <__aeabi_ddiv+0x388>)
 80010f8:	401a      	ands	r2, r3
 80010fa:	4690      	mov	r8, r2
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	00d2      	lsls	r2, r2, #3
 8001100:	445a      	add	r2, fp
 8001102:	4b42      	ldr	r3, [pc, #264]	; (800120c <__aeabi_ddiv+0x38c>)
 8001104:	429a      	cmp	r2, r3
 8001106:	dd00      	ble.n	800110a <__aeabi_ddiv+0x28a>
 8001108:	e71f      	b.n	8000f4a <__aeabi_ddiv+0xca>
 800110a:	4643      	mov	r3, r8
 800110c:	075b      	lsls	r3, r3, #29
 800110e:	431d      	orrs	r5, r3
 8001110:	4643      	mov	r3, r8
 8001112:	0552      	lsls	r2, r2, #21
 8001114:	025c      	lsls	r4, r3, #9
 8001116:	0b24      	lsrs	r4, r4, #12
 8001118:	0d53      	lsrs	r3, r2, #21
 800111a:	e708      	b.n	8000f2e <__aeabi_ddiv+0xae>
 800111c:	4652      	mov	r2, sl
 800111e:	4322      	orrs	r2, r4
 8001120:	d100      	bne.n	8001124 <__aeabi_ddiv+0x2a4>
 8001122:	e07b      	b.n	800121c <__aeabi_ddiv+0x39c>
 8001124:	2c00      	cmp	r4, #0
 8001126:	d100      	bne.n	800112a <__aeabi_ddiv+0x2aa>
 8001128:	e0fa      	b.n	8001320 <__aeabi_ddiv+0x4a0>
 800112a:	0020      	movs	r0, r4
 800112c:	f001 f9c6 	bl	80024bc <__clzsi2>
 8001130:	0002      	movs	r2, r0
 8001132:	3a0b      	subs	r2, #11
 8001134:	231d      	movs	r3, #29
 8001136:	0001      	movs	r1, r0
 8001138:	1a9b      	subs	r3, r3, r2
 800113a:	4652      	mov	r2, sl
 800113c:	3908      	subs	r1, #8
 800113e:	40da      	lsrs	r2, r3
 8001140:	408c      	lsls	r4, r1
 8001142:	4314      	orrs	r4, r2
 8001144:	4652      	mov	r2, sl
 8001146:	408a      	lsls	r2, r1
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <__aeabi_ddiv+0x390>)
 800114a:	4458      	add	r0, fp
 800114c:	469b      	mov	fp, r3
 800114e:	4483      	add	fp, r0
 8001150:	2000      	movs	r0, #0
 8001152:	e6d5      	b.n	8000f00 <__aeabi_ddiv+0x80>
 8001154:	464b      	mov	r3, r9
 8001156:	4323      	orrs	r3, r4
 8001158:	4698      	mov	r8, r3
 800115a:	d044      	beq.n	80011e6 <__aeabi_ddiv+0x366>
 800115c:	2c00      	cmp	r4, #0
 800115e:	d100      	bne.n	8001162 <__aeabi_ddiv+0x2e2>
 8001160:	e0ce      	b.n	8001300 <__aeabi_ddiv+0x480>
 8001162:	0020      	movs	r0, r4
 8001164:	f001 f9aa 	bl	80024bc <__clzsi2>
 8001168:	0001      	movs	r1, r0
 800116a:	0002      	movs	r2, r0
 800116c:	390b      	subs	r1, #11
 800116e:	231d      	movs	r3, #29
 8001170:	1a5b      	subs	r3, r3, r1
 8001172:	4649      	mov	r1, r9
 8001174:	0010      	movs	r0, r2
 8001176:	40d9      	lsrs	r1, r3
 8001178:	3808      	subs	r0, #8
 800117a:	4084      	lsls	r4, r0
 800117c:	000b      	movs	r3, r1
 800117e:	464d      	mov	r5, r9
 8001180:	4323      	orrs	r3, r4
 8001182:	4698      	mov	r8, r3
 8001184:	4085      	lsls	r5, r0
 8001186:	4823      	ldr	r0, [pc, #140]	; (8001214 <__aeabi_ddiv+0x394>)
 8001188:	1a83      	subs	r3, r0, r2
 800118a:	469b      	mov	fp, r3
 800118c:	2300      	movs	r3, #0
 800118e:	4699      	mov	r9, r3
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	e69a      	b.n	8000eca <__aeabi_ddiv+0x4a>
 8001194:	464b      	mov	r3, r9
 8001196:	4323      	orrs	r3, r4
 8001198:	4698      	mov	r8, r3
 800119a:	d11d      	bne.n	80011d8 <__aeabi_ddiv+0x358>
 800119c:	2308      	movs	r3, #8
 800119e:	4699      	mov	r9, r3
 80011a0:	3b06      	subs	r3, #6
 80011a2:	2500      	movs	r5, #0
 80011a4:	4683      	mov	fp, r0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	e68f      	b.n	8000eca <__aeabi_ddiv+0x4a>
 80011aa:	4652      	mov	r2, sl
 80011ac:	4322      	orrs	r2, r4
 80011ae:	d109      	bne.n	80011c4 <__aeabi_ddiv+0x344>
 80011b0:	2302      	movs	r3, #2
 80011b2:	4649      	mov	r1, r9
 80011b4:	4319      	orrs	r1, r3
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <__aeabi_ddiv+0x398>)
 80011b8:	4689      	mov	r9, r1
 80011ba:	469c      	mov	ip, r3
 80011bc:	2400      	movs	r4, #0
 80011be:	2002      	movs	r0, #2
 80011c0:	44e3      	add	fp, ip
 80011c2:	e69d      	b.n	8000f00 <__aeabi_ddiv+0x80>
 80011c4:	2303      	movs	r3, #3
 80011c6:	464a      	mov	r2, r9
 80011c8:	431a      	orrs	r2, r3
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <__aeabi_ddiv+0x398>)
 80011cc:	4691      	mov	r9, r2
 80011ce:	469c      	mov	ip, r3
 80011d0:	4652      	mov	r2, sl
 80011d2:	2003      	movs	r0, #3
 80011d4:	44e3      	add	fp, ip
 80011d6:	e693      	b.n	8000f00 <__aeabi_ddiv+0x80>
 80011d8:	230c      	movs	r3, #12
 80011da:	4699      	mov	r9, r3
 80011dc:	3b09      	subs	r3, #9
 80011de:	46a0      	mov	r8, r4
 80011e0:	4683      	mov	fp, r0
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	e671      	b.n	8000eca <__aeabi_ddiv+0x4a>
 80011e6:	2304      	movs	r3, #4
 80011e8:	4699      	mov	r9, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	469b      	mov	fp, r3
 80011ee:	3301      	adds	r3, #1
 80011f0:	2500      	movs	r5, #0
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	e669      	b.n	8000eca <__aeabi_ddiv+0x4a>
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	000007ff 	.word	0x000007ff
 80011fc:	fffffc01 	.word	0xfffffc01
 8001200:	080088cc 	.word	0x080088cc
 8001204:	000003ff 	.word	0x000003ff
 8001208:	feffffff 	.word	0xfeffffff
 800120c:	000007fe 	.word	0x000007fe
 8001210:	000003f3 	.word	0x000003f3
 8001214:	fffffc0d 	.word	0xfffffc0d
 8001218:	fffff801 	.word	0xfffff801
 800121c:	4649      	mov	r1, r9
 800121e:	2301      	movs	r3, #1
 8001220:	4319      	orrs	r1, r3
 8001222:	4689      	mov	r9, r1
 8001224:	2400      	movs	r4, #0
 8001226:	2001      	movs	r0, #1
 8001228:	e66a      	b.n	8000f00 <__aeabi_ddiv+0x80>
 800122a:	2300      	movs	r3, #0
 800122c:	2480      	movs	r4, #128	; 0x80
 800122e:	469a      	mov	sl, r3
 8001230:	2500      	movs	r5, #0
 8001232:	4b8a      	ldr	r3, [pc, #552]	; (800145c <__aeabi_ddiv+0x5dc>)
 8001234:	0324      	lsls	r4, r4, #12
 8001236:	e67a      	b.n	8000f2e <__aeabi_ddiv+0xae>
 8001238:	2501      	movs	r5, #1
 800123a:	426d      	negs	r5, r5
 800123c:	2301      	movs	r3, #1
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	2b38      	cmp	r3, #56	; 0x38
 8001242:	dd00      	ble.n	8001246 <__aeabi_ddiv+0x3c6>
 8001244:	e670      	b.n	8000f28 <__aeabi_ddiv+0xa8>
 8001246:	2b1f      	cmp	r3, #31
 8001248:	dc00      	bgt.n	800124c <__aeabi_ddiv+0x3cc>
 800124a:	e0bf      	b.n	80013cc <__aeabi_ddiv+0x54c>
 800124c:	211f      	movs	r1, #31
 800124e:	4249      	negs	r1, r1
 8001250:	1a8a      	subs	r2, r1, r2
 8001252:	4641      	mov	r1, r8
 8001254:	40d1      	lsrs	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	2b20      	cmp	r3, #32
 800125a:	d004      	beq.n	8001266 <__aeabi_ddiv+0x3e6>
 800125c:	4641      	mov	r1, r8
 800125e:	4b80      	ldr	r3, [pc, #512]	; (8001460 <__aeabi_ddiv+0x5e0>)
 8001260:	445b      	add	r3, fp
 8001262:	4099      	lsls	r1, r3
 8001264:	430d      	orrs	r5, r1
 8001266:	1e6b      	subs	r3, r5, #1
 8001268:	419d      	sbcs	r5, r3
 800126a:	2307      	movs	r3, #7
 800126c:	432a      	orrs	r2, r5
 800126e:	001d      	movs	r5, r3
 8001270:	2400      	movs	r4, #0
 8001272:	4015      	ands	r5, r2
 8001274:	4213      	tst	r3, r2
 8001276:	d100      	bne.n	800127a <__aeabi_ddiv+0x3fa>
 8001278:	e0d4      	b.n	8001424 <__aeabi_ddiv+0x5a4>
 800127a:	210f      	movs	r1, #15
 800127c:	2300      	movs	r3, #0
 800127e:	4011      	ands	r1, r2
 8001280:	2904      	cmp	r1, #4
 8001282:	d100      	bne.n	8001286 <__aeabi_ddiv+0x406>
 8001284:	e0cb      	b.n	800141e <__aeabi_ddiv+0x59e>
 8001286:	1d11      	adds	r1, r2, #4
 8001288:	4291      	cmp	r1, r2
 800128a:	4192      	sbcs	r2, r2
 800128c:	4252      	negs	r2, r2
 800128e:	189b      	adds	r3, r3, r2
 8001290:	000a      	movs	r2, r1
 8001292:	0219      	lsls	r1, r3, #8
 8001294:	d400      	bmi.n	8001298 <__aeabi_ddiv+0x418>
 8001296:	e0c2      	b.n	800141e <__aeabi_ddiv+0x59e>
 8001298:	2301      	movs	r3, #1
 800129a:	2400      	movs	r4, #0
 800129c:	2500      	movs	r5, #0
 800129e:	e646      	b.n	8000f2e <__aeabi_ddiv+0xae>
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	4641      	mov	r1, r8
 80012a4:	031b      	lsls	r3, r3, #12
 80012a6:	4219      	tst	r1, r3
 80012a8:	d008      	beq.n	80012bc <__aeabi_ddiv+0x43c>
 80012aa:	421c      	tst	r4, r3
 80012ac:	d106      	bne.n	80012bc <__aeabi_ddiv+0x43c>
 80012ae:	431c      	orrs	r4, r3
 80012b0:	0324      	lsls	r4, r4, #12
 80012b2:	46ba      	mov	sl, r7
 80012b4:	0015      	movs	r5, r2
 80012b6:	4b69      	ldr	r3, [pc, #420]	; (800145c <__aeabi_ddiv+0x5dc>)
 80012b8:	0b24      	lsrs	r4, r4, #12
 80012ba:	e638      	b.n	8000f2e <__aeabi_ddiv+0xae>
 80012bc:	2480      	movs	r4, #128	; 0x80
 80012be:	4643      	mov	r3, r8
 80012c0:	0324      	lsls	r4, r4, #12
 80012c2:	431c      	orrs	r4, r3
 80012c4:	0324      	lsls	r4, r4, #12
 80012c6:	46b2      	mov	sl, r6
 80012c8:	4b64      	ldr	r3, [pc, #400]	; (800145c <__aeabi_ddiv+0x5dc>)
 80012ca:	0b24      	lsrs	r4, r4, #12
 80012cc:	e62f      	b.n	8000f2e <__aeabi_ddiv+0xae>
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d100      	bne.n	80012d4 <__aeabi_ddiv+0x454>
 80012d2:	e703      	b.n	80010dc <__aeabi_ddiv+0x25c>
 80012d4:	19a6      	adds	r6, r4, r6
 80012d6:	1e68      	subs	r0, r5, #1
 80012d8:	42a6      	cmp	r6, r4
 80012da:	d200      	bcs.n	80012de <__aeabi_ddiv+0x45e>
 80012dc:	e08d      	b.n	80013fa <__aeabi_ddiv+0x57a>
 80012de:	428e      	cmp	r6, r1
 80012e0:	d200      	bcs.n	80012e4 <__aeabi_ddiv+0x464>
 80012e2:	e0a3      	b.n	800142c <__aeabi_ddiv+0x5ac>
 80012e4:	d100      	bne.n	80012e8 <__aeabi_ddiv+0x468>
 80012e6:	e0b3      	b.n	8001450 <__aeabi_ddiv+0x5d0>
 80012e8:	0005      	movs	r5, r0
 80012ea:	e6f5      	b.n	80010d8 <__aeabi_ddiv+0x258>
 80012ec:	42aa      	cmp	r2, r5
 80012ee:	d900      	bls.n	80012f2 <__aeabi_ddiv+0x472>
 80012f0:	e639      	b.n	8000f66 <__aeabi_ddiv+0xe6>
 80012f2:	4643      	mov	r3, r8
 80012f4:	07de      	lsls	r6, r3, #31
 80012f6:	0858      	lsrs	r0, r3, #1
 80012f8:	086b      	lsrs	r3, r5, #1
 80012fa:	431e      	orrs	r6, r3
 80012fc:	07ed      	lsls	r5, r5, #31
 80012fe:	e639      	b.n	8000f74 <__aeabi_ddiv+0xf4>
 8001300:	4648      	mov	r0, r9
 8001302:	f001 f8db 	bl	80024bc <__clzsi2>
 8001306:	0001      	movs	r1, r0
 8001308:	0002      	movs	r2, r0
 800130a:	3115      	adds	r1, #21
 800130c:	3220      	adds	r2, #32
 800130e:	291c      	cmp	r1, #28
 8001310:	dc00      	bgt.n	8001314 <__aeabi_ddiv+0x494>
 8001312:	e72c      	b.n	800116e <__aeabi_ddiv+0x2ee>
 8001314:	464b      	mov	r3, r9
 8001316:	3808      	subs	r0, #8
 8001318:	4083      	lsls	r3, r0
 800131a:	2500      	movs	r5, #0
 800131c:	4698      	mov	r8, r3
 800131e:	e732      	b.n	8001186 <__aeabi_ddiv+0x306>
 8001320:	f001 f8cc 	bl	80024bc <__clzsi2>
 8001324:	0003      	movs	r3, r0
 8001326:	001a      	movs	r2, r3
 8001328:	3215      	adds	r2, #21
 800132a:	3020      	adds	r0, #32
 800132c:	2a1c      	cmp	r2, #28
 800132e:	dc00      	bgt.n	8001332 <__aeabi_ddiv+0x4b2>
 8001330:	e700      	b.n	8001134 <__aeabi_ddiv+0x2b4>
 8001332:	4654      	mov	r4, sl
 8001334:	3b08      	subs	r3, #8
 8001336:	2200      	movs	r2, #0
 8001338:	409c      	lsls	r4, r3
 800133a:	e705      	b.n	8001148 <__aeabi_ddiv+0x2c8>
 800133c:	1936      	adds	r6, r6, r4
 800133e:	3b01      	subs	r3, #1
 8001340:	42b4      	cmp	r4, r6
 8001342:	d900      	bls.n	8001346 <__aeabi_ddiv+0x4c6>
 8001344:	e6a6      	b.n	8001094 <__aeabi_ddiv+0x214>
 8001346:	42b2      	cmp	r2, r6
 8001348:	d800      	bhi.n	800134c <__aeabi_ddiv+0x4cc>
 800134a:	e6a3      	b.n	8001094 <__aeabi_ddiv+0x214>
 800134c:	1e83      	subs	r3, r0, #2
 800134e:	1936      	adds	r6, r6, r4
 8001350:	e6a0      	b.n	8001094 <__aeabi_ddiv+0x214>
 8001352:	1909      	adds	r1, r1, r4
 8001354:	3d01      	subs	r5, #1
 8001356:	428c      	cmp	r4, r1
 8001358:	d900      	bls.n	800135c <__aeabi_ddiv+0x4dc>
 800135a:	e68d      	b.n	8001078 <__aeabi_ddiv+0x1f8>
 800135c:	428a      	cmp	r2, r1
 800135e:	d800      	bhi.n	8001362 <__aeabi_ddiv+0x4e2>
 8001360:	e68a      	b.n	8001078 <__aeabi_ddiv+0x1f8>
 8001362:	1e85      	subs	r5, r0, #2
 8001364:	1909      	adds	r1, r1, r4
 8001366:	e687      	b.n	8001078 <__aeabi_ddiv+0x1f8>
 8001368:	230f      	movs	r3, #15
 800136a:	402b      	ands	r3, r5
 800136c:	2b04      	cmp	r3, #4
 800136e:	d100      	bne.n	8001372 <__aeabi_ddiv+0x4f2>
 8001370:	e6bc      	b.n	80010ec <__aeabi_ddiv+0x26c>
 8001372:	2305      	movs	r3, #5
 8001374:	425b      	negs	r3, r3
 8001376:	42ab      	cmp	r3, r5
 8001378:	419b      	sbcs	r3, r3
 800137a:	3504      	adds	r5, #4
 800137c:	425b      	negs	r3, r3
 800137e:	08ed      	lsrs	r5, r5, #3
 8001380:	4498      	add	r8, r3
 8001382:	e6b4      	b.n	80010ee <__aeabi_ddiv+0x26e>
 8001384:	42af      	cmp	r7, r5
 8001386:	d900      	bls.n	800138a <__aeabi_ddiv+0x50a>
 8001388:	e660      	b.n	800104c <__aeabi_ddiv+0x1cc>
 800138a:	4282      	cmp	r2, r0
 800138c:	d804      	bhi.n	8001398 <__aeabi_ddiv+0x518>
 800138e:	d000      	beq.n	8001392 <__aeabi_ddiv+0x512>
 8001390:	e65c      	b.n	800104c <__aeabi_ddiv+0x1cc>
 8001392:	42ae      	cmp	r6, r5
 8001394:	d800      	bhi.n	8001398 <__aeabi_ddiv+0x518>
 8001396:	e659      	b.n	800104c <__aeabi_ddiv+0x1cc>
 8001398:	2302      	movs	r3, #2
 800139a:	425b      	negs	r3, r3
 800139c:	469c      	mov	ip, r3
 800139e:	9b00      	ldr	r3, [sp, #0]
 80013a0:	44e0      	add	r8, ip
 80013a2:	469c      	mov	ip, r3
 80013a4:	4465      	add	r5, ip
 80013a6:	429d      	cmp	r5, r3
 80013a8:	419b      	sbcs	r3, r3
 80013aa:	425b      	negs	r3, r3
 80013ac:	191b      	adds	r3, r3, r4
 80013ae:	18c0      	adds	r0, r0, r3
 80013b0:	e64d      	b.n	800104e <__aeabi_ddiv+0x1ce>
 80013b2:	428a      	cmp	r2, r1
 80013b4:	d800      	bhi.n	80013b8 <__aeabi_ddiv+0x538>
 80013b6:	e60e      	b.n	8000fd6 <__aeabi_ddiv+0x156>
 80013b8:	1e83      	subs	r3, r0, #2
 80013ba:	1909      	adds	r1, r1, r4
 80013bc:	e60b      	b.n	8000fd6 <__aeabi_ddiv+0x156>
 80013be:	428a      	cmp	r2, r1
 80013c0:	d800      	bhi.n	80013c4 <__aeabi_ddiv+0x544>
 80013c2:	e5f4      	b.n	8000fae <__aeabi_ddiv+0x12e>
 80013c4:	1e83      	subs	r3, r0, #2
 80013c6:	4698      	mov	r8, r3
 80013c8:	1909      	adds	r1, r1, r4
 80013ca:	e5f0      	b.n	8000fae <__aeabi_ddiv+0x12e>
 80013cc:	4925      	ldr	r1, [pc, #148]	; (8001464 <__aeabi_ddiv+0x5e4>)
 80013ce:	0028      	movs	r0, r5
 80013d0:	4459      	add	r1, fp
 80013d2:	408d      	lsls	r5, r1
 80013d4:	4642      	mov	r2, r8
 80013d6:	408a      	lsls	r2, r1
 80013d8:	1e69      	subs	r1, r5, #1
 80013da:	418d      	sbcs	r5, r1
 80013dc:	4641      	mov	r1, r8
 80013de:	40d8      	lsrs	r0, r3
 80013e0:	40d9      	lsrs	r1, r3
 80013e2:	4302      	orrs	r2, r0
 80013e4:	432a      	orrs	r2, r5
 80013e6:	000b      	movs	r3, r1
 80013e8:	0751      	lsls	r1, r2, #29
 80013ea:	d100      	bne.n	80013ee <__aeabi_ddiv+0x56e>
 80013ec:	e751      	b.n	8001292 <__aeabi_ddiv+0x412>
 80013ee:	210f      	movs	r1, #15
 80013f0:	4011      	ands	r1, r2
 80013f2:	2904      	cmp	r1, #4
 80013f4:	d000      	beq.n	80013f8 <__aeabi_ddiv+0x578>
 80013f6:	e746      	b.n	8001286 <__aeabi_ddiv+0x406>
 80013f8:	e74b      	b.n	8001292 <__aeabi_ddiv+0x412>
 80013fa:	0005      	movs	r5, r0
 80013fc:	428e      	cmp	r6, r1
 80013fe:	d000      	beq.n	8001402 <__aeabi_ddiv+0x582>
 8001400:	e66a      	b.n	80010d8 <__aeabi_ddiv+0x258>
 8001402:	9a00      	ldr	r2, [sp, #0]
 8001404:	4293      	cmp	r3, r2
 8001406:	d000      	beq.n	800140a <__aeabi_ddiv+0x58a>
 8001408:	e666      	b.n	80010d8 <__aeabi_ddiv+0x258>
 800140a:	e667      	b.n	80010dc <__aeabi_ddiv+0x25c>
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <__aeabi_ddiv+0x5e8>)
 800140e:	445a      	add	r2, fp
 8001410:	2a00      	cmp	r2, #0
 8001412:	dc00      	bgt.n	8001416 <__aeabi_ddiv+0x596>
 8001414:	e710      	b.n	8001238 <__aeabi_ddiv+0x3b8>
 8001416:	2301      	movs	r3, #1
 8001418:	2500      	movs	r5, #0
 800141a:	4498      	add	r8, r3
 800141c:	e667      	b.n	80010ee <__aeabi_ddiv+0x26e>
 800141e:	075d      	lsls	r5, r3, #29
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	0b1c      	lsrs	r4, r3, #12
 8001424:	08d2      	lsrs	r2, r2, #3
 8001426:	2300      	movs	r3, #0
 8001428:	4315      	orrs	r5, r2
 800142a:	e580      	b.n	8000f2e <__aeabi_ddiv+0xae>
 800142c:	9800      	ldr	r0, [sp, #0]
 800142e:	3d02      	subs	r5, #2
 8001430:	0042      	lsls	r2, r0, #1
 8001432:	4282      	cmp	r2, r0
 8001434:	41bf      	sbcs	r7, r7
 8001436:	427f      	negs	r7, r7
 8001438:	193c      	adds	r4, r7, r4
 800143a:	1936      	adds	r6, r6, r4
 800143c:	9200      	str	r2, [sp, #0]
 800143e:	e7dd      	b.n	80013fc <__aeabi_ddiv+0x57c>
 8001440:	2480      	movs	r4, #128	; 0x80
 8001442:	4643      	mov	r3, r8
 8001444:	0324      	lsls	r4, r4, #12
 8001446:	431c      	orrs	r4, r3
 8001448:	0324      	lsls	r4, r4, #12
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <__aeabi_ddiv+0x5dc>)
 800144c:	0b24      	lsrs	r4, r4, #12
 800144e:	e56e      	b.n	8000f2e <__aeabi_ddiv+0xae>
 8001450:	9a00      	ldr	r2, [sp, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d3ea      	bcc.n	800142c <__aeabi_ddiv+0x5ac>
 8001456:	0005      	movs	r5, r0
 8001458:	e7d3      	b.n	8001402 <__aeabi_ddiv+0x582>
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	000007ff 	.word	0x000007ff
 8001460:	0000043e 	.word	0x0000043e
 8001464:	0000041e 	.word	0x0000041e
 8001468:	000003ff 	.word	0x000003ff

0800146c <__eqdf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	464e      	mov	r6, r9
 8001470:	4645      	mov	r5, r8
 8001472:	46de      	mov	lr, fp
 8001474:	4657      	mov	r7, sl
 8001476:	4690      	mov	r8, r2
 8001478:	b5e0      	push	{r5, r6, r7, lr}
 800147a:	0017      	movs	r7, r2
 800147c:	031a      	lsls	r2, r3, #12
 800147e:	0b12      	lsrs	r2, r2, #12
 8001480:	0005      	movs	r5, r0
 8001482:	4684      	mov	ip, r0
 8001484:	4819      	ldr	r0, [pc, #100]	; (80014ec <__eqdf2+0x80>)
 8001486:	030e      	lsls	r6, r1, #12
 8001488:	004c      	lsls	r4, r1, #1
 800148a:	4691      	mov	r9, r2
 800148c:	005a      	lsls	r2, r3, #1
 800148e:	0fdb      	lsrs	r3, r3, #31
 8001490:	469b      	mov	fp, r3
 8001492:	0b36      	lsrs	r6, r6, #12
 8001494:	0d64      	lsrs	r4, r4, #21
 8001496:	0fc9      	lsrs	r1, r1, #31
 8001498:	0d52      	lsrs	r2, r2, #21
 800149a:	4284      	cmp	r4, r0
 800149c:	d019      	beq.n	80014d2 <__eqdf2+0x66>
 800149e:	4282      	cmp	r2, r0
 80014a0:	d010      	beq.n	80014c4 <__eqdf2+0x58>
 80014a2:	2001      	movs	r0, #1
 80014a4:	4294      	cmp	r4, r2
 80014a6:	d10e      	bne.n	80014c6 <__eqdf2+0x5a>
 80014a8:	454e      	cmp	r6, r9
 80014aa:	d10c      	bne.n	80014c6 <__eqdf2+0x5a>
 80014ac:	2001      	movs	r0, #1
 80014ae:	45c4      	cmp	ip, r8
 80014b0:	d109      	bne.n	80014c6 <__eqdf2+0x5a>
 80014b2:	4559      	cmp	r1, fp
 80014b4:	d017      	beq.n	80014e6 <__eqdf2+0x7a>
 80014b6:	2c00      	cmp	r4, #0
 80014b8:	d105      	bne.n	80014c6 <__eqdf2+0x5a>
 80014ba:	0030      	movs	r0, r6
 80014bc:	4328      	orrs	r0, r5
 80014be:	1e43      	subs	r3, r0, #1
 80014c0:	4198      	sbcs	r0, r3
 80014c2:	e000      	b.n	80014c6 <__eqdf2+0x5a>
 80014c4:	2001      	movs	r0, #1
 80014c6:	bcf0      	pop	{r4, r5, r6, r7}
 80014c8:	46bb      	mov	fp, r7
 80014ca:	46b2      	mov	sl, r6
 80014cc:	46a9      	mov	r9, r5
 80014ce:	46a0      	mov	r8, r4
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	0033      	movs	r3, r6
 80014d4:	2001      	movs	r0, #1
 80014d6:	432b      	orrs	r3, r5
 80014d8:	d1f5      	bne.n	80014c6 <__eqdf2+0x5a>
 80014da:	42a2      	cmp	r2, r4
 80014dc:	d1f3      	bne.n	80014c6 <__eqdf2+0x5a>
 80014de:	464b      	mov	r3, r9
 80014e0:	433b      	orrs	r3, r7
 80014e2:	d1f0      	bne.n	80014c6 <__eqdf2+0x5a>
 80014e4:	e7e2      	b.n	80014ac <__eqdf2+0x40>
 80014e6:	2000      	movs	r0, #0
 80014e8:	e7ed      	b.n	80014c6 <__eqdf2+0x5a>
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	000007ff 	.word	0x000007ff

080014f0 <__gedf2>:
 80014f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f2:	4647      	mov	r7, r8
 80014f4:	46ce      	mov	lr, r9
 80014f6:	0004      	movs	r4, r0
 80014f8:	0018      	movs	r0, r3
 80014fa:	0016      	movs	r6, r2
 80014fc:	031b      	lsls	r3, r3, #12
 80014fe:	0b1b      	lsrs	r3, r3, #12
 8001500:	4d2d      	ldr	r5, [pc, #180]	; (80015b8 <__gedf2+0xc8>)
 8001502:	004a      	lsls	r2, r1, #1
 8001504:	4699      	mov	r9, r3
 8001506:	b580      	push	{r7, lr}
 8001508:	0043      	lsls	r3, r0, #1
 800150a:	030f      	lsls	r7, r1, #12
 800150c:	46a4      	mov	ip, r4
 800150e:	46b0      	mov	r8, r6
 8001510:	0b3f      	lsrs	r7, r7, #12
 8001512:	0d52      	lsrs	r2, r2, #21
 8001514:	0fc9      	lsrs	r1, r1, #31
 8001516:	0d5b      	lsrs	r3, r3, #21
 8001518:	0fc0      	lsrs	r0, r0, #31
 800151a:	42aa      	cmp	r2, r5
 800151c:	d021      	beq.n	8001562 <__gedf2+0x72>
 800151e:	42ab      	cmp	r3, r5
 8001520:	d013      	beq.n	800154a <__gedf2+0x5a>
 8001522:	2a00      	cmp	r2, #0
 8001524:	d122      	bne.n	800156c <__gedf2+0x7c>
 8001526:	433c      	orrs	r4, r7
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <__gedf2+0x42>
 800152c:	464d      	mov	r5, r9
 800152e:	432e      	orrs	r6, r5
 8001530:	d022      	beq.n	8001578 <__gedf2+0x88>
 8001532:	2c00      	cmp	r4, #0
 8001534:	d010      	beq.n	8001558 <__gedf2+0x68>
 8001536:	4281      	cmp	r1, r0
 8001538:	d022      	beq.n	8001580 <__gedf2+0x90>
 800153a:	2002      	movs	r0, #2
 800153c:	3901      	subs	r1, #1
 800153e:	4008      	ands	r0, r1
 8001540:	3801      	subs	r0, #1
 8001542:	bcc0      	pop	{r6, r7}
 8001544:	46b9      	mov	r9, r7
 8001546:	46b0      	mov	r8, r6
 8001548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800154a:	464d      	mov	r5, r9
 800154c:	432e      	orrs	r6, r5
 800154e:	d129      	bne.n	80015a4 <__gedf2+0xb4>
 8001550:	2a00      	cmp	r2, #0
 8001552:	d1f0      	bne.n	8001536 <__gedf2+0x46>
 8001554:	433c      	orrs	r4, r7
 8001556:	d1ee      	bne.n	8001536 <__gedf2+0x46>
 8001558:	2800      	cmp	r0, #0
 800155a:	d1f2      	bne.n	8001542 <__gedf2+0x52>
 800155c:	2001      	movs	r0, #1
 800155e:	4240      	negs	r0, r0
 8001560:	e7ef      	b.n	8001542 <__gedf2+0x52>
 8001562:	003d      	movs	r5, r7
 8001564:	4325      	orrs	r5, r4
 8001566:	d11d      	bne.n	80015a4 <__gedf2+0xb4>
 8001568:	4293      	cmp	r3, r2
 800156a:	d0ee      	beq.n	800154a <__gedf2+0x5a>
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e2      	bne.n	8001536 <__gedf2+0x46>
 8001570:	464c      	mov	r4, r9
 8001572:	4326      	orrs	r6, r4
 8001574:	d1df      	bne.n	8001536 <__gedf2+0x46>
 8001576:	e7e0      	b.n	800153a <__gedf2+0x4a>
 8001578:	2000      	movs	r0, #0
 800157a:	2c00      	cmp	r4, #0
 800157c:	d0e1      	beq.n	8001542 <__gedf2+0x52>
 800157e:	e7dc      	b.n	800153a <__gedf2+0x4a>
 8001580:	429a      	cmp	r2, r3
 8001582:	dc0a      	bgt.n	800159a <__gedf2+0xaa>
 8001584:	dbe8      	blt.n	8001558 <__gedf2+0x68>
 8001586:	454f      	cmp	r7, r9
 8001588:	d8d7      	bhi.n	800153a <__gedf2+0x4a>
 800158a:	d00e      	beq.n	80015aa <__gedf2+0xba>
 800158c:	2000      	movs	r0, #0
 800158e:	454f      	cmp	r7, r9
 8001590:	d2d7      	bcs.n	8001542 <__gedf2+0x52>
 8001592:	2900      	cmp	r1, #0
 8001594:	d0e2      	beq.n	800155c <__gedf2+0x6c>
 8001596:	0008      	movs	r0, r1
 8001598:	e7d3      	b.n	8001542 <__gedf2+0x52>
 800159a:	4243      	negs	r3, r0
 800159c:	4158      	adcs	r0, r3
 800159e:	0040      	lsls	r0, r0, #1
 80015a0:	3801      	subs	r0, #1
 80015a2:	e7ce      	b.n	8001542 <__gedf2+0x52>
 80015a4:	2002      	movs	r0, #2
 80015a6:	4240      	negs	r0, r0
 80015a8:	e7cb      	b.n	8001542 <__gedf2+0x52>
 80015aa:	45c4      	cmp	ip, r8
 80015ac:	d8c5      	bhi.n	800153a <__gedf2+0x4a>
 80015ae:	2000      	movs	r0, #0
 80015b0:	45c4      	cmp	ip, r8
 80015b2:	d2c6      	bcs.n	8001542 <__gedf2+0x52>
 80015b4:	e7ed      	b.n	8001592 <__gedf2+0xa2>
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	000007ff 	.word	0x000007ff

080015bc <__ledf2>:
 80015bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015be:	4647      	mov	r7, r8
 80015c0:	46ce      	mov	lr, r9
 80015c2:	0004      	movs	r4, r0
 80015c4:	0018      	movs	r0, r3
 80015c6:	0016      	movs	r6, r2
 80015c8:	031b      	lsls	r3, r3, #12
 80015ca:	0b1b      	lsrs	r3, r3, #12
 80015cc:	4d2c      	ldr	r5, [pc, #176]	; (8001680 <__ledf2+0xc4>)
 80015ce:	004a      	lsls	r2, r1, #1
 80015d0:	4699      	mov	r9, r3
 80015d2:	b580      	push	{r7, lr}
 80015d4:	0043      	lsls	r3, r0, #1
 80015d6:	030f      	lsls	r7, r1, #12
 80015d8:	46a4      	mov	ip, r4
 80015da:	46b0      	mov	r8, r6
 80015dc:	0b3f      	lsrs	r7, r7, #12
 80015de:	0d52      	lsrs	r2, r2, #21
 80015e0:	0fc9      	lsrs	r1, r1, #31
 80015e2:	0d5b      	lsrs	r3, r3, #21
 80015e4:	0fc0      	lsrs	r0, r0, #31
 80015e6:	42aa      	cmp	r2, r5
 80015e8:	d00d      	beq.n	8001606 <__ledf2+0x4a>
 80015ea:	42ab      	cmp	r3, r5
 80015ec:	d010      	beq.n	8001610 <__ledf2+0x54>
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	d127      	bne.n	8001642 <__ledf2+0x86>
 80015f2:	433c      	orrs	r4, r7
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d111      	bne.n	800161c <__ledf2+0x60>
 80015f8:	464d      	mov	r5, r9
 80015fa:	432e      	orrs	r6, r5
 80015fc:	d10e      	bne.n	800161c <__ledf2+0x60>
 80015fe:	2000      	movs	r0, #0
 8001600:	2c00      	cmp	r4, #0
 8001602:	d015      	beq.n	8001630 <__ledf2+0x74>
 8001604:	e00e      	b.n	8001624 <__ledf2+0x68>
 8001606:	003d      	movs	r5, r7
 8001608:	4325      	orrs	r5, r4
 800160a:	d110      	bne.n	800162e <__ledf2+0x72>
 800160c:	4293      	cmp	r3, r2
 800160e:	d118      	bne.n	8001642 <__ledf2+0x86>
 8001610:	464d      	mov	r5, r9
 8001612:	432e      	orrs	r6, r5
 8001614:	d10b      	bne.n	800162e <__ledf2+0x72>
 8001616:	2a00      	cmp	r2, #0
 8001618:	d102      	bne.n	8001620 <__ledf2+0x64>
 800161a:	433c      	orrs	r4, r7
 800161c:	2c00      	cmp	r4, #0
 800161e:	d00b      	beq.n	8001638 <__ledf2+0x7c>
 8001620:	4281      	cmp	r1, r0
 8001622:	d014      	beq.n	800164e <__ledf2+0x92>
 8001624:	2002      	movs	r0, #2
 8001626:	3901      	subs	r1, #1
 8001628:	4008      	ands	r0, r1
 800162a:	3801      	subs	r0, #1
 800162c:	e000      	b.n	8001630 <__ledf2+0x74>
 800162e:	2002      	movs	r0, #2
 8001630:	bcc0      	pop	{r6, r7}
 8001632:	46b9      	mov	r9, r7
 8001634:	46b0      	mov	r8, r6
 8001636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001638:	2800      	cmp	r0, #0
 800163a:	d1f9      	bne.n	8001630 <__ledf2+0x74>
 800163c:	2001      	movs	r0, #1
 800163e:	4240      	negs	r0, r0
 8001640:	e7f6      	b.n	8001630 <__ledf2+0x74>
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ec      	bne.n	8001620 <__ledf2+0x64>
 8001646:	464c      	mov	r4, r9
 8001648:	4326      	orrs	r6, r4
 800164a:	d1e9      	bne.n	8001620 <__ledf2+0x64>
 800164c:	e7ea      	b.n	8001624 <__ledf2+0x68>
 800164e:	429a      	cmp	r2, r3
 8001650:	dd04      	ble.n	800165c <__ledf2+0xa0>
 8001652:	4243      	negs	r3, r0
 8001654:	4158      	adcs	r0, r3
 8001656:	0040      	lsls	r0, r0, #1
 8001658:	3801      	subs	r0, #1
 800165a:	e7e9      	b.n	8001630 <__ledf2+0x74>
 800165c:	429a      	cmp	r2, r3
 800165e:	dbeb      	blt.n	8001638 <__ledf2+0x7c>
 8001660:	454f      	cmp	r7, r9
 8001662:	d8df      	bhi.n	8001624 <__ledf2+0x68>
 8001664:	d006      	beq.n	8001674 <__ledf2+0xb8>
 8001666:	2000      	movs	r0, #0
 8001668:	454f      	cmp	r7, r9
 800166a:	d2e1      	bcs.n	8001630 <__ledf2+0x74>
 800166c:	2900      	cmp	r1, #0
 800166e:	d0e5      	beq.n	800163c <__ledf2+0x80>
 8001670:	0008      	movs	r0, r1
 8001672:	e7dd      	b.n	8001630 <__ledf2+0x74>
 8001674:	45c4      	cmp	ip, r8
 8001676:	d8d5      	bhi.n	8001624 <__ledf2+0x68>
 8001678:	2000      	movs	r0, #0
 800167a:	45c4      	cmp	ip, r8
 800167c:	d2d8      	bcs.n	8001630 <__ledf2+0x74>
 800167e:	e7f5      	b.n	800166c <__ledf2+0xb0>
 8001680:	000007ff 	.word	0x000007ff

08001684 <__aeabi_dmul>:
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	4657      	mov	r7, sl
 8001688:	464e      	mov	r6, r9
 800168a:	4645      	mov	r5, r8
 800168c:	46de      	mov	lr, fp
 800168e:	b5e0      	push	{r5, r6, r7, lr}
 8001690:	4698      	mov	r8, r3
 8001692:	030c      	lsls	r4, r1, #12
 8001694:	004b      	lsls	r3, r1, #1
 8001696:	0006      	movs	r6, r0
 8001698:	4692      	mov	sl, r2
 800169a:	b087      	sub	sp, #28
 800169c:	0b24      	lsrs	r4, r4, #12
 800169e:	0d5b      	lsrs	r3, r3, #21
 80016a0:	0fcf      	lsrs	r7, r1, #31
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d100      	bne.n	80016a8 <__aeabi_dmul+0x24>
 80016a6:	e15c      	b.n	8001962 <__aeabi_dmul+0x2de>
 80016a8:	4ad9      	ldr	r2, [pc, #868]	; (8001a10 <__aeabi_dmul+0x38c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d100      	bne.n	80016b0 <__aeabi_dmul+0x2c>
 80016ae:	e175      	b.n	800199c <__aeabi_dmul+0x318>
 80016b0:	0f42      	lsrs	r2, r0, #29
 80016b2:	00e4      	lsls	r4, r4, #3
 80016b4:	4314      	orrs	r4, r2
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	0412      	lsls	r2, r2, #16
 80016ba:	4314      	orrs	r4, r2
 80016bc:	4ad5      	ldr	r2, [pc, #852]	; (8001a14 <__aeabi_dmul+0x390>)
 80016be:	00c5      	lsls	r5, r0, #3
 80016c0:	4694      	mov	ip, r2
 80016c2:	4463      	add	r3, ip
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	4699      	mov	r9, r3
 80016ca:	469b      	mov	fp, r3
 80016cc:	4643      	mov	r3, r8
 80016ce:	4642      	mov	r2, r8
 80016d0:	031e      	lsls	r6, r3, #12
 80016d2:	0fd2      	lsrs	r2, r2, #31
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4650      	mov	r0, sl
 80016d8:	4690      	mov	r8, r2
 80016da:	0b36      	lsrs	r6, r6, #12
 80016dc:	0d5b      	lsrs	r3, r3, #21
 80016de:	d100      	bne.n	80016e2 <__aeabi_dmul+0x5e>
 80016e0:	e120      	b.n	8001924 <__aeabi_dmul+0x2a0>
 80016e2:	4acb      	ldr	r2, [pc, #812]	; (8001a10 <__aeabi_dmul+0x38c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d100      	bne.n	80016ea <__aeabi_dmul+0x66>
 80016e8:	e162      	b.n	80019b0 <__aeabi_dmul+0x32c>
 80016ea:	49ca      	ldr	r1, [pc, #808]	; (8001a14 <__aeabi_dmul+0x390>)
 80016ec:	0f42      	lsrs	r2, r0, #29
 80016ee:	468c      	mov	ip, r1
 80016f0:	9900      	ldr	r1, [sp, #0]
 80016f2:	4463      	add	r3, ip
 80016f4:	00f6      	lsls	r6, r6, #3
 80016f6:	468c      	mov	ip, r1
 80016f8:	4316      	orrs	r6, r2
 80016fa:	2280      	movs	r2, #128	; 0x80
 80016fc:	449c      	add	ip, r3
 80016fe:	0412      	lsls	r2, r2, #16
 8001700:	4663      	mov	r3, ip
 8001702:	4316      	orrs	r6, r2
 8001704:	00c2      	lsls	r2, r0, #3
 8001706:	2000      	movs	r0, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	9900      	ldr	r1, [sp, #0]
 800170c:	4643      	mov	r3, r8
 800170e:	3101      	adds	r1, #1
 8001710:	468c      	mov	ip, r1
 8001712:	4649      	mov	r1, r9
 8001714:	407b      	eors	r3, r7
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	290f      	cmp	r1, #15
 800171a:	d826      	bhi.n	800176a <__aeabi_dmul+0xe6>
 800171c:	4bbe      	ldr	r3, [pc, #760]	; (8001a18 <__aeabi_dmul+0x394>)
 800171e:	0089      	lsls	r1, r1, #2
 8001720:	5859      	ldr	r1, [r3, r1]
 8001722:	468f      	mov	pc, r1
 8001724:	4643      	mov	r3, r8
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	0034      	movs	r4, r6
 800172a:	0015      	movs	r5, r2
 800172c:	4683      	mov	fp, r0
 800172e:	465b      	mov	r3, fp
 8001730:	2b02      	cmp	r3, #2
 8001732:	d016      	beq.n	8001762 <__aeabi_dmul+0xde>
 8001734:	2b03      	cmp	r3, #3
 8001736:	d100      	bne.n	800173a <__aeabi_dmul+0xb6>
 8001738:	e203      	b.n	8001b42 <__aeabi_dmul+0x4be>
 800173a:	2b01      	cmp	r3, #1
 800173c:	d000      	beq.n	8001740 <__aeabi_dmul+0xbc>
 800173e:	e0cd      	b.n	80018dc <__aeabi_dmul+0x258>
 8001740:	2200      	movs	r2, #0
 8001742:	2400      	movs	r4, #0
 8001744:	2500      	movs	r5, #0
 8001746:	9b01      	ldr	r3, [sp, #4]
 8001748:	0512      	lsls	r2, r2, #20
 800174a:	4322      	orrs	r2, r4
 800174c:	07db      	lsls	r3, r3, #31
 800174e:	431a      	orrs	r2, r3
 8001750:	0028      	movs	r0, r5
 8001752:	0011      	movs	r1, r2
 8001754:	b007      	add	sp, #28
 8001756:	bcf0      	pop	{r4, r5, r6, r7}
 8001758:	46bb      	mov	fp, r7
 800175a:	46b2      	mov	sl, r6
 800175c:	46a9      	mov	r9, r5
 800175e:	46a0      	mov	r8, r4
 8001760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001762:	2400      	movs	r4, #0
 8001764:	2500      	movs	r5, #0
 8001766:	4aaa      	ldr	r2, [pc, #680]	; (8001a10 <__aeabi_dmul+0x38c>)
 8001768:	e7ed      	b.n	8001746 <__aeabi_dmul+0xc2>
 800176a:	0c28      	lsrs	r0, r5, #16
 800176c:	042d      	lsls	r5, r5, #16
 800176e:	0c2d      	lsrs	r5, r5, #16
 8001770:	002b      	movs	r3, r5
 8001772:	0c11      	lsrs	r1, r2, #16
 8001774:	0412      	lsls	r2, r2, #16
 8001776:	0c12      	lsrs	r2, r2, #16
 8001778:	4353      	muls	r3, r2
 800177a:	4698      	mov	r8, r3
 800177c:	0013      	movs	r3, r2
 800177e:	002f      	movs	r7, r5
 8001780:	4343      	muls	r3, r0
 8001782:	4699      	mov	r9, r3
 8001784:	434f      	muls	r7, r1
 8001786:	444f      	add	r7, r9
 8001788:	46bb      	mov	fp, r7
 800178a:	4647      	mov	r7, r8
 800178c:	000b      	movs	r3, r1
 800178e:	0c3f      	lsrs	r7, r7, #16
 8001790:	46ba      	mov	sl, r7
 8001792:	4343      	muls	r3, r0
 8001794:	44da      	add	sl, fp
 8001796:	9302      	str	r3, [sp, #8]
 8001798:	45d1      	cmp	r9, sl
 800179a:	d904      	bls.n	80017a6 <__aeabi_dmul+0x122>
 800179c:	2780      	movs	r7, #128	; 0x80
 800179e:	027f      	lsls	r7, r7, #9
 80017a0:	46b9      	mov	r9, r7
 80017a2:	444b      	add	r3, r9
 80017a4:	9302      	str	r3, [sp, #8]
 80017a6:	4653      	mov	r3, sl
 80017a8:	0c1b      	lsrs	r3, r3, #16
 80017aa:	469b      	mov	fp, r3
 80017ac:	4653      	mov	r3, sl
 80017ae:	041f      	lsls	r7, r3, #16
 80017b0:	4643      	mov	r3, r8
 80017b2:	041b      	lsls	r3, r3, #16
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	4698      	mov	r8, r3
 80017b8:	003b      	movs	r3, r7
 80017ba:	4443      	add	r3, r8
 80017bc:	9304      	str	r3, [sp, #16]
 80017be:	0c33      	lsrs	r3, r6, #16
 80017c0:	0436      	lsls	r6, r6, #16
 80017c2:	0c36      	lsrs	r6, r6, #16
 80017c4:	4698      	mov	r8, r3
 80017c6:	0033      	movs	r3, r6
 80017c8:	4343      	muls	r3, r0
 80017ca:	4699      	mov	r9, r3
 80017cc:	4643      	mov	r3, r8
 80017ce:	4343      	muls	r3, r0
 80017d0:	002f      	movs	r7, r5
 80017d2:	469a      	mov	sl, r3
 80017d4:	4643      	mov	r3, r8
 80017d6:	4377      	muls	r7, r6
 80017d8:	435d      	muls	r5, r3
 80017da:	0c38      	lsrs	r0, r7, #16
 80017dc:	444d      	add	r5, r9
 80017de:	1945      	adds	r5, r0, r5
 80017e0:	45a9      	cmp	r9, r5
 80017e2:	d903      	bls.n	80017ec <__aeabi_dmul+0x168>
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	025b      	lsls	r3, r3, #9
 80017e8:	4699      	mov	r9, r3
 80017ea:	44ca      	add	sl, r9
 80017ec:	043f      	lsls	r7, r7, #16
 80017ee:	0c28      	lsrs	r0, r5, #16
 80017f0:	0c3f      	lsrs	r7, r7, #16
 80017f2:	042d      	lsls	r5, r5, #16
 80017f4:	19ed      	adds	r5, r5, r7
 80017f6:	0c27      	lsrs	r7, r4, #16
 80017f8:	0424      	lsls	r4, r4, #16
 80017fa:	0c24      	lsrs	r4, r4, #16
 80017fc:	0003      	movs	r3, r0
 80017fe:	0020      	movs	r0, r4
 8001800:	4350      	muls	r0, r2
 8001802:	437a      	muls	r2, r7
 8001804:	4691      	mov	r9, r2
 8001806:	003a      	movs	r2, r7
 8001808:	4453      	add	r3, sl
 800180a:	9305      	str	r3, [sp, #20]
 800180c:	0c03      	lsrs	r3, r0, #16
 800180e:	469a      	mov	sl, r3
 8001810:	434a      	muls	r2, r1
 8001812:	4361      	muls	r1, r4
 8001814:	4449      	add	r1, r9
 8001816:	4451      	add	r1, sl
 8001818:	44ab      	add	fp, r5
 800181a:	4589      	cmp	r9, r1
 800181c:	d903      	bls.n	8001826 <__aeabi_dmul+0x1a2>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	025b      	lsls	r3, r3, #9
 8001822:	4699      	mov	r9, r3
 8001824:	444a      	add	r2, r9
 8001826:	0400      	lsls	r0, r0, #16
 8001828:	0c0b      	lsrs	r3, r1, #16
 800182a:	0c00      	lsrs	r0, r0, #16
 800182c:	0409      	lsls	r1, r1, #16
 800182e:	1809      	adds	r1, r1, r0
 8001830:	0020      	movs	r0, r4
 8001832:	4699      	mov	r9, r3
 8001834:	4643      	mov	r3, r8
 8001836:	4370      	muls	r0, r6
 8001838:	435c      	muls	r4, r3
 800183a:	437e      	muls	r6, r7
 800183c:	435f      	muls	r7, r3
 800183e:	0c03      	lsrs	r3, r0, #16
 8001840:	4698      	mov	r8, r3
 8001842:	19a4      	adds	r4, r4, r6
 8001844:	4444      	add	r4, r8
 8001846:	444a      	add	r2, r9
 8001848:	9703      	str	r7, [sp, #12]
 800184a:	42a6      	cmp	r6, r4
 800184c:	d904      	bls.n	8001858 <__aeabi_dmul+0x1d4>
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	4698      	mov	r8, r3
 8001854:	4447      	add	r7, r8
 8001856:	9703      	str	r7, [sp, #12]
 8001858:	0423      	lsls	r3, r4, #16
 800185a:	9e02      	ldr	r6, [sp, #8]
 800185c:	469a      	mov	sl, r3
 800185e:	9b05      	ldr	r3, [sp, #20]
 8001860:	445e      	add	r6, fp
 8001862:	4698      	mov	r8, r3
 8001864:	42ae      	cmp	r6, r5
 8001866:	41ad      	sbcs	r5, r5
 8001868:	1876      	adds	r6, r6, r1
 800186a:	428e      	cmp	r6, r1
 800186c:	4189      	sbcs	r1, r1
 800186e:	0400      	lsls	r0, r0, #16
 8001870:	0c00      	lsrs	r0, r0, #16
 8001872:	4450      	add	r0, sl
 8001874:	4440      	add	r0, r8
 8001876:	426d      	negs	r5, r5
 8001878:	1947      	adds	r7, r0, r5
 800187a:	46b8      	mov	r8, r7
 800187c:	4693      	mov	fp, r2
 800187e:	4249      	negs	r1, r1
 8001880:	4689      	mov	r9, r1
 8001882:	44c3      	add	fp, r8
 8001884:	44d9      	add	r9, fp
 8001886:	4298      	cmp	r0, r3
 8001888:	4180      	sbcs	r0, r0
 800188a:	45a8      	cmp	r8, r5
 800188c:	41ad      	sbcs	r5, r5
 800188e:	4593      	cmp	fp, r2
 8001890:	4192      	sbcs	r2, r2
 8001892:	4589      	cmp	r9, r1
 8001894:	4189      	sbcs	r1, r1
 8001896:	426d      	negs	r5, r5
 8001898:	4240      	negs	r0, r0
 800189a:	4328      	orrs	r0, r5
 800189c:	0c24      	lsrs	r4, r4, #16
 800189e:	4252      	negs	r2, r2
 80018a0:	4249      	negs	r1, r1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	9b03      	ldr	r3, [sp, #12]
 80018a6:	1900      	adds	r0, r0, r4
 80018a8:	1880      	adds	r0, r0, r2
 80018aa:	18c7      	adds	r7, r0, r3
 80018ac:	464b      	mov	r3, r9
 80018ae:	0ddc      	lsrs	r4, r3, #23
 80018b0:	9b04      	ldr	r3, [sp, #16]
 80018b2:	0275      	lsls	r5, r6, #9
 80018b4:	431d      	orrs	r5, r3
 80018b6:	1e6a      	subs	r2, r5, #1
 80018b8:	4195      	sbcs	r5, r2
 80018ba:	464b      	mov	r3, r9
 80018bc:	0df6      	lsrs	r6, r6, #23
 80018be:	027f      	lsls	r7, r7, #9
 80018c0:	4335      	orrs	r5, r6
 80018c2:	025a      	lsls	r2, r3, #9
 80018c4:	433c      	orrs	r4, r7
 80018c6:	4315      	orrs	r5, r2
 80018c8:	01fb      	lsls	r3, r7, #7
 80018ca:	d400      	bmi.n	80018ce <__aeabi_dmul+0x24a>
 80018cc:	e11c      	b.n	8001b08 <__aeabi_dmul+0x484>
 80018ce:	2101      	movs	r1, #1
 80018d0:	086a      	lsrs	r2, r5, #1
 80018d2:	400d      	ands	r5, r1
 80018d4:	4315      	orrs	r5, r2
 80018d6:	07e2      	lsls	r2, r4, #31
 80018d8:	4315      	orrs	r5, r2
 80018da:	0864      	lsrs	r4, r4, #1
 80018dc:	494f      	ldr	r1, [pc, #316]	; (8001a1c <__aeabi_dmul+0x398>)
 80018de:	4461      	add	r1, ip
 80018e0:	2900      	cmp	r1, #0
 80018e2:	dc00      	bgt.n	80018e6 <__aeabi_dmul+0x262>
 80018e4:	e0b0      	b.n	8001a48 <__aeabi_dmul+0x3c4>
 80018e6:	076b      	lsls	r3, r5, #29
 80018e8:	d009      	beq.n	80018fe <__aeabi_dmul+0x27a>
 80018ea:	220f      	movs	r2, #15
 80018ec:	402a      	ands	r2, r5
 80018ee:	2a04      	cmp	r2, #4
 80018f0:	d005      	beq.n	80018fe <__aeabi_dmul+0x27a>
 80018f2:	1d2a      	adds	r2, r5, #4
 80018f4:	42aa      	cmp	r2, r5
 80018f6:	41ad      	sbcs	r5, r5
 80018f8:	426d      	negs	r5, r5
 80018fa:	1964      	adds	r4, r4, r5
 80018fc:	0015      	movs	r5, r2
 80018fe:	01e3      	lsls	r3, r4, #7
 8001900:	d504      	bpl.n	800190c <__aeabi_dmul+0x288>
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	4a46      	ldr	r2, [pc, #280]	; (8001a20 <__aeabi_dmul+0x39c>)
 8001906:	00c9      	lsls	r1, r1, #3
 8001908:	4014      	ands	r4, r2
 800190a:	4461      	add	r1, ip
 800190c:	4a45      	ldr	r2, [pc, #276]	; (8001a24 <__aeabi_dmul+0x3a0>)
 800190e:	4291      	cmp	r1, r2
 8001910:	dd00      	ble.n	8001914 <__aeabi_dmul+0x290>
 8001912:	e726      	b.n	8001762 <__aeabi_dmul+0xde>
 8001914:	0762      	lsls	r2, r4, #29
 8001916:	08ed      	lsrs	r5, r5, #3
 8001918:	0264      	lsls	r4, r4, #9
 800191a:	0549      	lsls	r1, r1, #21
 800191c:	4315      	orrs	r5, r2
 800191e:	0b24      	lsrs	r4, r4, #12
 8001920:	0d4a      	lsrs	r2, r1, #21
 8001922:	e710      	b.n	8001746 <__aeabi_dmul+0xc2>
 8001924:	4652      	mov	r2, sl
 8001926:	4332      	orrs	r2, r6
 8001928:	d100      	bne.n	800192c <__aeabi_dmul+0x2a8>
 800192a:	e07f      	b.n	8001a2c <__aeabi_dmul+0x3a8>
 800192c:	2e00      	cmp	r6, #0
 800192e:	d100      	bne.n	8001932 <__aeabi_dmul+0x2ae>
 8001930:	e0dc      	b.n	8001aec <__aeabi_dmul+0x468>
 8001932:	0030      	movs	r0, r6
 8001934:	f000 fdc2 	bl	80024bc <__clzsi2>
 8001938:	0002      	movs	r2, r0
 800193a:	3a0b      	subs	r2, #11
 800193c:	231d      	movs	r3, #29
 800193e:	0001      	movs	r1, r0
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	4652      	mov	r2, sl
 8001944:	3908      	subs	r1, #8
 8001946:	40da      	lsrs	r2, r3
 8001948:	408e      	lsls	r6, r1
 800194a:	4316      	orrs	r6, r2
 800194c:	4652      	mov	r2, sl
 800194e:	408a      	lsls	r2, r1
 8001950:	9b00      	ldr	r3, [sp, #0]
 8001952:	4935      	ldr	r1, [pc, #212]	; (8001a28 <__aeabi_dmul+0x3a4>)
 8001954:	1a18      	subs	r0, r3, r0
 8001956:	0003      	movs	r3, r0
 8001958:	468c      	mov	ip, r1
 800195a:	4463      	add	r3, ip
 800195c:	2000      	movs	r0, #0
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	e6d3      	b.n	800170a <__aeabi_dmul+0x86>
 8001962:	0025      	movs	r5, r4
 8001964:	4305      	orrs	r5, r0
 8001966:	d04a      	beq.n	80019fe <__aeabi_dmul+0x37a>
 8001968:	2c00      	cmp	r4, #0
 800196a:	d100      	bne.n	800196e <__aeabi_dmul+0x2ea>
 800196c:	e0b0      	b.n	8001ad0 <__aeabi_dmul+0x44c>
 800196e:	0020      	movs	r0, r4
 8001970:	f000 fda4 	bl	80024bc <__clzsi2>
 8001974:	0001      	movs	r1, r0
 8001976:	0002      	movs	r2, r0
 8001978:	390b      	subs	r1, #11
 800197a:	231d      	movs	r3, #29
 800197c:	0010      	movs	r0, r2
 800197e:	1a5b      	subs	r3, r3, r1
 8001980:	0031      	movs	r1, r6
 8001982:	0035      	movs	r5, r6
 8001984:	3808      	subs	r0, #8
 8001986:	4084      	lsls	r4, r0
 8001988:	40d9      	lsrs	r1, r3
 800198a:	4085      	lsls	r5, r0
 800198c:	430c      	orrs	r4, r1
 800198e:	4826      	ldr	r0, [pc, #152]	; (8001a28 <__aeabi_dmul+0x3a4>)
 8001990:	1a83      	subs	r3, r0, r2
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	4699      	mov	r9, r3
 8001998:	469b      	mov	fp, r3
 800199a:	e697      	b.n	80016cc <__aeabi_dmul+0x48>
 800199c:	0005      	movs	r5, r0
 800199e:	4325      	orrs	r5, r4
 80019a0:	d126      	bne.n	80019f0 <__aeabi_dmul+0x36c>
 80019a2:	2208      	movs	r2, #8
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2302      	movs	r3, #2
 80019a8:	2400      	movs	r4, #0
 80019aa:	4691      	mov	r9, r2
 80019ac:	469b      	mov	fp, r3
 80019ae:	e68d      	b.n	80016cc <__aeabi_dmul+0x48>
 80019b0:	4652      	mov	r2, sl
 80019b2:	9b00      	ldr	r3, [sp, #0]
 80019b4:	4332      	orrs	r2, r6
 80019b6:	d110      	bne.n	80019da <__aeabi_dmul+0x356>
 80019b8:	4915      	ldr	r1, [pc, #84]	; (8001a10 <__aeabi_dmul+0x38c>)
 80019ba:	2600      	movs	r6, #0
 80019bc:	468c      	mov	ip, r1
 80019be:	4463      	add	r3, ip
 80019c0:	4649      	mov	r1, r9
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	2302      	movs	r3, #2
 80019c6:	4319      	orrs	r1, r3
 80019c8:	4689      	mov	r9, r1
 80019ca:	2002      	movs	r0, #2
 80019cc:	e69d      	b.n	800170a <__aeabi_dmul+0x86>
 80019ce:	465b      	mov	r3, fp
 80019d0:	9701      	str	r7, [sp, #4]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d000      	beq.n	80019d8 <__aeabi_dmul+0x354>
 80019d6:	e6ad      	b.n	8001734 <__aeabi_dmul+0xb0>
 80019d8:	e6c3      	b.n	8001762 <__aeabi_dmul+0xde>
 80019da:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <__aeabi_dmul+0x38c>)
 80019dc:	2003      	movs	r0, #3
 80019de:	4694      	mov	ip, r2
 80019e0:	4463      	add	r3, ip
 80019e2:	464a      	mov	r2, r9
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2303      	movs	r3, #3
 80019e8:	431a      	orrs	r2, r3
 80019ea:	4691      	mov	r9, r2
 80019ec:	4652      	mov	r2, sl
 80019ee:	e68c      	b.n	800170a <__aeabi_dmul+0x86>
 80019f0:	220c      	movs	r2, #12
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2303      	movs	r3, #3
 80019f6:	0005      	movs	r5, r0
 80019f8:	4691      	mov	r9, r2
 80019fa:	469b      	mov	fp, r3
 80019fc:	e666      	b.n	80016cc <__aeabi_dmul+0x48>
 80019fe:	2304      	movs	r3, #4
 8001a00:	4699      	mov	r9, r3
 8001a02:	2300      	movs	r3, #0
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	2400      	movs	r4, #0
 8001a0a:	469b      	mov	fp, r3
 8001a0c:	e65e      	b.n	80016cc <__aeabi_dmul+0x48>
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	000007ff 	.word	0x000007ff
 8001a14:	fffffc01 	.word	0xfffffc01
 8001a18:	0800890c 	.word	0x0800890c
 8001a1c:	000003ff 	.word	0x000003ff
 8001a20:	feffffff 	.word	0xfeffffff
 8001a24:	000007fe 	.word	0x000007fe
 8001a28:	fffffc0d 	.word	0xfffffc0d
 8001a2c:	4649      	mov	r1, r9
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4319      	orrs	r1, r3
 8001a32:	4689      	mov	r9, r1
 8001a34:	2600      	movs	r6, #0
 8001a36:	2001      	movs	r0, #1
 8001a38:	e667      	b.n	800170a <__aeabi_dmul+0x86>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	2480      	movs	r4, #128	; 0x80
 8001a3e:	2500      	movs	r5, #0
 8001a40:	4a43      	ldr	r2, [pc, #268]	; (8001b50 <__aeabi_dmul+0x4cc>)
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	0324      	lsls	r4, r4, #12
 8001a46:	e67e      	b.n	8001746 <__aeabi_dmul+0xc2>
 8001a48:	2001      	movs	r0, #1
 8001a4a:	1a40      	subs	r0, r0, r1
 8001a4c:	2838      	cmp	r0, #56	; 0x38
 8001a4e:	dd00      	ble.n	8001a52 <__aeabi_dmul+0x3ce>
 8001a50:	e676      	b.n	8001740 <__aeabi_dmul+0xbc>
 8001a52:	281f      	cmp	r0, #31
 8001a54:	dd5b      	ble.n	8001b0e <__aeabi_dmul+0x48a>
 8001a56:	221f      	movs	r2, #31
 8001a58:	0023      	movs	r3, r4
 8001a5a:	4252      	negs	r2, r2
 8001a5c:	1a51      	subs	r1, r2, r1
 8001a5e:	40cb      	lsrs	r3, r1
 8001a60:	0019      	movs	r1, r3
 8001a62:	2820      	cmp	r0, #32
 8001a64:	d003      	beq.n	8001a6e <__aeabi_dmul+0x3ea>
 8001a66:	4a3b      	ldr	r2, [pc, #236]	; (8001b54 <__aeabi_dmul+0x4d0>)
 8001a68:	4462      	add	r2, ip
 8001a6a:	4094      	lsls	r4, r2
 8001a6c:	4325      	orrs	r5, r4
 8001a6e:	1e6a      	subs	r2, r5, #1
 8001a70:	4195      	sbcs	r5, r2
 8001a72:	002a      	movs	r2, r5
 8001a74:	430a      	orrs	r2, r1
 8001a76:	2107      	movs	r1, #7
 8001a78:	000d      	movs	r5, r1
 8001a7a:	2400      	movs	r4, #0
 8001a7c:	4015      	ands	r5, r2
 8001a7e:	4211      	tst	r1, r2
 8001a80:	d05b      	beq.n	8001b3a <__aeabi_dmul+0x4b6>
 8001a82:	210f      	movs	r1, #15
 8001a84:	2400      	movs	r4, #0
 8001a86:	4011      	ands	r1, r2
 8001a88:	2904      	cmp	r1, #4
 8001a8a:	d053      	beq.n	8001b34 <__aeabi_dmul+0x4b0>
 8001a8c:	1d11      	adds	r1, r2, #4
 8001a8e:	4291      	cmp	r1, r2
 8001a90:	4192      	sbcs	r2, r2
 8001a92:	4252      	negs	r2, r2
 8001a94:	18a4      	adds	r4, r4, r2
 8001a96:	000a      	movs	r2, r1
 8001a98:	0223      	lsls	r3, r4, #8
 8001a9a:	d54b      	bpl.n	8001b34 <__aeabi_dmul+0x4b0>
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	2500      	movs	r5, #0
 8001aa2:	e650      	b.n	8001746 <__aeabi_dmul+0xc2>
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	031b      	lsls	r3, r3, #12
 8001aa8:	421c      	tst	r4, r3
 8001aaa:	d009      	beq.n	8001ac0 <__aeabi_dmul+0x43c>
 8001aac:	421e      	tst	r6, r3
 8001aae:	d107      	bne.n	8001ac0 <__aeabi_dmul+0x43c>
 8001ab0:	4333      	orrs	r3, r6
 8001ab2:	031c      	lsls	r4, r3, #12
 8001ab4:	4643      	mov	r3, r8
 8001ab6:	0015      	movs	r5, r2
 8001ab8:	0b24      	lsrs	r4, r4, #12
 8001aba:	4a25      	ldr	r2, [pc, #148]	; (8001b50 <__aeabi_dmul+0x4cc>)
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	e642      	b.n	8001746 <__aeabi_dmul+0xc2>
 8001ac0:	2280      	movs	r2, #128	; 0x80
 8001ac2:	0312      	lsls	r2, r2, #12
 8001ac4:	4314      	orrs	r4, r2
 8001ac6:	0324      	lsls	r4, r4, #12
 8001ac8:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <__aeabi_dmul+0x4cc>)
 8001aca:	0b24      	lsrs	r4, r4, #12
 8001acc:	9701      	str	r7, [sp, #4]
 8001ace:	e63a      	b.n	8001746 <__aeabi_dmul+0xc2>
 8001ad0:	f000 fcf4 	bl	80024bc <__clzsi2>
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	3115      	adds	r1, #21
 8001ada:	3220      	adds	r2, #32
 8001adc:	291c      	cmp	r1, #28
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_dmul+0x45e>
 8001ae0:	e74b      	b.n	800197a <__aeabi_dmul+0x2f6>
 8001ae2:	0034      	movs	r4, r6
 8001ae4:	3808      	subs	r0, #8
 8001ae6:	2500      	movs	r5, #0
 8001ae8:	4084      	lsls	r4, r0
 8001aea:	e750      	b.n	800198e <__aeabi_dmul+0x30a>
 8001aec:	f000 fce6 	bl	80024bc <__clzsi2>
 8001af0:	0003      	movs	r3, r0
 8001af2:	001a      	movs	r2, r3
 8001af4:	3215      	adds	r2, #21
 8001af6:	3020      	adds	r0, #32
 8001af8:	2a1c      	cmp	r2, #28
 8001afa:	dc00      	bgt.n	8001afe <__aeabi_dmul+0x47a>
 8001afc:	e71e      	b.n	800193c <__aeabi_dmul+0x2b8>
 8001afe:	4656      	mov	r6, sl
 8001b00:	3b08      	subs	r3, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	409e      	lsls	r6, r3
 8001b06:	e723      	b.n	8001950 <__aeabi_dmul+0x2cc>
 8001b08:	9b00      	ldr	r3, [sp, #0]
 8001b0a:	469c      	mov	ip, r3
 8001b0c:	e6e6      	b.n	80018dc <__aeabi_dmul+0x258>
 8001b0e:	4912      	ldr	r1, [pc, #72]	; (8001b58 <__aeabi_dmul+0x4d4>)
 8001b10:	0022      	movs	r2, r4
 8001b12:	4461      	add	r1, ip
 8001b14:	002e      	movs	r6, r5
 8001b16:	408d      	lsls	r5, r1
 8001b18:	408a      	lsls	r2, r1
 8001b1a:	40c6      	lsrs	r6, r0
 8001b1c:	1e69      	subs	r1, r5, #1
 8001b1e:	418d      	sbcs	r5, r1
 8001b20:	4332      	orrs	r2, r6
 8001b22:	432a      	orrs	r2, r5
 8001b24:	40c4      	lsrs	r4, r0
 8001b26:	0753      	lsls	r3, r2, #29
 8001b28:	d0b6      	beq.n	8001a98 <__aeabi_dmul+0x414>
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	4011      	ands	r1, r2
 8001b2e:	2904      	cmp	r1, #4
 8001b30:	d1ac      	bne.n	8001a8c <__aeabi_dmul+0x408>
 8001b32:	e7b1      	b.n	8001a98 <__aeabi_dmul+0x414>
 8001b34:	0765      	lsls	r5, r4, #29
 8001b36:	0264      	lsls	r4, r4, #9
 8001b38:	0b24      	lsrs	r4, r4, #12
 8001b3a:	08d2      	lsrs	r2, r2, #3
 8001b3c:	4315      	orrs	r5, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	e601      	b.n	8001746 <__aeabi_dmul+0xc2>
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0312      	lsls	r2, r2, #12
 8001b46:	4314      	orrs	r4, r2
 8001b48:	0324      	lsls	r4, r4, #12
 8001b4a:	4a01      	ldr	r2, [pc, #4]	; (8001b50 <__aeabi_dmul+0x4cc>)
 8001b4c:	0b24      	lsrs	r4, r4, #12
 8001b4e:	e5fa      	b.n	8001746 <__aeabi_dmul+0xc2>
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	0000043e 	.word	0x0000043e
 8001b58:	0000041e 	.word	0x0000041e

08001b5c <__aeabi_dsub>:
 8001b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b5e:	4657      	mov	r7, sl
 8001b60:	464e      	mov	r6, r9
 8001b62:	4645      	mov	r5, r8
 8001b64:	46de      	mov	lr, fp
 8001b66:	b5e0      	push	{r5, r6, r7, lr}
 8001b68:	001e      	movs	r6, r3
 8001b6a:	0017      	movs	r7, r2
 8001b6c:	004a      	lsls	r2, r1, #1
 8001b6e:	030b      	lsls	r3, r1, #12
 8001b70:	0d52      	lsrs	r2, r2, #21
 8001b72:	0a5b      	lsrs	r3, r3, #9
 8001b74:	4690      	mov	r8, r2
 8001b76:	0f42      	lsrs	r2, r0, #29
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	0fcd      	lsrs	r5, r1, #31
 8001b7c:	4ccd      	ldr	r4, [pc, #820]	; (8001eb4 <__aeabi_dsub+0x358>)
 8001b7e:	0331      	lsls	r1, r6, #12
 8001b80:	00c3      	lsls	r3, r0, #3
 8001b82:	4694      	mov	ip, r2
 8001b84:	0070      	lsls	r0, r6, #1
 8001b86:	0f7a      	lsrs	r2, r7, #29
 8001b88:	0a49      	lsrs	r1, r1, #9
 8001b8a:	00ff      	lsls	r7, r7, #3
 8001b8c:	469a      	mov	sl, r3
 8001b8e:	46b9      	mov	r9, r7
 8001b90:	0d40      	lsrs	r0, r0, #21
 8001b92:	0ff6      	lsrs	r6, r6, #31
 8001b94:	4311      	orrs	r1, r2
 8001b96:	42a0      	cmp	r0, r4
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x40>
 8001b9a:	e0b1      	b.n	8001d00 <__aeabi_dsub+0x1a4>
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4056      	eors	r6, r2
 8001ba0:	46b3      	mov	fp, r6
 8001ba2:	42b5      	cmp	r5, r6
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_dsub+0x4c>
 8001ba6:	e088      	b.n	8001cba <__aeabi_dsub+0x15e>
 8001ba8:	4642      	mov	r2, r8
 8001baa:	1a12      	subs	r2, r2, r0
 8001bac:	2a00      	cmp	r2, #0
 8001bae:	dc00      	bgt.n	8001bb2 <__aeabi_dsub+0x56>
 8001bb0:	e0ae      	b.n	8001d10 <__aeabi_dsub+0x1b4>
 8001bb2:	2800      	cmp	r0, #0
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x5c>
 8001bb6:	e0c1      	b.n	8001d3c <__aeabi_dsub+0x1e0>
 8001bb8:	48be      	ldr	r0, [pc, #760]	; (8001eb4 <__aeabi_dsub+0x358>)
 8001bba:	4580      	cmp	r8, r0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x64>
 8001bbe:	e151      	b.n	8001e64 <__aeabi_dsub+0x308>
 8001bc0:	2080      	movs	r0, #128	; 0x80
 8001bc2:	0400      	lsls	r0, r0, #16
 8001bc4:	4301      	orrs	r1, r0
 8001bc6:	2a38      	cmp	r2, #56	; 0x38
 8001bc8:	dd00      	ble.n	8001bcc <__aeabi_dsub+0x70>
 8001bca:	e17b      	b.n	8001ec4 <__aeabi_dsub+0x368>
 8001bcc:	2a1f      	cmp	r2, #31
 8001bce:	dd00      	ble.n	8001bd2 <__aeabi_dsub+0x76>
 8001bd0:	e1ee      	b.n	8001fb0 <__aeabi_dsub+0x454>
 8001bd2:	2020      	movs	r0, #32
 8001bd4:	003e      	movs	r6, r7
 8001bd6:	1a80      	subs	r0, r0, r2
 8001bd8:	000c      	movs	r4, r1
 8001bda:	40d6      	lsrs	r6, r2
 8001bdc:	40d1      	lsrs	r1, r2
 8001bde:	4087      	lsls	r7, r0
 8001be0:	4662      	mov	r2, ip
 8001be2:	4084      	lsls	r4, r0
 8001be4:	1a52      	subs	r2, r2, r1
 8001be6:	1e78      	subs	r0, r7, #1
 8001be8:	4187      	sbcs	r7, r0
 8001bea:	4694      	mov	ip, r2
 8001bec:	4334      	orrs	r4, r6
 8001bee:	4327      	orrs	r7, r4
 8001bf0:	1bdc      	subs	r4, r3, r7
 8001bf2:	42a3      	cmp	r3, r4
 8001bf4:	419b      	sbcs	r3, r3
 8001bf6:	4662      	mov	r2, ip
 8001bf8:	425b      	negs	r3, r3
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	4699      	mov	r9, r3
 8001bfe:	464b      	mov	r3, r9
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	d400      	bmi.n	8001c06 <__aeabi_dsub+0xaa>
 8001c04:	e118      	b.n	8001e38 <__aeabi_dsub+0x2dc>
 8001c06:	464b      	mov	r3, r9
 8001c08:	0258      	lsls	r0, r3, #9
 8001c0a:	0a43      	lsrs	r3, r0, #9
 8001c0c:	4699      	mov	r9, r3
 8001c0e:	464b      	mov	r3, r9
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0xba>
 8001c14:	e137      	b.n	8001e86 <__aeabi_dsub+0x32a>
 8001c16:	4648      	mov	r0, r9
 8001c18:	f000 fc50 	bl	80024bc <__clzsi2>
 8001c1c:	0001      	movs	r1, r0
 8001c1e:	3908      	subs	r1, #8
 8001c20:	2320      	movs	r3, #32
 8001c22:	0022      	movs	r2, r4
 8001c24:	4648      	mov	r0, r9
 8001c26:	1a5b      	subs	r3, r3, r1
 8001c28:	40da      	lsrs	r2, r3
 8001c2a:	4088      	lsls	r0, r1
 8001c2c:	408c      	lsls	r4, r1
 8001c2e:	4643      	mov	r3, r8
 8001c30:	4310      	orrs	r0, r2
 8001c32:	4588      	cmp	r8, r1
 8001c34:	dd00      	ble.n	8001c38 <__aeabi_dsub+0xdc>
 8001c36:	e136      	b.n	8001ea6 <__aeabi_dsub+0x34a>
 8001c38:	1ac9      	subs	r1, r1, r3
 8001c3a:	1c4b      	adds	r3, r1, #1
 8001c3c:	2b1f      	cmp	r3, #31
 8001c3e:	dd00      	ble.n	8001c42 <__aeabi_dsub+0xe6>
 8001c40:	e0ea      	b.n	8001e18 <__aeabi_dsub+0x2bc>
 8001c42:	2220      	movs	r2, #32
 8001c44:	0026      	movs	r6, r4
 8001c46:	1ad2      	subs	r2, r2, r3
 8001c48:	0001      	movs	r1, r0
 8001c4a:	4094      	lsls	r4, r2
 8001c4c:	40de      	lsrs	r6, r3
 8001c4e:	40d8      	lsrs	r0, r3
 8001c50:	2300      	movs	r3, #0
 8001c52:	4091      	lsls	r1, r2
 8001c54:	1e62      	subs	r2, r4, #1
 8001c56:	4194      	sbcs	r4, r2
 8001c58:	4681      	mov	r9, r0
 8001c5a:	4698      	mov	r8, r3
 8001c5c:	4331      	orrs	r1, r6
 8001c5e:	430c      	orrs	r4, r1
 8001c60:	0763      	lsls	r3, r4, #29
 8001c62:	d009      	beq.n	8001c78 <__aeabi_dsub+0x11c>
 8001c64:	230f      	movs	r3, #15
 8001c66:	4023      	ands	r3, r4
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d005      	beq.n	8001c78 <__aeabi_dsub+0x11c>
 8001c6c:	1d23      	adds	r3, r4, #4
 8001c6e:	42a3      	cmp	r3, r4
 8001c70:	41a4      	sbcs	r4, r4
 8001c72:	4264      	negs	r4, r4
 8001c74:	44a1      	add	r9, r4
 8001c76:	001c      	movs	r4, r3
 8001c78:	464b      	mov	r3, r9
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	d400      	bmi.n	8001c80 <__aeabi_dsub+0x124>
 8001c7e:	e0de      	b.n	8001e3e <__aeabi_dsub+0x2e2>
 8001c80:	4641      	mov	r1, r8
 8001c82:	4b8c      	ldr	r3, [pc, #560]	; (8001eb4 <__aeabi_dsub+0x358>)
 8001c84:	3101      	adds	r1, #1
 8001c86:	4299      	cmp	r1, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dsub+0x130>
 8001c8a:	e0e7      	b.n	8001e5c <__aeabi_dsub+0x300>
 8001c8c:	464b      	mov	r3, r9
 8001c8e:	488a      	ldr	r0, [pc, #552]	; (8001eb8 <__aeabi_dsub+0x35c>)
 8001c90:	08e4      	lsrs	r4, r4, #3
 8001c92:	4003      	ands	r3, r0
 8001c94:	0018      	movs	r0, r3
 8001c96:	0549      	lsls	r1, r1, #21
 8001c98:	075b      	lsls	r3, r3, #29
 8001c9a:	0240      	lsls	r0, r0, #9
 8001c9c:	4323      	orrs	r3, r4
 8001c9e:	0d4a      	lsrs	r2, r1, #21
 8001ca0:	0b04      	lsrs	r4, r0, #12
 8001ca2:	0512      	lsls	r2, r2, #20
 8001ca4:	07ed      	lsls	r5, r5, #31
 8001ca6:	4322      	orrs	r2, r4
 8001ca8:	432a      	orrs	r2, r5
 8001caa:	0018      	movs	r0, r3
 8001cac:	0011      	movs	r1, r2
 8001cae:	bcf0      	pop	{r4, r5, r6, r7}
 8001cb0:	46bb      	mov	fp, r7
 8001cb2:	46b2      	mov	sl, r6
 8001cb4:	46a9      	mov	r9, r5
 8001cb6:	46a0      	mov	r8, r4
 8001cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cba:	4642      	mov	r2, r8
 8001cbc:	1a12      	subs	r2, r2, r0
 8001cbe:	2a00      	cmp	r2, #0
 8001cc0:	dd52      	ble.n	8001d68 <__aeabi_dsub+0x20c>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x16c>
 8001cc6:	e09c      	b.n	8001e02 <__aeabi_dsub+0x2a6>
 8001cc8:	45a0      	cmp	r8, r4
 8001cca:	d100      	bne.n	8001cce <__aeabi_dsub+0x172>
 8001ccc:	e0ca      	b.n	8001e64 <__aeabi_dsub+0x308>
 8001cce:	2080      	movs	r0, #128	; 0x80
 8001cd0:	0400      	lsls	r0, r0, #16
 8001cd2:	4301      	orrs	r1, r0
 8001cd4:	2a38      	cmp	r2, #56	; 0x38
 8001cd6:	dd00      	ble.n	8001cda <__aeabi_dsub+0x17e>
 8001cd8:	e149      	b.n	8001f6e <__aeabi_dsub+0x412>
 8001cda:	2a1f      	cmp	r2, #31
 8001cdc:	dc00      	bgt.n	8001ce0 <__aeabi_dsub+0x184>
 8001cde:	e197      	b.n	8002010 <__aeabi_dsub+0x4b4>
 8001ce0:	0010      	movs	r0, r2
 8001ce2:	000e      	movs	r6, r1
 8001ce4:	3820      	subs	r0, #32
 8001ce6:	40c6      	lsrs	r6, r0
 8001ce8:	2a20      	cmp	r2, #32
 8001cea:	d004      	beq.n	8001cf6 <__aeabi_dsub+0x19a>
 8001cec:	2040      	movs	r0, #64	; 0x40
 8001cee:	1a82      	subs	r2, r0, r2
 8001cf0:	4091      	lsls	r1, r2
 8001cf2:	430f      	orrs	r7, r1
 8001cf4:	46b9      	mov	r9, r7
 8001cf6:	464c      	mov	r4, r9
 8001cf8:	1e62      	subs	r2, r4, #1
 8001cfa:	4194      	sbcs	r4, r2
 8001cfc:	4334      	orrs	r4, r6
 8001cfe:	e13a      	b.n	8001f76 <__aeabi_dsub+0x41a>
 8001d00:	000a      	movs	r2, r1
 8001d02:	433a      	orrs	r2, r7
 8001d04:	d028      	beq.n	8001d58 <__aeabi_dsub+0x1fc>
 8001d06:	46b3      	mov	fp, r6
 8001d08:	42b5      	cmp	r5, r6
 8001d0a:	d02b      	beq.n	8001d64 <__aeabi_dsub+0x208>
 8001d0c:	4a6b      	ldr	r2, [pc, #428]	; (8001ebc <__aeabi_dsub+0x360>)
 8001d0e:	4442      	add	r2, r8
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d05d      	beq.n	8001dd0 <__aeabi_dsub+0x274>
 8001d14:	4642      	mov	r2, r8
 8001d16:	4644      	mov	r4, r8
 8001d18:	1a82      	subs	r2, r0, r2
 8001d1a:	2c00      	cmp	r4, #0
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x1c4>
 8001d1e:	e0f5      	b.n	8001f0c <__aeabi_dsub+0x3b0>
 8001d20:	4665      	mov	r5, ip
 8001d22:	431d      	orrs	r5, r3
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x1cc>
 8001d26:	e19c      	b.n	8002062 <__aeabi_dsub+0x506>
 8001d28:	1e55      	subs	r5, r2, #1
 8001d2a:	2a01      	cmp	r2, #1
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dsub+0x1d4>
 8001d2e:	e1fb      	b.n	8002128 <__aeabi_dsub+0x5cc>
 8001d30:	4c60      	ldr	r4, [pc, #384]	; (8001eb4 <__aeabi_dsub+0x358>)
 8001d32:	42a2      	cmp	r2, r4
 8001d34:	d100      	bne.n	8001d38 <__aeabi_dsub+0x1dc>
 8001d36:	e1bd      	b.n	80020b4 <__aeabi_dsub+0x558>
 8001d38:	002a      	movs	r2, r5
 8001d3a:	e0f0      	b.n	8001f1e <__aeabi_dsub+0x3c2>
 8001d3c:	0008      	movs	r0, r1
 8001d3e:	4338      	orrs	r0, r7
 8001d40:	d100      	bne.n	8001d44 <__aeabi_dsub+0x1e8>
 8001d42:	e0c3      	b.n	8001ecc <__aeabi_dsub+0x370>
 8001d44:	1e50      	subs	r0, r2, #1
 8001d46:	2a01      	cmp	r2, #1
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x1f0>
 8001d4a:	e1a8      	b.n	800209e <__aeabi_dsub+0x542>
 8001d4c:	4c59      	ldr	r4, [pc, #356]	; (8001eb4 <__aeabi_dsub+0x358>)
 8001d4e:	42a2      	cmp	r2, r4
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x1f8>
 8001d52:	e087      	b.n	8001e64 <__aeabi_dsub+0x308>
 8001d54:	0002      	movs	r2, r0
 8001d56:	e736      	b.n	8001bc6 <__aeabi_dsub+0x6a>
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4056      	eors	r6, r2
 8001d5c:	46b3      	mov	fp, r6
 8001d5e:	42b5      	cmp	r5, r6
 8001d60:	d000      	beq.n	8001d64 <__aeabi_dsub+0x208>
 8001d62:	e721      	b.n	8001ba8 <__aeabi_dsub+0x4c>
 8001d64:	4a55      	ldr	r2, [pc, #340]	; (8001ebc <__aeabi_dsub+0x360>)
 8001d66:	4442      	add	r2, r8
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x212>
 8001d6c:	e0b5      	b.n	8001eda <__aeabi_dsub+0x37e>
 8001d6e:	4642      	mov	r2, r8
 8001d70:	4644      	mov	r4, r8
 8001d72:	1a82      	subs	r2, r0, r2
 8001d74:	2c00      	cmp	r4, #0
 8001d76:	d100      	bne.n	8001d7a <__aeabi_dsub+0x21e>
 8001d78:	e138      	b.n	8001fec <__aeabi_dsub+0x490>
 8001d7a:	4e4e      	ldr	r6, [pc, #312]	; (8001eb4 <__aeabi_dsub+0x358>)
 8001d7c:	42b0      	cmp	r0, r6
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x226>
 8001d80:	e1de      	b.n	8002140 <__aeabi_dsub+0x5e4>
 8001d82:	2680      	movs	r6, #128	; 0x80
 8001d84:	4664      	mov	r4, ip
 8001d86:	0436      	lsls	r6, r6, #16
 8001d88:	4334      	orrs	r4, r6
 8001d8a:	46a4      	mov	ip, r4
 8001d8c:	2a38      	cmp	r2, #56	; 0x38
 8001d8e:	dd00      	ble.n	8001d92 <__aeabi_dsub+0x236>
 8001d90:	e196      	b.n	80020c0 <__aeabi_dsub+0x564>
 8001d92:	2a1f      	cmp	r2, #31
 8001d94:	dd00      	ble.n	8001d98 <__aeabi_dsub+0x23c>
 8001d96:	e224      	b.n	80021e2 <__aeabi_dsub+0x686>
 8001d98:	2620      	movs	r6, #32
 8001d9a:	1ab4      	subs	r4, r6, r2
 8001d9c:	46a2      	mov	sl, r4
 8001d9e:	4664      	mov	r4, ip
 8001da0:	4656      	mov	r6, sl
 8001da2:	40b4      	lsls	r4, r6
 8001da4:	46a1      	mov	r9, r4
 8001da6:	001c      	movs	r4, r3
 8001da8:	464e      	mov	r6, r9
 8001daa:	40d4      	lsrs	r4, r2
 8001dac:	4326      	orrs	r6, r4
 8001dae:	0034      	movs	r4, r6
 8001db0:	4656      	mov	r6, sl
 8001db2:	40b3      	lsls	r3, r6
 8001db4:	1e5e      	subs	r6, r3, #1
 8001db6:	41b3      	sbcs	r3, r6
 8001db8:	431c      	orrs	r4, r3
 8001dba:	4663      	mov	r3, ip
 8001dbc:	40d3      	lsrs	r3, r2
 8001dbe:	18c9      	adds	r1, r1, r3
 8001dc0:	19e4      	adds	r4, r4, r7
 8001dc2:	42bc      	cmp	r4, r7
 8001dc4:	41bf      	sbcs	r7, r7
 8001dc6:	427f      	negs	r7, r7
 8001dc8:	46b9      	mov	r9, r7
 8001dca:	4680      	mov	r8, r0
 8001dcc:	4489      	add	r9, r1
 8001dce:	e0d8      	b.n	8001f82 <__aeabi_dsub+0x426>
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4c3b      	ldr	r4, [pc, #236]	; (8001ec0 <__aeabi_dsub+0x364>)
 8001dd4:	3001      	adds	r0, #1
 8001dd6:	4220      	tst	r0, r4
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dsub+0x280>
 8001dda:	e0b4      	b.n	8001f46 <__aeabi_dsub+0x3ea>
 8001ddc:	4640      	mov	r0, r8
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d000      	beq.n	8001de4 <__aeabi_dsub+0x288>
 8001de2:	e144      	b.n	800206e <__aeabi_dsub+0x512>
 8001de4:	4660      	mov	r0, ip
 8001de6:	4318      	orrs	r0, r3
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x290>
 8001dea:	e190      	b.n	800210e <__aeabi_dsub+0x5b2>
 8001dec:	0008      	movs	r0, r1
 8001dee:	4338      	orrs	r0, r7
 8001df0:	d000      	beq.n	8001df4 <__aeabi_dsub+0x298>
 8001df2:	e1aa      	b.n	800214a <__aeabi_dsub+0x5ee>
 8001df4:	4661      	mov	r1, ip
 8001df6:	08db      	lsrs	r3, r3, #3
 8001df8:	0749      	lsls	r1, r1, #29
 8001dfa:	430b      	orrs	r3, r1
 8001dfc:	4661      	mov	r1, ip
 8001dfe:	08cc      	lsrs	r4, r1, #3
 8001e00:	e027      	b.n	8001e52 <__aeabi_dsub+0x2f6>
 8001e02:	0008      	movs	r0, r1
 8001e04:	4338      	orrs	r0, r7
 8001e06:	d061      	beq.n	8001ecc <__aeabi_dsub+0x370>
 8001e08:	1e50      	subs	r0, r2, #1
 8001e0a:	2a01      	cmp	r2, #1
 8001e0c:	d100      	bne.n	8001e10 <__aeabi_dsub+0x2b4>
 8001e0e:	e139      	b.n	8002084 <__aeabi_dsub+0x528>
 8001e10:	42a2      	cmp	r2, r4
 8001e12:	d027      	beq.n	8001e64 <__aeabi_dsub+0x308>
 8001e14:	0002      	movs	r2, r0
 8001e16:	e75d      	b.n	8001cd4 <__aeabi_dsub+0x178>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	391f      	subs	r1, #31
 8001e1c:	40ca      	lsrs	r2, r1
 8001e1e:	0011      	movs	r1, r2
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	d003      	beq.n	8001e2c <__aeabi_dsub+0x2d0>
 8001e24:	2240      	movs	r2, #64	; 0x40
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4098      	lsls	r0, r3
 8001e2a:	4304      	orrs	r4, r0
 8001e2c:	1e63      	subs	r3, r4, #1
 8001e2e:	419c      	sbcs	r4, r3
 8001e30:	2300      	movs	r3, #0
 8001e32:	4699      	mov	r9, r3
 8001e34:	4698      	mov	r8, r3
 8001e36:	430c      	orrs	r4, r1
 8001e38:	0763      	lsls	r3, r4, #29
 8001e3a:	d000      	beq.n	8001e3e <__aeabi_dsub+0x2e2>
 8001e3c:	e712      	b.n	8001c64 <__aeabi_dsub+0x108>
 8001e3e:	464b      	mov	r3, r9
 8001e40:	464a      	mov	r2, r9
 8001e42:	08e4      	lsrs	r4, r4, #3
 8001e44:	075b      	lsls	r3, r3, #29
 8001e46:	4323      	orrs	r3, r4
 8001e48:	08d4      	lsrs	r4, r2, #3
 8001e4a:	4642      	mov	r2, r8
 8001e4c:	4919      	ldr	r1, [pc, #100]	; (8001eb4 <__aeabi_dsub+0x358>)
 8001e4e:	428a      	cmp	r2, r1
 8001e50:	d00e      	beq.n	8001e70 <__aeabi_dsub+0x314>
 8001e52:	0324      	lsls	r4, r4, #12
 8001e54:	0552      	lsls	r2, r2, #21
 8001e56:	0b24      	lsrs	r4, r4, #12
 8001e58:	0d52      	lsrs	r2, r2, #21
 8001e5a:	e722      	b.n	8001ca2 <__aeabi_dsub+0x146>
 8001e5c:	000a      	movs	r2, r1
 8001e5e:	2400      	movs	r4, #0
 8001e60:	2300      	movs	r3, #0
 8001e62:	e71e      	b.n	8001ca2 <__aeabi_dsub+0x146>
 8001e64:	08db      	lsrs	r3, r3, #3
 8001e66:	4662      	mov	r2, ip
 8001e68:	0752      	lsls	r2, r2, #29
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	4662      	mov	r2, ip
 8001e6e:	08d4      	lsrs	r4, r2, #3
 8001e70:	001a      	movs	r2, r3
 8001e72:	4322      	orrs	r2, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x31c>
 8001e76:	e1fc      	b.n	8002272 <__aeabi_dsub+0x716>
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	0312      	lsls	r2, r2, #12
 8001e7c:	4314      	orrs	r4, r2
 8001e7e:	0324      	lsls	r4, r4, #12
 8001e80:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <__aeabi_dsub+0x358>)
 8001e82:	0b24      	lsrs	r4, r4, #12
 8001e84:	e70d      	b.n	8001ca2 <__aeabi_dsub+0x146>
 8001e86:	0020      	movs	r0, r4
 8001e88:	f000 fb18 	bl	80024bc <__clzsi2>
 8001e8c:	0001      	movs	r1, r0
 8001e8e:	3118      	adds	r1, #24
 8001e90:	291f      	cmp	r1, #31
 8001e92:	dc00      	bgt.n	8001e96 <__aeabi_dsub+0x33a>
 8001e94:	e6c4      	b.n	8001c20 <__aeabi_dsub+0xc4>
 8001e96:	3808      	subs	r0, #8
 8001e98:	4084      	lsls	r4, r0
 8001e9a:	4643      	mov	r3, r8
 8001e9c:	0020      	movs	r0, r4
 8001e9e:	2400      	movs	r4, #0
 8001ea0:	4588      	cmp	r8, r1
 8001ea2:	dc00      	bgt.n	8001ea6 <__aeabi_dsub+0x34a>
 8001ea4:	e6c8      	b.n	8001c38 <__aeabi_dsub+0xdc>
 8001ea6:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <__aeabi_dsub+0x35c>)
 8001ea8:	1a5b      	subs	r3, r3, r1
 8001eaa:	4010      	ands	r0, r2
 8001eac:	4698      	mov	r8, r3
 8001eae:	4681      	mov	r9, r0
 8001eb0:	e6d6      	b.n	8001c60 <__aeabi_dsub+0x104>
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	000007ff 	.word	0x000007ff
 8001eb8:	ff7fffff 	.word	0xff7fffff
 8001ebc:	fffff801 	.word	0xfffff801
 8001ec0:	000007fe 	.word	0x000007fe
 8001ec4:	430f      	orrs	r7, r1
 8001ec6:	1e7a      	subs	r2, r7, #1
 8001ec8:	4197      	sbcs	r7, r2
 8001eca:	e691      	b.n	8001bf0 <__aeabi_dsub+0x94>
 8001ecc:	4661      	mov	r1, ip
 8001ece:	08db      	lsrs	r3, r3, #3
 8001ed0:	0749      	lsls	r1, r1, #29
 8001ed2:	430b      	orrs	r3, r1
 8001ed4:	4661      	mov	r1, ip
 8001ed6:	08cc      	lsrs	r4, r1, #3
 8001ed8:	e7b8      	b.n	8001e4c <__aeabi_dsub+0x2f0>
 8001eda:	4640      	mov	r0, r8
 8001edc:	4cd3      	ldr	r4, [pc, #844]	; (800222c <__aeabi_dsub+0x6d0>)
 8001ede:	3001      	adds	r0, #1
 8001ee0:	4220      	tst	r0, r4
 8001ee2:	d000      	beq.n	8001ee6 <__aeabi_dsub+0x38a>
 8001ee4:	e0a2      	b.n	800202c <__aeabi_dsub+0x4d0>
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d000      	beq.n	8001eee <__aeabi_dsub+0x392>
 8001eec:	e101      	b.n	80020f2 <__aeabi_dsub+0x596>
 8001eee:	4660      	mov	r0, ip
 8001ef0:	4318      	orrs	r0, r3
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x39a>
 8001ef4:	e15e      	b.n	80021b4 <__aeabi_dsub+0x658>
 8001ef6:	0008      	movs	r0, r1
 8001ef8:	4338      	orrs	r0, r7
 8001efa:	d000      	beq.n	8001efe <__aeabi_dsub+0x3a2>
 8001efc:	e15f      	b.n	80021be <__aeabi_dsub+0x662>
 8001efe:	4661      	mov	r1, ip
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	0749      	lsls	r1, r1, #29
 8001f04:	430b      	orrs	r3, r1
 8001f06:	4661      	mov	r1, ip
 8001f08:	08cc      	lsrs	r4, r1, #3
 8001f0a:	e7a2      	b.n	8001e52 <__aeabi_dsub+0x2f6>
 8001f0c:	4dc8      	ldr	r5, [pc, #800]	; (8002230 <__aeabi_dsub+0x6d4>)
 8001f0e:	42a8      	cmp	r0, r5
 8001f10:	d100      	bne.n	8001f14 <__aeabi_dsub+0x3b8>
 8001f12:	e0cf      	b.n	80020b4 <__aeabi_dsub+0x558>
 8001f14:	2580      	movs	r5, #128	; 0x80
 8001f16:	4664      	mov	r4, ip
 8001f18:	042d      	lsls	r5, r5, #16
 8001f1a:	432c      	orrs	r4, r5
 8001f1c:	46a4      	mov	ip, r4
 8001f1e:	2a38      	cmp	r2, #56	; 0x38
 8001f20:	dc56      	bgt.n	8001fd0 <__aeabi_dsub+0x474>
 8001f22:	2a1f      	cmp	r2, #31
 8001f24:	dd00      	ble.n	8001f28 <__aeabi_dsub+0x3cc>
 8001f26:	e0d1      	b.n	80020cc <__aeabi_dsub+0x570>
 8001f28:	2520      	movs	r5, #32
 8001f2a:	001e      	movs	r6, r3
 8001f2c:	1aad      	subs	r5, r5, r2
 8001f2e:	4664      	mov	r4, ip
 8001f30:	40ab      	lsls	r3, r5
 8001f32:	40ac      	lsls	r4, r5
 8001f34:	40d6      	lsrs	r6, r2
 8001f36:	1e5d      	subs	r5, r3, #1
 8001f38:	41ab      	sbcs	r3, r5
 8001f3a:	4334      	orrs	r4, r6
 8001f3c:	4323      	orrs	r3, r4
 8001f3e:	4664      	mov	r4, ip
 8001f40:	40d4      	lsrs	r4, r2
 8001f42:	1b09      	subs	r1, r1, r4
 8001f44:	e049      	b.n	8001fda <__aeabi_dsub+0x47e>
 8001f46:	4660      	mov	r0, ip
 8001f48:	1bdc      	subs	r4, r3, r7
 8001f4a:	1a46      	subs	r6, r0, r1
 8001f4c:	42a3      	cmp	r3, r4
 8001f4e:	4180      	sbcs	r0, r0
 8001f50:	4240      	negs	r0, r0
 8001f52:	4681      	mov	r9, r0
 8001f54:	0030      	movs	r0, r6
 8001f56:	464e      	mov	r6, r9
 8001f58:	1b80      	subs	r0, r0, r6
 8001f5a:	4681      	mov	r9, r0
 8001f5c:	0200      	lsls	r0, r0, #8
 8001f5e:	d476      	bmi.n	800204e <__aeabi_dsub+0x4f2>
 8001f60:	464b      	mov	r3, r9
 8001f62:	4323      	orrs	r3, r4
 8001f64:	d000      	beq.n	8001f68 <__aeabi_dsub+0x40c>
 8001f66:	e652      	b.n	8001c0e <__aeabi_dsub+0xb2>
 8001f68:	2400      	movs	r4, #0
 8001f6a:	2500      	movs	r5, #0
 8001f6c:	e771      	b.n	8001e52 <__aeabi_dsub+0x2f6>
 8001f6e:	4339      	orrs	r1, r7
 8001f70:	000c      	movs	r4, r1
 8001f72:	1e62      	subs	r2, r4, #1
 8001f74:	4194      	sbcs	r4, r2
 8001f76:	18e4      	adds	r4, r4, r3
 8001f78:	429c      	cmp	r4, r3
 8001f7a:	419b      	sbcs	r3, r3
 8001f7c:	425b      	negs	r3, r3
 8001f7e:	4463      	add	r3, ip
 8001f80:	4699      	mov	r9, r3
 8001f82:	464b      	mov	r3, r9
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	d400      	bmi.n	8001f8a <__aeabi_dsub+0x42e>
 8001f88:	e756      	b.n	8001e38 <__aeabi_dsub+0x2dc>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	469c      	mov	ip, r3
 8001f8e:	4ba8      	ldr	r3, [pc, #672]	; (8002230 <__aeabi_dsub+0x6d4>)
 8001f90:	44e0      	add	r8, ip
 8001f92:	4598      	cmp	r8, r3
 8001f94:	d038      	beq.n	8002008 <__aeabi_dsub+0x4ac>
 8001f96:	464b      	mov	r3, r9
 8001f98:	48a6      	ldr	r0, [pc, #664]	; (8002234 <__aeabi_dsub+0x6d8>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4003      	ands	r3, r0
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	0863      	lsrs	r3, r4, #1
 8001fa2:	4014      	ands	r4, r2
 8001fa4:	431c      	orrs	r4, r3
 8001fa6:	07c3      	lsls	r3, r0, #31
 8001fa8:	431c      	orrs	r4, r3
 8001faa:	0843      	lsrs	r3, r0, #1
 8001fac:	4699      	mov	r9, r3
 8001fae:	e657      	b.n	8001c60 <__aeabi_dsub+0x104>
 8001fb0:	0010      	movs	r0, r2
 8001fb2:	000e      	movs	r6, r1
 8001fb4:	3820      	subs	r0, #32
 8001fb6:	40c6      	lsrs	r6, r0
 8001fb8:	2a20      	cmp	r2, #32
 8001fba:	d004      	beq.n	8001fc6 <__aeabi_dsub+0x46a>
 8001fbc:	2040      	movs	r0, #64	; 0x40
 8001fbe:	1a82      	subs	r2, r0, r2
 8001fc0:	4091      	lsls	r1, r2
 8001fc2:	430f      	orrs	r7, r1
 8001fc4:	46b9      	mov	r9, r7
 8001fc6:	464f      	mov	r7, r9
 8001fc8:	1e7a      	subs	r2, r7, #1
 8001fca:	4197      	sbcs	r7, r2
 8001fcc:	4337      	orrs	r7, r6
 8001fce:	e60f      	b.n	8001bf0 <__aeabi_dsub+0x94>
 8001fd0:	4662      	mov	r2, ip
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	0013      	movs	r3, r2
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	4193      	sbcs	r3, r2
 8001fda:	1afc      	subs	r4, r7, r3
 8001fdc:	42a7      	cmp	r7, r4
 8001fde:	41bf      	sbcs	r7, r7
 8001fe0:	427f      	negs	r7, r7
 8001fe2:	1bcb      	subs	r3, r1, r7
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	465d      	mov	r5, fp
 8001fe8:	4680      	mov	r8, r0
 8001fea:	e608      	b.n	8001bfe <__aeabi_dsub+0xa2>
 8001fec:	4666      	mov	r6, ip
 8001fee:	431e      	orrs	r6, r3
 8001ff0:	d100      	bne.n	8001ff4 <__aeabi_dsub+0x498>
 8001ff2:	e0be      	b.n	8002172 <__aeabi_dsub+0x616>
 8001ff4:	1e56      	subs	r6, r2, #1
 8001ff6:	2a01      	cmp	r2, #1
 8001ff8:	d100      	bne.n	8001ffc <__aeabi_dsub+0x4a0>
 8001ffa:	e109      	b.n	8002210 <__aeabi_dsub+0x6b4>
 8001ffc:	4c8c      	ldr	r4, [pc, #560]	; (8002230 <__aeabi_dsub+0x6d4>)
 8001ffe:	42a2      	cmp	r2, r4
 8002000:	d100      	bne.n	8002004 <__aeabi_dsub+0x4a8>
 8002002:	e119      	b.n	8002238 <__aeabi_dsub+0x6dc>
 8002004:	0032      	movs	r2, r6
 8002006:	e6c1      	b.n	8001d8c <__aeabi_dsub+0x230>
 8002008:	4642      	mov	r2, r8
 800200a:	2400      	movs	r4, #0
 800200c:	2300      	movs	r3, #0
 800200e:	e648      	b.n	8001ca2 <__aeabi_dsub+0x146>
 8002010:	2020      	movs	r0, #32
 8002012:	000c      	movs	r4, r1
 8002014:	1a80      	subs	r0, r0, r2
 8002016:	003e      	movs	r6, r7
 8002018:	4087      	lsls	r7, r0
 800201a:	4084      	lsls	r4, r0
 800201c:	40d6      	lsrs	r6, r2
 800201e:	1e78      	subs	r0, r7, #1
 8002020:	4187      	sbcs	r7, r0
 8002022:	40d1      	lsrs	r1, r2
 8002024:	4334      	orrs	r4, r6
 8002026:	433c      	orrs	r4, r7
 8002028:	448c      	add	ip, r1
 800202a:	e7a4      	b.n	8001f76 <__aeabi_dsub+0x41a>
 800202c:	4a80      	ldr	r2, [pc, #512]	; (8002230 <__aeabi_dsub+0x6d4>)
 800202e:	4290      	cmp	r0, r2
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x4d8>
 8002032:	e0e9      	b.n	8002208 <__aeabi_dsub+0x6ac>
 8002034:	19df      	adds	r7, r3, r7
 8002036:	429f      	cmp	r7, r3
 8002038:	419b      	sbcs	r3, r3
 800203a:	4461      	add	r1, ip
 800203c:	425b      	negs	r3, r3
 800203e:	18c9      	adds	r1, r1, r3
 8002040:	07cc      	lsls	r4, r1, #31
 8002042:	087f      	lsrs	r7, r7, #1
 8002044:	084b      	lsrs	r3, r1, #1
 8002046:	4699      	mov	r9, r3
 8002048:	4680      	mov	r8, r0
 800204a:	433c      	orrs	r4, r7
 800204c:	e6f4      	b.n	8001e38 <__aeabi_dsub+0x2dc>
 800204e:	1afc      	subs	r4, r7, r3
 8002050:	42a7      	cmp	r7, r4
 8002052:	41bf      	sbcs	r7, r7
 8002054:	4663      	mov	r3, ip
 8002056:	427f      	negs	r7, r7
 8002058:	1ac9      	subs	r1, r1, r3
 800205a:	1bcb      	subs	r3, r1, r7
 800205c:	4699      	mov	r9, r3
 800205e:	465d      	mov	r5, fp
 8002060:	e5d5      	b.n	8001c0e <__aeabi_dsub+0xb2>
 8002062:	08ff      	lsrs	r7, r7, #3
 8002064:	074b      	lsls	r3, r1, #29
 8002066:	465d      	mov	r5, fp
 8002068:	433b      	orrs	r3, r7
 800206a:	08cc      	lsrs	r4, r1, #3
 800206c:	e6ee      	b.n	8001e4c <__aeabi_dsub+0x2f0>
 800206e:	4662      	mov	r2, ip
 8002070:	431a      	orrs	r2, r3
 8002072:	d000      	beq.n	8002076 <__aeabi_dsub+0x51a>
 8002074:	e082      	b.n	800217c <__aeabi_dsub+0x620>
 8002076:	000b      	movs	r3, r1
 8002078:	433b      	orrs	r3, r7
 800207a:	d11b      	bne.n	80020b4 <__aeabi_dsub+0x558>
 800207c:	2480      	movs	r4, #128	; 0x80
 800207e:	2500      	movs	r5, #0
 8002080:	0324      	lsls	r4, r4, #12
 8002082:	e6f9      	b.n	8001e78 <__aeabi_dsub+0x31c>
 8002084:	19dc      	adds	r4, r3, r7
 8002086:	429c      	cmp	r4, r3
 8002088:	419b      	sbcs	r3, r3
 800208a:	4461      	add	r1, ip
 800208c:	4689      	mov	r9, r1
 800208e:	425b      	negs	r3, r3
 8002090:	4499      	add	r9, r3
 8002092:	464b      	mov	r3, r9
 8002094:	021b      	lsls	r3, r3, #8
 8002096:	d444      	bmi.n	8002122 <__aeabi_dsub+0x5c6>
 8002098:	2301      	movs	r3, #1
 800209a:	4698      	mov	r8, r3
 800209c:	e6cc      	b.n	8001e38 <__aeabi_dsub+0x2dc>
 800209e:	1bdc      	subs	r4, r3, r7
 80020a0:	4662      	mov	r2, ip
 80020a2:	42a3      	cmp	r3, r4
 80020a4:	419b      	sbcs	r3, r3
 80020a6:	1a51      	subs	r1, r2, r1
 80020a8:	425b      	negs	r3, r3
 80020aa:	1acb      	subs	r3, r1, r3
 80020ac:	4699      	mov	r9, r3
 80020ae:	2301      	movs	r3, #1
 80020b0:	4698      	mov	r8, r3
 80020b2:	e5a4      	b.n	8001bfe <__aeabi_dsub+0xa2>
 80020b4:	08ff      	lsrs	r7, r7, #3
 80020b6:	074b      	lsls	r3, r1, #29
 80020b8:	465d      	mov	r5, fp
 80020ba:	433b      	orrs	r3, r7
 80020bc:	08cc      	lsrs	r4, r1, #3
 80020be:	e6d7      	b.n	8001e70 <__aeabi_dsub+0x314>
 80020c0:	4662      	mov	r2, ip
 80020c2:	431a      	orrs	r2, r3
 80020c4:	0014      	movs	r4, r2
 80020c6:	1e63      	subs	r3, r4, #1
 80020c8:	419c      	sbcs	r4, r3
 80020ca:	e679      	b.n	8001dc0 <__aeabi_dsub+0x264>
 80020cc:	0015      	movs	r5, r2
 80020ce:	4664      	mov	r4, ip
 80020d0:	3d20      	subs	r5, #32
 80020d2:	40ec      	lsrs	r4, r5
 80020d4:	46a0      	mov	r8, r4
 80020d6:	2a20      	cmp	r2, #32
 80020d8:	d005      	beq.n	80020e6 <__aeabi_dsub+0x58a>
 80020da:	2540      	movs	r5, #64	; 0x40
 80020dc:	4664      	mov	r4, ip
 80020de:	1aaa      	subs	r2, r5, r2
 80020e0:	4094      	lsls	r4, r2
 80020e2:	4323      	orrs	r3, r4
 80020e4:	469a      	mov	sl, r3
 80020e6:	4654      	mov	r4, sl
 80020e8:	1e63      	subs	r3, r4, #1
 80020ea:	419c      	sbcs	r4, r3
 80020ec:	4643      	mov	r3, r8
 80020ee:	4323      	orrs	r3, r4
 80020f0:	e773      	b.n	8001fda <__aeabi_dsub+0x47e>
 80020f2:	4662      	mov	r2, ip
 80020f4:	431a      	orrs	r2, r3
 80020f6:	d023      	beq.n	8002140 <__aeabi_dsub+0x5e4>
 80020f8:	000a      	movs	r2, r1
 80020fa:	433a      	orrs	r2, r7
 80020fc:	d000      	beq.n	8002100 <__aeabi_dsub+0x5a4>
 80020fe:	e0a0      	b.n	8002242 <__aeabi_dsub+0x6e6>
 8002100:	4662      	mov	r2, ip
 8002102:	08db      	lsrs	r3, r3, #3
 8002104:	0752      	lsls	r2, r2, #29
 8002106:	4313      	orrs	r3, r2
 8002108:	4662      	mov	r2, ip
 800210a:	08d4      	lsrs	r4, r2, #3
 800210c:	e6b0      	b.n	8001e70 <__aeabi_dsub+0x314>
 800210e:	000b      	movs	r3, r1
 8002110:	433b      	orrs	r3, r7
 8002112:	d100      	bne.n	8002116 <__aeabi_dsub+0x5ba>
 8002114:	e728      	b.n	8001f68 <__aeabi_dsub+0x40c>
 8002116:	08ff      	lsrs	r7, r7, #3
 8002118:	074b      	lsls	r3, r1, #29
 800211a:	465d      	mov	r5, fp
 800211c:	433b      	orrs	r3, r7
 800211e:	08cc      	lsrs	r4, r1, #3
 8002120:	e697      	b.n	8001e52 <__aeabi_dsub+0x2f6>
 8002122:	2302      	movs	r3, #2
 8002124:	4698      	mov	r8, r3
 8002126:	e736      	b.n	8001f96 <__aeabi_dsub+0x43a>
 8002128:	1afc      	subs	r4, r7, r3
 800212a:	42a7      	cmp	r7, r4
 800212c:	41bf      	sbcs	r7, r7
 800212e:	4663      	mov	r3, ip
 8002130:	427f      	negs	r7, r7
 8002132:	1ac9      	subs	r1, r1, r3
 8002134:	1bcb      	subs	r3, r1, r7
 8002136:	4699      	mov	r9, r3
 8002138:	2301      	movs	r3, #1
 800213a:	465d      	mov	r5, fp
 800213c:	4698      	mov	r8, r3
 800213e:	e55e      	b.n	8001bfe <__aeabi_dsub+0xa2>
 8002140:	074b      	lsls	r3, r1, #29
 8002142:	08ff      	lsrs	r7, r7, #3
 8002144:	433b      	orrs	r3, r7
 8002146:	08cc      	lsrs	r4, r1, #3
 8002148:	e692      	b.n	8001e70 <__aeabi_dsub+0x314>
 800214a:	1bdc      	subs	r4, r3, r7
 800214c:	4660      	mov	r0, ip
 800214e:	42a3      	cmp	r3, r4
 8002150:	41b6      	sbcs	r6, r6
 8002152:	1a40      	subs	r0, r0, r1
 8002154:	4276      	negs	r6, r6
 8002156:	1b80      	subs	r0, r0, r6
 8002158:	4681      	mov	r9, r0
 800215a:	0200      	lsls	r0, r0, #8
 800215c:	d560      	bpl.n	8002220 <__aeabi_dsub+0x6c4>
 800215e:	1afc      	subs	r4, r7, r3
 8002160:	42a7      	cmp	r7, r4
 8002162:	41bf      	sbcs	r7, r7
 8002164:	4663      	mov	r3, ip
 8002166:	427f      	negs	r7, r7
 8002168:	1ac9      	subs	r1, r1, r3
 800216a:	1bcb      	subs	r3, r1, r7
 800216c:	4699      	mov	r9, r3
 800216e:	465d      	mov	r5, fp
 8002170:	e576      	b.n	8001c60 <__aeabi_dsub+0x104>
 8002172:	08ff      	lsrs	r7, r7, #3
 8002174:	074b      	lsls	r3, r1, #29
 8002176:	433b      	orrs	r3, r7
 8002178:	08cc      	lsrs	r4, r1, #3
 800217a:	e667      	b.n	8001e4c <__aeabi_dsub+0x2f0>
 800217c:	000a      	movs	r2, r1
 800217e:	08db      	lsrs	r3, r3, #3
 8002180:	433a      	orrs	r2, r7
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x62a>
 8002184:	e66f      	b.n	8001e66 <__aeabi_dsub+0x30a>
 8002186:	4662      	mov	r2, ip
 8002188:	0752      	lsls	r2, r2, #29
 800218a:	4313      	orrs	r3, r2
 800218c:	4662      	mov	r2, ip
 800218e:	08d4      	lsrs	r4, r2, #3
 8002190:	2280      	movs	r2, #128	; 0x80
 8002192:	0312      	lsls	r2, r2, #12
 8002194:	4214      	tst	r4, r2
 8002196:	d007      	beq.n	80021a8 <__aeabi_dsub+0x64c>
 8002198:	08c8      	lsrs	r0, r1, #3
 800219a:	4210      	tst	r0, r2
 800219c:	d104      	bne.n	80021a8 <__aeabi_dsub+0x64c>
 800219e:	465d      	mov	r5, fp
 80021a0:	0004      	movs	r4, r0
 80021a2:	08fb      	lsrs	r3, r7, #3
 80021a4:	0749      	lsls	r1, r1, #29
 80021a6:	430b      	orrs	r3, r1
 80021a8:	0f5a      	lsrs	r2, r3, #29
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	08db      	lsrs	r3, r3, #3
 80021ae:	0752      	lsls	r2, r2, #29
 80021b0:	4313      	orrs	r3, r2
 80021b2:	e65d      	b.n	8001e70 <__aeabi_dsub+0x314>
 80021b4:	074b      	lsls	r3, r1, #29
 80021b6:	08ff      	lsrs	r7, r7, #3
 80021b8:	433b      	orrs	r3, r7
 80021ba:	08cc      	lsrs	r4, r1, #3
 80021bc:	e649      	b.n	8001e52 <__aeabi_dsub+0x2f6>
 80021be:	19dc      	adds	r4, r3, r7
 80021c0:	429c      	cmp	r4, r3
 80021c2:	419b      	sbcs	r3, r3
 80021c4:	4461      	add	r1, ip
 80021c6:	4689      	mov	r9, r1
 80021c8:	425b      	negs	r3, r3
 80021ca:	4499      	add	r9, r3
 80021cc:	464b      	mov	r3, r9
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	d400      	bmi.n	80021d4 <__aeabi_dsub+0x678>
 80021d2:	e631      	b.n	8001e38 <__aeabi_dsub+0x2dc>
 80021d4:	464a      	mov	r2, r9
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <__aeabi_dsub+0x6d8>)
 80021d8:	401a      	ands	r2, r3
 80021da:	2301      	movs	r3, #1
 80021dc:	4691      	mov	r9, r2
 80021de:	4698      	mov	r8, r3
 80021e0:	e62a      	b.n	8001e38 <__aeabi_dsub+0x2dc>
 80021e2:	0016      	movs	r6, r2
 80021e4:	4664      	mov	r4, ip
 80021e6:	3e20      	subs	r6, #32
 80021e8:	40f4      	lsrs	r4, r6
 80021ea:	46a0      	mov	r8, r4
 80021ec:	2a20      	cmp	r2, #32
 80021ee:	d005      	beq.n	80021fc <__aeabi_dsub+0x6a0>
 80021f0:	2640      	movs	r6, #64	; 0x40
 80021f2:	4664      	mov	r4, ip
 80021f4:	1ab2      	subs	r2, r6, r2
 80021f6:	4094      	lsls	r4, r2
 80021f8:	4323      	orrs	r3, r4
 80021fa:	469a      	mov	sl, r3
 80021fc:	4654      	mov	r4, sl
 80021fe:	1e63      	subs	r3, r4, #1
 8002200:	419c      	sbcs	r4, r3
 8002202:	4643      	mov	r3, r8
 8002204:	431c      	orrs	r4, r3
 8002206:	e5db      	b.n	8001dc0 <__aeabi_dsub+0x264>
 8002208:	0002      	movs	r2, r0
 800220a:	2400      	movs	r4, #0
 800220c:	2300      	movs	r3, #0
 800220e:	e548      	b.n	8001ca2 <__aeabi_dsub+0x146>
 8002210:	19dc      	adds	r4, r3, r7
 8002212:	42bc      	cmp	r4, r7
 8002214:	41bf      	sbcs	r7, r7
 8002216:	4461      	add	r1, ip
 8002218:	4689      	mov	r9, r1
 800221a:	427f      	negs	r7, r7
 800221c:	44b9      	add	r9, r7
 800221e:	e738      	b.n	8002092 <__aeabi_dsub+0x536>
 8002220:	464b      	mov	r3, r9
 8002222:	4323      	orrs	r3, r4
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x6cc>
 8002226:	e69f      	b.n	8001f68 <__aeabi_dsub+0x40c>
 8002228:	e606      	b.n	8001e38 <__aeabi_dsub+0x2dc>
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	000007fe 	.word	0x000007fe
 8002230:	000007ff 	.word	0x000007ff
 8002234:	ff7fffff 	.word	0xff7fffff
 8002238:	08ff      	lsrs	r7, r7, #3
 800223a:	074b      	lsls	r3, r1, #29
 800223c:	433b      	orrs	r3, r7
 800223e:	08cc      	lsrs	r4, r1, #3
 8002240:	e616      	b.n	8001e70 <__aeabi_dsub+0x314>
 8002242:	4662      	mov	r2, ip
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	0752      	lsls	r2, r2, #29
 8002248:	4313      	orrs	r3, r2
 800224a:	4662      	mov	r2, ip
 800224c:	08d4      	lsrs	r4, r2, #3
 800224e:	2280      	movs	r2, #128	; 0x80
 8002250:	0312      	lsls	r2, r2, #12
 8002252:	4214      	tst	r4, r2
 8002254:	d007      	beq.n	8002266 <__aeabi_dsub+0x70a>
 8002256:	08c8      	lsrs	r0, r1, #3
 8002258:	4210      	tst	r0, r2
 800225a:	d104      	bne.n	8002266 <__aeabi_dsub+0x70a>
 800225c:	465d      	mov	r5, fp
 800225e:	0004      	movs	r4, r0
 8002260:	08fb      	lsrs	r3, r7, #3
 8002262:	0749      	lsls	r1, r1, #29
 8002264:	430b      	orrs	r3, r1
 8002266:	0f5a      	lsrs	r2, r3, #29
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	0752      	lsls	r2, r2, #29
 800226c:	08db      	lsrs	r3, r3, #3
 800226e:	4313      	orrs	r3, r2
 8002270:	e5fe      	b.n	8001e70 <__aeabi_dsub+0x314>
 8002272:	2300      	movs	r3, #0
 8002274:	4a01      	ldr	r2, [pc, #4]	; (800227c <__aeabi_dsub+0x720>)
 8002276:	001c      	movs	r4, r3
 8002278:	e513      	b.n	8001ca2 <__aeabi_dsub+0x146>
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	000007ff 	.word	0x000007ff

08002280 <__aeabi_dcmpun>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	0005      	movs	r5, r0
 8002284:	480c      	ldr	r0, [pc, #48]	; (80022b8 <__aeabi_dcmpun+0x38>)
 8002286:	031c      	lsls	r4, r3, #12
 8002288:	0016      	movs	r6, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	030a      	lsls	r2, r1, #12
 800228e:	0049      	lsls	r1, r1, #1
 8002290:	0b12      	lsrs	r2, r2, #12
 8002292:	0d49      	lsrs	r1, r1, #21
 8002294:	0b24      	lsrs	r4, r4, #12
 8002296:	0d5b      	lsrs	r3, r3, #21
 8002298:	4281      	cmp	r1, r0
 800229a:	d008      	beq.n	80022ae <__aeabi_dcmpun+0x2e>
 800229c:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <__aeabi_dcmpun+0x38>)
 800229e:	2000      	movs	r0, #0
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d103      	bne.n	80022ac <__aeabi_dcmpun+0x2c>
 80022a4:	0020      	movs	r0, r4
 80022a6:	4330      	orrs	r0, r6
 80022a8:	1e43      	subs	r3, r0, #1
 80022aa:	4198      	sbcs	r0, r3
 80022ac:	bd70      	pop	{r4, r5, r6, pc}
 80022ae:	2001      	movs	r0, #1
 80022b0:	432a      	orrs	r2, r5
 80022b2:	d1fb      	bne.n	80022ac <__aeabi_dcmpun+0x2c>
 80022b4:	e7f2      	b.n	800229c <__aeabi_dcmpun+0x1c>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	000007ff 	.word	0x000007ff

080022bc <__aeabi_i2d>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	2800      	cmp	r0, #0
 80022c0:	d016      	beq.n	80022f0 <__aeabi_i2d+0x34>
 80022c2:	17c3      	asrs	r3, r0, #31
 80022c4:	18c5      	adds	r5, r0, r3
 80022c6:	405d      	eors	r5, r3
 80022c8:	0fc4      	lsrs	r4, r0, #31
 80022ca:	0028      	movs	r0, r5
 80022cc:	f000 f8f6 	bl	80024bc <__clzsi2>
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <__aeabi_i2d+0x5c>)
 80022d2:	1a12      	subs	r2, r2, r0
 80022d4:	280a      	cmp	r0, #10
 80022d6:	dc16      	bgt.n	8002306 <__aeabi_i2d+0x4a>
 80022d8:	0003      	movs	r3, r0
 80022da:	002e      	movs	r6, r5
 80022dc:	3315      	adds	r3, #21
 80022de:	409e      	lsls	r6, r3
 80022e0:	230b      	movs	r3, #11
 80022e2:	1a18      	subs	r0, r3, r0
 80022e4:	40c5      	lsrs	r5, r0
 80022e6:	0552      	lsls	r2, r2, #21
 80022e8:	032d      	lsls	r5, r5, #12
 80022ea:	0b2d      	lsrs	r5, r5, #12
 80022ec:	0d53      	lsrs	r3, r2, #21
 80022ee:	e003      	b.n	80022f8 <__aeabi_i2d+0x3c>
 80022f0:	2400      	movs	r4, #0
 80022f2:	2300      	movs	r3, #0
 80022f4:	2500      	movs	r5, #0
 80022f6:	2600      	movs	r6, #0
 80022f8:	051b      	lsls	r3, r3, #20
 80022fa:	432b      	orrs	r3, r5
 80022fc:	07e4      	lsls	r4, r4, #31
 80022fe:	4323      	orrs	r3, r4
 8002300:	0030      	movs	r0, r6
 8002302:	0019      	movs	r1, r3
 8002304:	bd70      	pop	{r4, r5, r6, pc}
 8002306:	380b      	subs	r0, #11
 8002308:	4085      	lsls	r5, r0
 800230a:	0552      	lsls	r2, r2, #21
 800230c:	032d      	lsls	r5, r5, #12
 800230e:	2600      	movs	r6, #0
 8002310:	0b2d      	lsrs	r5, r5, #12
 8002312:	0d53      	lsrs	r3, r2, #21
 8002314:	e7f0      	b.n	80022f8 <__aeabi_i2d+0x3c>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	0000041e 	.word	0x0000041e

0800231c <__aeabi_f2d>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	0043      	lsls	r3, r0, #1
 8002320:	0246      	lsls	r6, r0, #9
 8002322:	0fc4      	lsrs	r4, r0, #31
 8002324:	20fe      	movs	r0, #254	; 0xfe
 8002326:	0e1b      	lsrs	r3, r3, #24
 8002328:	1c59      	adds	r1, r3, #1
 800232a:	0a75      	lsrs	r5, r6, #9
 800232c:	4208      	tst	r0, r1
 800232e:	d00c      	beq.n	800234a <__aeabi_f2d+0x2e>
 8002330:	22e0      	movs	r2, #224	; 0xe0
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4694      	mov	ip, r2
 8002336:	076d      	lsls	r5, r5, #29
 8002338:	0b36      	lsrs	r6, r6, #12
 800233a:	4463      	add	r3, ip
 800233c:	051b      	lsls	r3, r3, #20
 800233e:	4333      	orrs	r3, r6
 8002340:	07e4      	lsls	r4, r4, #31
 8002342:	4323      	orrs	r3, r4
 8002344:	0028      	movs	r0, r5
 8002346:	0019      	movs	r1, r3
 8002348:	bd70      	pop	{r4, r5, r6, pc}
 800234a:	2b00      	cmp	r3, #0
 800234c:	d114      	bne.n	8002378 <__aeabi_f2d+0x5c>
 800234e:	2d00      	cmp	r5, #0
 8002350:	d01b      	beq.n	800238a <__aeabi_f2d+0x6e>
 8002352:	0028      	movs	r0, r5
 8002354:	f000 f8b2 	bl	80024bc <__clzsi2>
 8002358:	280a      	cmp	r0, #10
 800235a:	dc1c      	bgt.n	8002396 <__aeabi_f2d+0x7a>
 800235c:	230b      	movs	r3, #11
 800235e:	002e      	movs	r6, r5
 8002360:	1a1b      	subs	r3, r3, r0
 8002362:	40de      	lsrs	r6, r3
 8002364:	0003      	movs	r3, r0
 8002366:	3315      	adds	r3, #21
 8002368:	409d      	lsls	r5, r3
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <__aeabi_f2d+0x88>)
 800236c:	0336      	lsls	r6, r6, #12
 800236e:	1a12      	subs	r2, r2, r0
 8002370:	0552      	lsls	r2, r2, #21
 8002372:	0b36      	lsrs	r6, r6, #12
 8002374:	0d53      	lsrs	r3, r2, #21
 8002376:	e7e1      	b.n	800233c <__aeabi_f2d+0x20>
 8002378:	2d00      	cmp	r5, #0
 800237a:	d009      	beq.n	8002390 <__aeabi_f2d+0x74>
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	0b36      	lsrs	r6, r6, #12
 8002380:	0312      	lsls	r2, r2, #12
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <__aeabi_f2d+0x8c>)
 8002384:	076d      	lsls	r5, r5, #29
 8002386:	4316      	orrs	r6, r2
 8002388:	e7d8      	b.n	800233c <__aeabi_f2d+0x20>
 800238a:	2300      	movs	r3, #0
 800238c:	2600      	movs	r6, #0
 800238e:	e7d5      	b.n	800233c <__aeabi_f2d+0x20>
 8002390:	2600      	movs	r6, #0
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <__aeabi_f2d+0x8c>)
 8002394:	e7d2      	b.n	800233c <__aeabi_f2d+0x20>
 8002396:	0003      	movs	r3, r0
 8002398:	3b0b      	subs	r3, #11
 800239a:	409d      	lsls	r5, r3
 800239c:	002e      	movs	r6, r5
 800239e:	2500      	movs	r5, #0
 80023a0:	e7e3      	b.n	800236a <__aeabi_f2d+0x4e>
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	00000389 	.word	0x00000389
 80023a8:	000007ff 	.word	0x000007ff

080023ac <__aeabi_d2f>:
 80023ac:	0002      	movs	r2, r0
 80023ae:	004b      	lsls	r3, r1, #1
 80023b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b2:	0d5b      	lsrs	r3, r3, #21
 80023b4:	030c      	lsls	r4, r1, #12
 80023b6:	4e3d      	ldr	r6, [pc, #244]	; (80024ac <__aeabi_d2f+0x100>)
 80023b8:	0a64      	lsrs	r4, r4, #9
 80023ba:	0f40      	lsrs	r0, r0, #29
 80023bc:	1c5f      	adds	r7, r3, #1
 80023be:	0fc9      	lsrs	r1, r1, #31
 80023c0:	4304      	orrs	r4, r0
 80023c2:	00d5      	lsls	r5, r2, #3
 80023c4:	4237      	tst	r7, r6
 80023c6:	d00a      	beq.n	80023de <__aeabi_d2f+0x32>
 80023c8:	4839      	ldr	r0, [pc, #228]	; (80024b0 <__aeabi_d2f+0x104>)
 80023ca:	181e      	adds	r6, r3, r0
 80023cc:	2efe      	cmp	r6, #254	; 0xfe
 80023ce:	dd16      	ble.n	80023fe <__aeabi_d2f+0x52>
 80023d0:	20ff      	movs	r0, #255	; 0xff
 80023d2:	2400      	movs	r4, #0
 80023d4:	05c0      	lsls	r0, r0, #23
 80023d6:	4320      	orrs	r0, r4
 80023d8:	07c9      	lsls	r1, r1, #31
 80023da:	4308      	orrs	r0, r1
 80023dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <__aeabi_d2f+0x44>
 80023e2:	432c      	orrs	r4, r5
 80023e4:	d026      	beq.n	8002434 <__aeabi_d2f+0x88>
 80023e6:	2205      	movs	r2, #5
 80023e8:	0192      	lsls	r2, r2, #6
 80023ea:	0a54      	lsrs	r4, r2, #9
 80023ec:	b2d8      	uxtb	r0, r3
 80023ee:	e7f1      	b.n	80023d4 <__aeabi_d2f+0x28>
 80023f0:	4325      	orrs	r5, r4
 80023f2:	d0ed      	beq.n	80023d0 <__aeabi_d2f+0x24>
 80023f4:	2080      	movs	r0, #128	; 0x80
 80023f6:	03c0      	lsls	r0, r0, #15
 80023f8:	4304      	orrs	r4, r0
 80023fa:	20ff      	movs	r0, #255	; 0xff
 80023fc:	e7ea      	b.n	80023d4 <__aeabi_d2f+0x28>
 80023fe:	2e00      	cmp	r6, #0
 8002400:	dd1b      	ble.n	800243a <__aeabi_d2f+0x8e>
 8002402:	0192      	lsls	r2, r2, #6
 8002404:	1e53      	subs	r3, r2, #1
 8002406:	419a      	sbcs	r2, r3
 8002408:	00e4      	lsls	r4, r4, #3
 800240a:	0f6d      	lsrs	r5, r5, #29
 800240c:	4322      	orrs	r2, r4
 800240e:	432a      	orrs	r2, r5
 8002410:	0753      	lsls	r3, r2, #29
 8002412:	d048      	beq.n	80024a6 <__aeabi_d2f+0xfa>
 8002414:	230f      	movs	r3, #15
 8002416:	4013      	ands	r3, r2
 8002418:	2b04      	cmp	r3, #4
 800241a:	d000      	beq.n	800241e <__aeabi_d2f+0x72>
 800241c:	3204      	adds	r2, #4
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	04db      	lsls	r3, r3, #19
 8002422:	4013      	ands	r3, r2
 8002424:	d03f      	beq.n	80024a6 <__aeabi_d2f+0xfa>
 8002426:	1c70      	adds	r0, r6, #1
 8002428:	2efe      	cmp	r6, #254	; 0xfe
 800242a:	d0d1      	beq.n	80023d0 <__aeabi_d2f+0x24>
 800242c:	0192      	lsls	r2, r2, #6
 800242e:	0a54      	lsrs	r4, r2, #9
 8002430:	b2c0      	uxtb	r0, r0
 8002432:	e7cf      	b.n	80023d4 <__aeabi_d2f+0x28>
 8002434:	2000      	movs	r0, #0
 8002436:	2400      	movs	r4, #0
 8002438:	e7cc      	b.n	80023d4 <__aeabi_d2f+0x28>
 800243a:	0032      	movs	r2, r6
 800243c:	3217      	adds	r2, #23
 800243e:	db22      	blt.n	8002486 <__aeabi_d2f+0xda>
 8002440:	2080      	movs	r0, #128	; 0x80
 8002442:	0400      	lsls	r0, r0, #16
 8002444:	4320      	orrs	r0, r4
 8002446:	241e      	movs	r4, #30
 8002448:	1ba4      	subs	r4, r4, r6
 800244a:	2c1f      	cmp	r4, #31
 800244c:	dd1d      	ble.n	800248a <__aeabi_d2f+0xde>
 800244e:	2202      	movs	r2, #2
 8002450:	4252      	negs	r2, r2
 8002452:	1b96      	subs	r6, r2, r6
 8002454:	0002      	movs	r2, r0
 8002456:	40f2      	lsrs	r2, r6
 8002458:	0016      	movs	r6, r2
 800245a:	2c20      	cmp	r4, #32
 800245c:	d004      	beq.n	8002468 <__aeabi_d2f+0xbc>
 800245e:	4a15      	ldr	r2, [pc, #84]	; (80024b4 <__aeabi_d2f+0x108>)
 8002460:	4694      	mov	ip, r2
 8002462:	4463      	add	r3, ip
 8002464:	4098      	lsls	r0, r3
 8002466:	4305      	orrs	r5, r0
 8002468:	002a      	movs	r2, r5
 800246a:	1e53      	subs	r3, r2, #1
 800246c:	419a      	sbcs	r2, r3
 800246e:	4332      	orrs	r2, r6
 8002470:	2600      	movs	r6, #0
 8002472:	0753      	lsls	r3, r2, #29
 8002474:	d1ce      	bne.n	8002414 <__aeabi_d2f+0x68>
 8002476:	2480      	movs	r4, #128	; 0x80
 8002478:	0013      	movs	r3, r2
 800247a:	04e4      	lsls	r4, r4, #19
 800247c:	2001      	movs	r0, #1
 800247e:	4023      	ands	r3, r4
 8002480:	4222      	tst	r2, r4
 8002482:	d1d3      	bne.n	800242c <__aeabi_d2f+0x80>
 8002484:	e7b0      	b.n	80023e8 <__aeabi_d2f+0x3c>
 8002486:	2300      	movs	r3, #0
 8002488:	e7ad      	b.n	80023e6 <__aeabi_d2f+0x3a>
 800248a:	4a0b      	ldr	r2, [pc, #44]	; (80024b8 <__aeabi_d2f+0x10c>)
 800248c:	4694      	mov	ip, r2
 800248e:	002a      	movs	r2, r5
 8002490:	40e2      	lsrs	r2, r4
 8002492:	0014      	movs	r4, r2
 8002494:	002a      	movs	r2, r5
 8002496:	4463      	add	r3, ip
 8002498:	409a      	lsls	r2, r3
 800249a:	4098      	lsls	r0, r3
 800249c:	1e55      	subs	r5, r2, #1
 800249e:	41aa      	sbcs	r2, r5
 80024a0:	4302      	orrs	r2, r0
 80024a2:	4322      	orrs	r2, r4
 80024a4:	e7e4      	b.n	8002470 <__aeabi_d2f+0xc4>
 80024a6:	0033      	movs	r3, r6
 80024a8:	e79e      	b.n	80023e8 <__aeabi_d2f+0x3c>
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	000007fe 	.word	0x000007fe
 80024b0:	fffffc80 	.word	0xfffffc80
 80024b4:	fffffca2 	.word	0xfffffca2
 80024b8:	fffffc82 	.word	0xfffffc82

080024bc <__clzsi2>:
 80024bc:	211c      	movs	r1, #28
 80024be:	2301      	movs	r3, #1
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	4298      	cmp	r0, r3
 80024c4:	d301      	bcc.n	80024ca <__clzsi2+0xe>
 80024c6:	0c00      	lsrs	r0, r0, #16
 80024c8:	3910      	subs	r1, #16
 80024ca:	0a1b      	lsrs	r3, r3, #8
 80024cc:	4298      	cmp	r0, r3
 80024ce:	d301      	bcc.n	80024d4 <__clzsi2+0x18>
 80024d0:	0a00      	lsrs	r0, r0, #8
 80024d2:	3908      	subs	r1, #8
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	4298      	cmp	r0, r3
 80024d8:	d301      	bcc.n	80024de <__clzsi2+0x22>
 80024da:	0900      	lsrs	r0, r0, #4
 80024dc:	3904      	subs	r1, #4
 80024de:	a202      	add	r2, pc, #8	; (adr r2, 80024e8 <__clzsi2+0x2c>)
 80024e0:	5c10      	ldrb	r0, [r2, r0]
 80024e2:	1840      	adds	r0, r0, r1
 80024e4:	4770      	bx	lr
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	02020304 	.word	0x02020304
 80024ec:	01010101 	.word	0x01010101
	...

080024f8 <LoadFilterList>:
	 while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) != 3) { }

	return true;
}

void LoadFilterList(FilterList *filterIdList) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < CANID_COUNT; i++) {
 8002500:	2300      	movs	r3, #0
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e007      	b.n	8002516 <LoadFilterList+0x1e>

        filterIdList->FilterIdList[i] = (uint32_t) i;
 8002506:	68f9      	ldr	r1, [r7, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < CANID_COUNT; i++) {
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	3301      	adds	r3, #1
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b02      	cmp	r3, #2
 800251a:	ddf4      	ble.n	8002506 <LoadFilterList+0xe>
    }
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	46bd      	mov	sp, r7
 8002522:	b004      	add	sp, #16
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <ConfigFilterList>:

void ConfigFilterList (uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4, uint32_t filterBank, uint8_t idType, uint8_t filterScale)
{
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b08f      	sub	sp, #60	; 0x3c
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	603b      	str	r3, [r7, #0]
    CAN_FilterTypeDef filterConfig = {0};
 8002536:	2410      	movs	r4, #16
 8002538:	193b      	adds	r3, r7, r4
 800253a:	0018      	movs	r0, r3
 800253c:	2328      	movs	r3, #40	; 0x28
 800253e:	001a      	movs	r2, r3
 8002540:	2100      	movs	r1, #0
 8002542:	f005 ff80 	bl	8008446 <memset>

    filterConfig.FilterActivation = ENABLE;
 8002546:	0021      	movs	r1, r4
 8002548:	187b      	adds	r3, r7, r1
 800254a:	2201      	movs	r2, #1
 800254c:	621a      	str	r2, [r3, #32]
    filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
    filterConfig.FilterBank = filterBank;
 8002554:	187b      	adds	r3, r7, r1
 8002556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002558:	615a      	str	r2, [r3, #20]

    if (filterScale == FILTER_TYEPE_32) {
 800255a:	2348      	movs	r3, #72	; 0x48
 800255c:	2408      	movs	r4, #8
 800255e:	191b      	adds	r3, r3, r4
 8002560:	19db      	adds	r3, r3, r7
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d146      	bne.n	80025f6 <ConfigFilterList+0xce>

        filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002568:	187b      	adds	r3, r7, r1
 800256a:	2201      	movs	r2, #1
 800256c:	61da      	str	r2, [r3, #28]
        filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800256e:	187b      	adds	r3, r7, r1
 8002570:	2201      	movs	r2, #1
 8002572:	619a      	str	r2, [r3, #24]

        if (idType == EXT_ID) {
 8002574:	2044      	movs	r0, #68	; 0x44
 8002576:	1903      	adds	r3, r0, r4
 8002578:	19db      	adds	r3, r3, r7
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d124      	bne.n	80025ca <ConfigFilterList+0xa2>

            filterConfig.FilterIdHigh = (id1 & 0x1FFFFFFF) | (id1 << 31);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	07db      	lsls	r3, r3, #31
 800258a:	431a      	orrs	r2, r3
 800258c:	187b      	adds	r3, r7, r1
 800258e:	601a      	str	r2, [r3, #0]
            filterConfig.FilterIdLow = (id2 & 0x1FFFFFFF) | (id2 << 31);
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	08da      	lsrs	r2, r3, #3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	07db      	lsls	r3, r3, #31
 800259a:	431a      	orrs	r2, r3
 800259c:	187b      	adds	r3, r7, r1
 800259e:	605a      	str	r2, [r3, #4]
            filterConfig.FilterMaskIdHigh = (id3 & 0x1FFFFFFF) | (idType << 31);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	08db      	lsrs	r3, r3, #3
 80025a6:	1902      	adds	r2, r0, r4
 80025a8:	19d2      	adds	r2, r2, r7
 80025aa:	7812      	ldrb	r2, [r2, #0]
 80025ac:	07d2      	lsls	r2, r2, #31
 80025ae:	431a      	orrs	r2, r3
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	609a      	str	r2, [r3, #8]
            filterConfig.FilterMaskIdLow = (id4 & 0x1FFFFFFF) | (idType << 31);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	1902      	adds	r2, r0, r4
 80025bc:	19d2      	adds	r2, r2, r7
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	07d2      	lsls	r2, r2, #31
 80025c2:	431a      	orrs	r2, r3
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	e069      	b.n	800269e <ConfigFilterList+0x176>

        } else {
            filterConfig.FilterIdHigh = id1 & 0x1FFFFFFF;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	08da      	lsrs	r2, r3, #3
 80025d0:	2110      	movs	r1, #16
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	601a      	str	r2, [r3, #0]
            filterConfig.FilterIdLow = id2 & 0x1FFFFFFF;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	08da      	lsrs	r2, r3, #3
 80025dc:	187b      	adds	r3, r7, r1
 80025de:	605a      	str	r2, [r3, #4]
            filterConfig.FilterMaskIdHigh = id3 & 0x1FFFFFFF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	08da      	lsrs	r2, r3, #3
 80025e6:	187b      	adds	r3, r7, r1
 80025e8:	609a      	str	r2, [r3, #8]
            filterConfig.FilterMaskIdLow = id4 & 0x1FFFFFFF;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	08da      	lsrs	r2, r3, #3
 80025f0:	187b      	adds	r3, r7, r1
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	e053      	b.n	800269e <ConfigFilterList+0x176>
        }

    } else {

        filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80025f6:	2110      	movs	r1, #16
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	2200      	movs	r2, #0
 80025fc:	61da      	str	r2, [r3, #28]
        filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80025fe:	187b      	adds	r3, r7, r1
 8002600:	2201      	movs	r2, #1
 8002602:	619a      	str	r2, [r3, #24]

        if (idType == EXT_ID) {
 8002604:	2044      	movs	r0, #68	; 0x44
 8002606:	2408      	movs	r4, #8
 8002608:	1903      	adds	r3, r0, r4
 800260a:	19db      	adds	r3, r3, r7
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d12c      	bne.n	800266c <ConfigFilterList+0x144>
            filterConfig.FilterIdHigh = ((id1 & 0x1FFF) << 5) | (idType << 15);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015b      	lsls	r3, r3, #5
 8002616:	4a27      	ldr	r2, [pc, #156]	; (80026b4 <ConfigFilterList+0x18c>)
 8002618:	4013      	ands	r3, r2
 800261a:	1902      	adds	r2, r0, r4
 800261c:	19d2      	adds	r2, r2, r7
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	03d2      	lsls	r2, r2, #15
 8002622:	431a      	orrs	r2, r3
 8002624:	187b      	adds	r3, r7, r1
 8002626:	601a      	str	r2, [r3, #0]
            filterConfig.FilterIdLow = ((id2 & 0x1FFF) << 5) | (idType << 15);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	015b      	lsls	r3, r3, #5
 800262c:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <ConfigFilterList+0x18c>)
 800262e:	4013      	ands	r3, r2
 8002630:	1902      	adds	r2, r0, r4
 8002632:	19d2      	adds	r2, r2, r7
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	03d2      	lsls	r2, r2, #15
 8002638:	431a      	orrs	r2, r3
 800263a:	187b      	adds	r3, r7, r1
 800263c:	605a      	str	r2, [r3, #4]
            filterConfig.FilterMaskIdHigh = ((id3 & 0x1FFF) << 5) | (idType << 15);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	015b      	lsls	r3, r3, #5
 8002642:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <ConfigFilterList+0x18c>)
 8002644:	4013      	ands	r3, r2
 8002646:	1902      	adds	r2, r0, r4
 8002648:	19d2      	adds	r2, r2, r7
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	03d2      	lsls	r2, r2, #15
 800264e:	431a      	orrs	r2, r3
 8002650:	187b      	adds	r3, r7, r1
 8002652:	609a      	str	r2, [r3, #8]
            filterConfig.FilterMaskIdLow = ((id4 & 0x1FFF) << 5) | (idType << 15);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	015b      	lsls	r3, r3, #5
 8002658:	4a16      	ldr	r2, [pc, #88]	; (80026b4 <ConfigFilterList+0x18c>)
 800265a:	4013      	ands	r3, r2
 800265c:	1902      	adds	r2, r0, r4
 800265e:	19d2      	adds	r2, r2, r7
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	03d2      	lsls	r2, r2, #15
 8002664:	431a      	orrs	r2, r3
 8002666:	187b      	adds	r3, r7, r1
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	e018      	b.n	800269e <ConfigFilterList+0x176>
        } else {
            filterConfig.FilterIdHigh = (id1 & 0x7FF) << 5;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	015b      	lsls	r3, r3, #5
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	0c1a      	lsrs	r2, r3, #16
 8002674:	2110      	movs	r1, #16
 8002676:	187b      	adds	r3, r7, r1
 8002678:	601a      	str	r2, [r3, #0]
            filterConfig.FilterIdLow = (id2 & 0x7FF) << 5;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	015b      	lsls	r3, r3, #5
 800267e:	041b      	lsls	r3, r3, #16
 8002680:	0c1a      	lsrs	r2, r3, #16
 8002682:	187b      	adds	r3, r7, r1
 8002684:	605a      	str	r2, [r3, #4]
            filterConfig.FilterMaskIdHigh = (id3 & 0x7FF) << 5;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	015b      	lsls	r3, r3, #5
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	0c1a      	lsrs	r2, r3, #16
 800268e:	187b      	adds	r3, r7, r1
 8002690:	609a      	str	r2, [r3, #8]
            filterConfig.FilterMaskIdLow = (id4 & 0x7FF) << 5;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	015b      	lsls	r3, r3, #5
 8002696:	041b      	lsls	r3, r3, #16
 8002698:	0c1a      	lsrs	r2, r3, #16
 800269a:	187b      	adds	r3, r7, r1
 800269c:	60da      	str	r2, [r3, #12]
        }
    }

    HAL_CAN_ConfigFilter(&hcan, &filterConfig);
 800269e:	2310      	movs	r3, #16
 80026a0:	18fa      	adds	r2, r7, r3
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <ConfigFilterList+0x190>)
 80026a4:	0011      	movs	r1, r2
 80026a6:	0018      	movs	r0, r3
 80026a8:	f001 fd06 	bl	80040b8 <HAL_CAN_ConfigFilter>

   // return (HAL_CAN_ConfigFilter(&hcan, &filterConfig) == HAL_OK) ? false : true;
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b00f      	add	sp, #60	; 0x3c
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	0003ffe0 	.word	0x0003ffe0
 80026b8:	200002a0 	.word	0x200002a0

080026bc <InitFilterList>:

void InitFilterList(uint32_t *idList, uint8_t numFilters, uint8_t filterScale)
{
 80026bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026be:	b08f      	sub	sp, #60	; 0x3c
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	0008      	movs	r0, r1
 80026c6:	0011      	movs	r1, r2
 80026c8:	1cfb      	adds	r3, r7, #3
 80026ca:	1c02      	adds	r2, r0, #0
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	1cbb      	adds	r3, r7, #2
 80026d0:	1c0a      	adds	r2, r1, #0
 80026d2:	701a      	strb	r2, [r3, #0]

	//Como o protocolo é simples, não foi adicionada a o possibilidade de utilização com EXTID (id com 29 bits)
	uint16_t filterBankCounter = 0;
 80026d4:	2326      	movs	r3, #38	; 0x26
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	2200      	movs	r2, #0
 80026da:	801a      	strh	r2, [r3, #0]
	uint8_t maxFilterBanks = FILTER_MAX_NUM; //STM32F0 tem somente uma interface CAN assim tendo apenas 14 filter banks
 80026dc:	211f      	movs	r1, #31
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	220e      	movs	r2, #14
 80026e2:	701a      	strb	r2, [r3, #0]
	uint32_t id, id1, id2, id3, id4 = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]


	if (numFilters > maxFilterBanks)
 80026e8:	1cfa      	adds	r2, r7, #3
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d903      	bls.n	80026fc <InitFilterList+0x40>
	{
		numFilters = maxFilterBanks;
 80026f4:	1cfb      	adds	r3, r7, #3
 80026f6:	187a      	adds	r2, r7, r1
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	701a      	strb	r2, [r3, #0]
	}


	if (filterScale == FILTER_TYEPE_32) //Utilizando o registrados em 32bits
 80026fc:	1cbb      	adds	r3, r7, #2
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d135      	bne.n	8002770 <InitFilterList+0xb4>
	{
		for (id = 0; id < numFilters && filterBankCounter < maxFilterBanks; id += 2)
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	e023      	b.n	8002752 <InitFilterList+0x96>
		{
			id1 = idList[id];
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	18d3      	adds	r3, r2, r3
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	617b      	str	r3, [r7, #20]
			id2 = idList[id + 1];
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	3301      	adds	r3, #1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	18d3      	adds	r3, r2, r3
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	613b      	str	r3, [r7, #16]
			ConfigFilterList(id1, id2, 0x0000, 0x0000, filterBankCounter, STD_ID, filterScale); // considerar sómente o ID1 e ID2
 8002724:	2426      	movs	r4, #38	; 0x26
 8002726:	193b      	adds	r3, r7, r4
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	6939      	ldr	r1, [r7, #16]
 800272c:	6978      	ldr	r0, [r7, #20]
 800272e:	1cba      	adds	r2, r7, #2
 8002730:	7812      	ldrb	r2, [r2, #0]
 8002732:	9202      	str	r2, [sp, #8]
 8002734:	2200      	movs	r2, #0
 8002736:	9201      	str	r2, [sp, #4]
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2300      	movs	r3, #0
 800273c:	2200      	movs	r2, #0
 800273e:	f7ff fef3 	bl	8002528 <ConfigFilterList>
			filterBankCounter++;
 8002742:	193b      	adds	r3, r7, r4
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	193b      	adds	r3, r7, r4
 8002748:	3201      	adds	r2, #1
 800274a:	801a      	strh	r2, [r3, #0]
		for (id = 0; id < numFilters && filterBankCounter < maxFilterBanks; id += 2)
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	3302      	adds	r3, #2
 8002750:	623b      	str	r3, [r7, #32]
 8002752:	1cfb      	adds	r3, r7, #3
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	6a3a      	ldr	r2, [r7, #32]
 8002758:	429a      	cmp	r2, r3
 800275a:	d24e      	bcs.n	80027fa <InitFilterList+0x13e>
 800275c:	231f      	movs	r3, #31
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	2226      	movs	r2, #38	; 0x26
 8002766:	18ba      	adds	r2, r7, r2
 8002768:	8812      	ldrh	r2, [r2, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d3cd      	bcc.n	800270a <InitFilterList+0x4e>
			id4 = idList[id + 3];
			ConfigFilterList(id1, id2, id3, id4, filterBankCounter, STD_ID, filterScale);
			filterBankCounter++;
		}
	}
}
 800276e:	e044      	b.n	80027fa <InitFilterList+0x13e>
		for (id = 0; id < numFilters && filterBankCounter < maxFilterBanks;id += 4)
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
 8002774:	e033      	b.n	80027de <InitFilterList+0x122>
			id1 = idList[id];
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	18d3      	adds	r3, r2, r3
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	617b      	str	r3, [r7, #20]
			id2 = idList[id + 1];
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	3301      	adds	r3, #1
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	18d3      	adds	r3, r2, r3
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	613b      	str	r3, [r7, #16]
			id3 = idList[id + 2];
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	3302      	adds	r3, #2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	18d3      	adds	r3, r2, r3
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
			id4 = idList[id + 3];
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	3303      	adds	r3, #3
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	18d3      	adds	r3, r2, r3
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61bb      	str	r3, [r7, #24]
			ConfigFilterList(id1, id2, id3, id4, filterBankCounter, STD_ID, filterScale);
 80027ac:	2626      	movs	r6, #38	; 0x26
 80027ae:	19bb      	adds	r3, r7, r6
 80027b0:	881b      	ldrh	r3, [r3, #0]
 80027b2:	69bd      	ldr	r5, [r7, #24]
 80027b4:	68fc      	ldr	r4, [r7, #12]
 80027b6:	6939      	ldr	r1, [r7, #16]
 80027b8:	6978      	ldr	r0, [r7, #20]
 80027ba:	1cba      	adds	r2, r7, #2
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	9202      	str	r2, [sp, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	9201      	str	r2, [sp, #4]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	002b      	movs	r3, r5
 80027c8:	0022      	movs	r2, r4
 80027ca:	f7ff fead 	bl	8002528 <ConfigFilterList>
			filterBankCounter++;
 80027ce:	19bb      	adds	r3, r7, r6
 80027d0:	881a      	ldrh	r2, [r3, #0]
 80027d2:	19bb      	adds	r3, r7, r6
 80027d4:	3201      	adds	r2, #1
 80027d6:	801a      	strh	r2, [r3, #0]
		for (id = 0; id < numFilters && filterBankCounter < maxFilterBanks;id += 4)
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	3304      	adds	r3, #4
 80027dc:	623b      	str	r3, [r7, #32]
 80027de:	1cfb      	adds	r3, r7, #3
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	6a3a      	ldr	r2, [r7, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d208      	bcs.n	80027fa <InitFilterList+0x13e>
 80027e8:	231f      	movs	r3, #31
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2226      	movs	r2, #38	; 0x26
 80027f2:	18ba      	adds	r2, r7, r2
 80027f4:	8812      	ldrh	r2, [r2, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d3bd      	bcc.n	8002776 <InitFilterList+0xba>
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	b00b      	add	sp, #44	; 0x2c
 8002800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002804 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	0018      	movs	r0, r3
 800280e:	230c      	movs	r3, #12
 8002810:	001a      	movs	r2, r3
 8002812:	2100      	movs	r1, #0
 8002814:	f005 fe17 	bl	8008446 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002818:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <MX_ADC_Init+0xe0>)
 800281a:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <MX_ADC_Init+0xe4>)
 800281c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002820:	2200      	movs	r2, #0
 8002822:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002824:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800282a:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <MX_ADC_Init+0xe0>)
 800282c:	2200      	movs	r2, #0
 800282e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002832:	2201      	movs	r2, #1
 8002834:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002836:	4b2b      	ldr	r3, [pc, #172]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002838:	2204      	movs	r2, #4
 800283a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800283c:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <MX_ADC_Init+0xe0>)
 800283e:	2200      	movs	r2, #0
 8002840:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002842:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002844:	2200      	movs	r2, #0
 8002846:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002848:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <MX_ADC_Init+0xe0>)
 800284a:	2201      	movs	r2, #1
 800284c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800284e:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002850:	2200      	movs	r2, #0
 8002852:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002856:	22c2      	movs	r2, #194	; 0xc2
 8002858:	32ff      	adds	r2, #255	; 0xff
 800285a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800285c:	4b21      	ldr	r3, [pc, #132]	; (80028e4 <MX_ADC_Init+0xe0>)
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002864:	2224      	movs	r2, #36	; 0x24
 8002866:	2100      	movs	r1, #0
 8002868:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800286a:	4b1e      	ldr	r3, [pc, #120]	; (80028e4 <MX_ADC_Init+0xe0>)
 800286c:	2201      	movs	r2, #1
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002870:	4b1c      	ldr	r3, [pc, #112]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fe8a 	bl	800358c <HAL_ADC_Init>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d001      	beq.n	8002880 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800287c:	f000 fccc 	bl	8003218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	2280      	movs	r2, #128	; 0x80
 800288a:	0152      	lsls	r2, r2, #5
 800288c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	2207      	movs	r2, #7
 8002892:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002894:	1d3a      	adds	r2, r7, #4
 8002896:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <MX_ADC_Init+0xe0>)
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f001 f850 	bl	8003940 <HAL_ADC_ConfigChannel>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d001      	beq.n	80028a8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80028a4:	f000 fcb8 	bl	8003218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028ae:	1d3a      	adds	r2, r7, #4
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <MX_ADC_Init+0xe0>)
 80028b2:	0011      	movs	r1, r2
 80028b4:	0018      	movs	r0, r3
 80028b6:	f001 f843 	bl	8003940 <HAL_ADC_ConfigChannel>
 80028ba:	1e03      	subs	r3, r0, #0
 80028bc:	d001      	beq.n	80028c2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80028be:	f000 fcab 	bl	8003218 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80028c8:	1d3a      	adds	r2, r7, #4
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <MX_ADC_Init+0xe0>)
 80028cc:	0011      	movs	r1, r2
 80028ce:	0018      	movs	r0, r3
 80028d0:	f001 f836 	bl	8003940 <HAL_ADC_ConfigChannel>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d001      	beq.n	80028dc <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80028d8:	f000 fc9e 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000210 	.word	0x20000210
 80028e8:	40012400 	.word	0x40012400

080028ec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80028ec:	b590      	push	{r4, r7, lr}
 80028ee:	b08b      	sub	sp, #44	; 0x2c
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f4:	2414      	movs	r4, #20
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	0018      	movs	r0, r3
 80028fa:	2314      	movs	r3, #20
 80028fc:	001a      	movs	r2, r3
 80028fe:	2100      	movs	r1, #0
 8002900:	f005 fda1 	bl	8008446 <memset>
  if(adcHandle->Instance==ADC1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a2d      	ldr	r2, [pc, #180]	; (80029c0 <HAL_ADC_MspInit+0xd4>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d153      	bne.n	80029b6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800290e:	4b2d      	ldr	r3, [pc, #180]	; (80029c4 <HAL_ADC_MspInit+0xd8>)
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	4b2c      	ldr	r3, [pc, #176]	; (80029c4 <HAL_ADC_MspInit+0xd8>)
 8002914:	2180      	movs	r1, #128	; 0x80
 8002916:	0089      	lsls	r1, r1, #2
 8002918:	430a      	orrs	r2, r1
 800291a:	619a      	str	r2, [r3, #24]
 800291c:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_ADC_MspInit+0xd8>)
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	2380      	movs	r3, #128	; 0x80
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800292a:	4b26      	ldr	r3, [pc, #152]	; (80029c4 <HAL_ADC_MspInit+0xd8>)
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	4b25      	ldr	r3, [pc, #148]	; (80029c4 <HAL_ADC_MspInit+0xd8>)
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	0289      	lsls	r1, r1, #10
 8002934:	430a      	orrs	r2, r1
 8002936:	615a      	str	r2, [r3, #20]
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_ADC_MspInit+0xd8>)
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	029b      	lsls	r3, r3, #10
 8002940:	4013      	ands	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002946:	193b      	adds	r3, r7, r4
 8002948:	2207      	movs	r2, #7
 800294a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800294c:	193b      	adds	r3, r7, r4
 800294e:	2203      	movs	r2, #3
 8002950:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	193b      	adds	r3, r7, r4
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002958:	193a      	adds	r2, r7, r4
 800295a:	2390      	movs	r3, #144	; 0x90
 800295c:	05db      	lsls	r3, r3, #23
 800295e:	0011      	movs	r1, r2
 8002960:	0018      	movs	r0, r3
 8002962:	f001 ff51 	bl	8004808 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 8002968:	4a18      	ldr	r2, [pc, #96]	; (80029cc <HAL_ADC_MspInit+0xe0>)
 800296a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 800296e:	2200      	movs	r2, #0
 8002970:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 800297a:	2280      	movs	r2, #128	; 0x80
 800297c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	0052      	lsls	r2, r2, #1
 8002984:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	00d2      	lsls	r2, r2, #3
 800298c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 8002990:	2220      	movs	r2, #32
 8002992:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 8002996:	2200      	movs	r2, #0
 8002998:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800299a:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 800299c:	0018      	movs	r0, r3
 800299e:	f001 fd9b 	bl	80044d8 <HAL_DMA_Init>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d001      	beq.n	80029aa <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80029a6:	f000 fc37 	bl	8003218 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <HAL_ADC_MspInit+0xdc>)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	46bd      	mov	sp, r7
 80029ba:	b00b      	add	sp, #44	; 0x2c
 80029bc:	bd90      	pop	{r4, r7, pc}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	40012400 	.word	0x40012400
 80029c4:	40021000 	.word	0x40021000
 80029c8:	20000250 	.word	0x20000250
 80029cc:	40020008 	.word	0x40020008

080029d0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <MX_CAN_Init+0x9c>)
 80029d6:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <MX_CAN_Init+0xa0>)
 80029d8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80029da:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <MX_CAN_Init+0x9c>)
 80029dc:	2210      	movs	r2, #16
 80029de:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <MX_CAN_Init+0x9c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80029e6:	4b21      	ldr	r3, [pc, #132]	; (8002a6c <MX_CAN_Init+0x9c>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80029ec:	4b1f      	ldr	r3, [pc, #124]	; (8002a6c <MX_CAN_Init+0x9c>)
 80029ee:	22c0      	movs	r2, #192	; 0xc0
 80029f0:	0292      	lsls	r2, r2, #10
 80029f2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <MX_CAN_Init+0x9c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80029fa:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <MX_CAN_Init+0x9c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8002a0c:	4b17      	ldr	r3, [pc, #92]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002a12:	4b16      	ldr	r3, [pc, #88]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a20:	0018      	movs	r0, r3
 8002a22:	f001 fa4b 	bl	8003ebc <HAL_CAN_Init>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d001      	beq.n	8002a2e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8002a2a:	f000 fbf5 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  LoadFilterList(&filterList);
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <MX_CAN_Init+0xa4>)
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7ff fd61 	bl	80024f8 <LoadFilterList>
   InitFilterList(filterList.FilterIdList, CANID_COUNT , FILTER_TYPE_16);
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <MX_CAN_Init+0xa4>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2103      	movs	r1, #3
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	f7ff fe3d 	bl	80026bc <InitFilterList>



   /*##-3- Start the CAN peripheral ###########################################*/
      if (HAL_CAN_Start(&hcan) != HAL_OK)
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a44:	0018      	movs	r0, r3
 8002a46:	f001 fc29 	bl	800429c <HAL_CAN_Start>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_CAN_Init+0x82>
      {
        /* Start Error */
        Error_Handler();
 8002a4e:	f000 fbe3 	bl	8003218 <Error_Handler>
      /*##-4- Start the Transmission process #####################################*/

        // CAN_Write_Packet(TxData, CAN_RTR_DATA, (uint16_t *) 8);

       /*##-4- Activate CAN RX notification #######################################*/
 	HAL_CAN_Start(&hcan);
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a54:	0018      	movs	r0, r3
 8002a56:	f001 fc21 	bl	800429c <HAL_CAN_Start>
 	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <MX_CAN_Init+0x9c>)
 8002a5c:	2102      	movs	r1, #2
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f001 fc62 	bl	8004328 <HAL_CAN_ActivateNotification>



  /* USER CODE END CAN_Init 2 */

}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			; (mov r8, r8)
 8002a6c:	200002a0 	.word	0x200002a0
 8002a70:	40006400 	.word	0x40006400
 8002a74:	20000294 	.word	0x20000294

08002a78 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002a78:	b590      	push	{r4, r7, lr}
 8002a7a:	b08b      	sub	sp, #44	; 0x2c
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	2414      	movs	r4, #20
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	0018      	movs	r0, r3
 8002a86:	2314      	movs	r3, #20
 8002a88:	001a      	movs	r2, r3
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f005 fcdb 	bl	8008446 <memset>
  if(canHandle->Instance==CAN)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_CAN_MspInit+0x94>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d133      	bne.n	8002b02 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <HAL_CAN_MspInit+0x98>)
 8002a9c:	69da      	ldr	r2, [r3, #28]
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <HAL_CAN_MspInit+0x98>)
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	0489      	lsls	r1, r1, #18
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	61da      	str	r2, [r3, #28]
 8002aa8:	4b19      	ldr	r3, [pc, #100]	; (8002b10 <HAL_CAN_MspInit+0x98>)
 8002aaa:	69da      	ldr	r2, [r3, #28]
 8002aac:	2380      	movs	r3, #128	; 0x80
 8002aae:	049b      	lsls	r3, r3, #18
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <HAL_CAN_MspInit+0x98>)
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <HAL_CAN_MspInit+0x98>)
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	0289      	lsls	r1, r1, #10
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	615a      	str	r2, [r3, #20]
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <HAL_CAN_MspInit+0x98>)
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	029b      	lsls	r3, r3, #10
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	22c0      	movs	r2, #192	; 0xc0
 8002ad6:	0152      	lsls	r2, r2, #5
 8002ad8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ada:	0021      	movs	r1, r4
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2202      	movs	r2, #2
 8002ae0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2203      	movs	r2, #3
 8002aec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	2204      	movs	r2, #4
 8002af2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af4:	187a      	adds	r2, r7, r1
 8002af6:	2390      	movs	r3, #144	; 0x90
 8002af8:	05db      	lsls	r3, r3, #23
 8002afa:	0011      	movs	r1, r2
 8002afc:	0018      	movs	r0, r3
 8002afe:	f001 fe83 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b00b      	add	sp, #44	; 0x2c
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	40006400 	.word	0x40006400
 8002b10:	40021000 	.word	0x40021000

08002b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b1a:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <MX_DMA_Init+0x38>)
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <MX_DMA_Init+0x38>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	430a      	orrs	r2, r1
 8002b24:	615a      	str	r2, [r3, #20]
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_DMA_Init+0x38>)
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	607b      	str	r3, [r7, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2103      	movs	r1, #3
 8002b36:	2009      	movs	r0, #9
 8002b38:	f001 fca8 	bl	800448c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b3c:	2009      	movs	r0, #9
 8002b3e:	f001 fcba 	bl	80044b6 <HAL_NVIC_EnableIRQ>

}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	40021000 	.word	0x40021000

08002b50 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue_can_receive */
  queue_can_receiveHandle = osMessageQueueNew (4, sizeof(CanPacket), &queue_can_receive_attributes);
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <MX_FREERTOS_Init+0x8c>)
 8002b56:	001a      	movs	r2, r3
 8002b58:	210a      	movs	r1, #10
 8002b5a:	2004      	movs	r0, #4
 8002b5c:	f003 fa64 	bl	8006028 <osMessageQueueNew>
 8002b60:	0002      	movs	r2, r0
 8002b62:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <MX_FREERTOS_Init+0x90>)
 8002b64:	601a      	str	r2, [r3, #0]

  /* creation of queue_can_send */
  queue_can_sendHandle = osMessageQueueNew (4, sizeof(CanPacket), &queue_can_send_attributes);
 8002b66:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <MX_FREERTOS_Init+0x94>)
 8002b68:	001a      	movs	r2, r3
 8002b6a:	210a      	movs	r1, #10
 8002b6c:	2004      	movs	r0, #4
 8002b6e:	f003 fa5b 	bl	8006028 <osMessageQueueNew>
 8002b72:	0002      	movs	r2, r0
 8002b74:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <MX_FREERTOS_Init+0x98>)
 8002b76:	601a      	str	r2, [r3, #0]

  /* creation of queue_process_data */
  queue_process_dataHandle = osMessageQueueNew (4, sizeof(SensorData), &queue_process_data_attributes);
 8002b78:	4a1c      	ldr	r2, [pc, #112]	; (8002bec <MX_FREERTOS_Init+0x9c>)
 8002b7a:	23c0      	movs	r3, #192	; 0xc0
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	0019      	movs	r1, r3
 8002b80:	2004      	movs	r0, #4
 8002b82:	f003 fa51 	bl	8006028 <osMessageQueueNew>
 8002b86:	0002      	movs	r2, r0
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <MX_FREERTOS_Init+0xa0>)
 8002b8a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002b8c:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <MX_FREERTOS_Init+0xa4>)
 8002b8e:	4b1a      	ldr	r3, [pc, #104]	; (8002bf8 <MX_FREERTOS_Init+0xa8>)
 8002b90:	2100      	movs	r1, #0
 8002b92:	0018      	movs	r0, r3
 8002b94:	f003 f978 	bl	8005e88 <osThreadNew>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <MX_FREERTOS_Init+0xac>)
 8002b9c:	601a      	str	r2, [r3, #0]

  /* creation of ProcessCAN_MSG_ */
  ProcessCAN_MSG_Handle = osThreadNew(ProcessCAN_MSG, NULL, &ProcessCAN_MSG__attributes);
 8002b9e:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <MX_FREERTOS_Init+0xb0>)
 8002ba0:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <MX_FREERTOS_Init+0xb4>)
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f003 f96f 	bl	8005e88 <osThreadNew>
 8002baa:	0002      	movs	r2, r0
 8002bac:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <MX_FREERTOS_Init+0xb8>)
 8002bae:	601a      	str	r2, [r3, #0]

  /* creation of SendCAN_MSG_ */
  SendCAN_MSG_Handle = osThreadNew(SendCAN_MSG, NULL, &SendCAN_MSG__attributes);
 8002bb0:	4a16      	ldr	r2, [pc, #88]	; (8002c0c <MX_FREERTOS_Init+0xbc>)
 8002bb2:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <MX_FREERTOS_Init+0xc0>)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f003 f966 	bl	8005e88 <osThreadNew>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <MX_FREERTOS_Init+0xc4>)
 8002bc0:	601a      	str	r2, [r3, #0]

  /* creation of processDatatask */
  processDatataskHandle = osThreadNew(Process_data_task, NULL, &processDatatask_attributes);
 8002bc2:	4a15      	ldr	r2, [pc, #84]	; (8002c18 <MX_FREERTOS_Init+0xc8>)
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <MX_FREERTOS_Init+0xcc>)
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f003 f95d 	bl	8005e88 <osThreadNew>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <MX_FREERTOS_Init+0xd0>)
 8002bd2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002bd4:	46c0      	nop			; (mov r8, r8)
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	080089dc 	.word	0x080089dc
 8002be0:	200002d8 	.word	0x200002d8
 8002be4:	080089f4 	.word	0x080089f4
 8002be8:	200002dc 	.word	0x200002dc
 8002bec:	08008a0c 	.word	0x08008a0c
 8002bf0:	200002e0 	.word	0x200002e0
 8002bf4:	0800894c 	.word	0x0800894c
 8002bf8:	08002c25 	.word	0x08002c25
 8002bfc:	200002c8 	.word	0x200002c8
 8002c00:	08008970 	.word	0x08008970
 8002c04:	08002e05 	.word	0x08002e05
 8002c08:	200002cc 	.word	0x200002cc
 8002c0c:	08008994 	.word	0x08008994
 8002c10:	08002e41 	.word	0x08002e41
 8002c14:	200002d0 	.word	0x200002d0
 8002c18:	080089b8 	.word	0x080089b8
 8002c1c:	08002e7d 	.word	0x08002e7d
 8002c20:	200002d4 	.word	0x200002d4

08002c24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f003 f9d3 	bl	8005fd8 <osDelay>
 8002c32:	e7fb      	b.n	8002c2c <StartDefaultTask+0x8>

08002c34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3a:	240c      	movs	r4, #12
 8002c3c:	193b      	adds	r3, r7, r4
 8002c3e:	0018      	movs	r0, r3
 8002c40:	2314      	movs	r3, #20
 8002c42:	001a      	movs	r2, r3
 8002c44:	2100      	movs	r1, #0
 8002c46:	f005 fbfe 	bl	8008446 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	0309      	lsls	r1, r1, #12
 8002c54:	430a      	orrs	r2, r1
 8002c56:	615a      	str	r2, [r3, #20]
 8002c58:	4b29      	ldr	r3, [pc, #164]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	4013      	ands	r3, r2
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	03c9      	lsls	r1, r1, #15
 8002c70:	430a      	orrs	r2, r1
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	03db      	lsls	r3, r3, #15
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	0289      	lsls	r1, r1, #10
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	615a      	str	r2, [r3, #20]
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <MX_GPIO_Init+0xcc>)
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c9e:	2390      	movs	r3, #144	; 0x90
 8002ca0:	05db      	lsls	r3, r3, #23
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2120      	movs	r1, #32
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f001 ff26 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002cac:	193b      	adds	r3, r7, r4
 8002cae:	2280      	movs	r2, #128	; 0x80
 8002cb0:	0192      	lsls	r2, r2, #6
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002cb4:	193b      	adds	r3, r7, r4
 8002cb6:	2284      	movs	r2, #132	; 0x84
 8002cb8:	0392      	lsls	r2, r2, #14
 8002cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	193b      	adds	r3, r7, r4
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	; (8002d04 <MX_GPIO_Init+0xd0>)
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	0010      	movs	r0, r2
 8002cca:	f001 fd9d 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002cce:	0021      	movs	r1, r4
 8002cd0:	187b      	adds	r3, r7, r1
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	2201      	movs	r2, #1
 8002cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	187a      	adds	r2, r7, r1
 8002cea:	2390      	movs	r3, #144	; 0x90
 8002cec:	05db      	lsls	r3, r3, #23
 8002cee:	0011      	movs	r1, r2
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f001 fd89 	bl	8004808 <HAL_GPIO_Init>

}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b009      	add	sp, #36	; 0x24
 8002cfc:	bd90      	pop	{r4, r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	40021000 	.word	0x40021000
 8002d04:	48000800 	.word	0x48000800

08002d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d0c:	f000 fc0e 	bl	800352c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d10:	f000 f826 	bl	8002d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d14:	f7ff ff8e 	bl	8002c34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d18:	f7ff fefc 	bl	8002b14 <MX_DMA_Init>
  MX_ADC_Init();
 8002d1c:	f7ff fd72 	bl	8002804 <MX_ADC_Init>
  MX_CAN_Init();
 8002d20:	f7ff fe56 	bl	80029d0 <MX_CAN_Init>
  MX_TIM2_Init();
 8002d24:	f000 fb5e 	bl	80033e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8002d28:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <main+0x4c>)
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f002 fc6e 	bl	800560c <HAL_TIM_Base_Start_IT>

	HAL_ADCEx_Calibration_Start(&hadc);
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <main+0x50>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f001 f81a 	bl	8003d6c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc, &adcint, 3);
 8002d38:	4908      	ldr	r1, [pc, #32]	; (8002d5c <main+0x54>)
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <main+0x50>)
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 fd64 	bl	800380c <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002d44:	f003 f846 	bl	8005dd4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002d48:	f7ff ff02 	bl	8002b50 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002d4c:	f003 f86e 	bl	8005e2c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <main+0x48>
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	200004b8 	.word	0x200004b8
 8002d58:	20000210 	.word	0x20000210
 8002d5c:	200002e4 	.word	0x200002e4

08002d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b093      	sub	sp, #76	; 0x4c
 8002d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d66:	2414      	movs	r4, #20
 8002d68:	193b      	adds	r3, r7, r4
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	2334      	movs	r3, #52	; 0x34
 8002d6e:	001a      	movs	r2, r3
 8002d70:	2100      	movs	r1, #0
 8002d72:	f005 fb68 	bl	8008446 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	0018      	movs	r0, r3
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f005 fb61 	bl	8008446 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8002d84:	0021      	movs	r1, r4
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	2212      	movs	r2, #18
 8002d8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2201      	movs	r2, #1
 8002d90:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	2201      	movs	r2, #1
 8002d96:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2210      	movs	r2, #16
 8002da2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2202      	movs	r2, #2
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2280      	movs	r2, #128	; 0x80
 8002dae:	0212      	lsls	r2, r2, #8
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002db2:	187b      	adds	r3, r7, r1
 8002db4:	22a0      	movs	r2, #160	; 0xa0
 8002db6:	0392      	lsls	r2, r2, #14
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8002dba:	187b      	adds	r3, r7, r1
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f001 feb6 	bl	8004b34 <HAL_RCC_OscConfig>
 8002dc8:	1e03      	subs	r3, r0, #0
 8002dca:	d001      	beq.n	8002dd0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8002dcc:	f000 fa24 	bl	8003218 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	2202      	movs	r2, #2
 8002dda:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	2200      	movs	r2, #0
 8002de0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2200      	movs	r2, #0
 8002de6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	2101      	movs	r1, #1
 8002dec:	0018      	movs	r0, r3
 8002dee:	f002 fa27 	bl	8005240 <HAL_RCC_ClockConfig>
 8002df2:	1e03      	subs	r3, r0, #0
 8002df4:	d001      	beq.n	8002dfa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002df6:	f000 fa0f 	bl	8003218 <Error_Handler>
  }
}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b013      	add	sp, #76	; 0x4c
 8002e00:	bd90      	pop	{r4, r7, pc}
	...

08002e04 <ProcessCAN_MSG>:

/* USER CODE BEGIN 4 */

void ProcessCAN_MSG(void *argument)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ProcessCAN_MSG */
	CanPacket canMSG = {0};
 8002e0c:	2308      	movs	r3, #8
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	0018      	movs	r0, r3
 8002e12:	230a      	movs	r3, #10
 8002e14:	001a      	movs	r2, r3
 8002e16:	2100      	movs	r1, #0
 8002e18:	f005 fb15 	bl	8008446 <memset>
  /* Infinite loop */
  for(;;)
  {
	BaseType_t xStatus = xQueueReceive(queue_can_receiveHandle, &canMSG, portMAX_DELAY);
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <ProcessCAN_MSG+0x38>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2201      	movs	r2, #1
 8002e22:	4252      	negs	r2, r2
 8002e24:	2108      	movs	r1, #8
 8002e26:	1879      	adds	r1, r7, r1
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f003 fc8d 	bl	8006748 <xQueueReceive>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	617b      	str	r3, [r7, #20]
	if (xStatus == pdPASS)
	{
		// conseguiu tirar da fila

	}
    osDelay(1);
 8002e32:	2001      	movs	r0, #1
 8002e34:	f003 f8d0 	bl	8005fd8 <osDelay>
  {
 8002e38:	e7f0      	b.n	8002e1c <ProcessCAN_MSG+0x18>
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	200002d8 	.word	0x200002d8

08002e40 <SendCAN_MSG>:
  }
  /* USER CODE END ProcessCAN_MSG */
}

void SendCAN_MSG(void *argument)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SendCAN_MSG */
	CanPacket canMSG = {0};
 8002e48:	2308      	movs	r3, #8
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	230a      	movs	r3, #10
 8002e50:	001a      	movs	r2, r3
 8002e52:	2100      	movs	r1, #0
 8002e54:	f005 faf7 	bl	8008446 <memset>
  /* Infinite loop */
  for(;;)
  {
	BaseType_t xStatus = xQueueReceive(queue_can_sendHandle, &canMSG, portMAX_DELAY);
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <SendCAN_MSG+0x38>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	4252      	negs	r2, r2
 8002e60:	2108      	movs	r1, #8
 8002e62:	1879      	adds	r1, r7, r1
 8002e64:	0018      	movs	r0, r3
 8002e66:	f003 fc6f 	bl	8006748 <xQueueReceive>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	617b      	str	r3, [r7, #20]
	if (xStatus == pdPASS)
	{
		// conseguiu tirar da fila

	}
    osDelay(1);
 8002e6e:	2001      	movs	r0, #1
 8002e70:	f003 f8b2 	bl	8005fd8 <osDelay>
  {
 8002e74:	e7f0      	b.n	8002e58 <SendCAN_MSG+0x18>
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	200002dc 	.word	0x200002dc

08002e7c <Process_data_task>:
  /* USER CODE END SendCAN_MSG */
}


void Process_data_task(void *argument)
{
 8002e7c:	b5b0      	push	{r4, r5, r7, lr}
 8002e7e:	4c20      	ldr	r4, [pc, #128]	; (8002f00 <Process_data_task+0x84>)
 8002e80:	44a5      	add	sp, r4
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Process_data_task */
	SensorData sensorData = {0};
 8002e86:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <Process_data_task+0x88>)
 8002e88:	2493      	movs	r4, #147	; 0x93
 8002e8a:	00e4      	lsls	r4, r4, #3
 8002e8c:	191b      	adds	r3, r3, r4
 8002e8e:	19db      	adds	r3, r3, r7
 8002e90:	0018      	movs	r0, r3
 8002e92:	23c0      	movs	r3, #192	; 0xc0
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	001a      	movs	r2, r3
 8002e98:	2100      	movs	r1, #0
 8002e9a:	f005 fad4 	bl	8008446 <memset>
	Data data;
	float RMS[3] = {0};
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <Process_data_task+0x8c>)
 8002ea0:	191b      	adds	r3, r3, r4
 8002ea2:	19db      	adds	r3, r3, r7
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	230c      	movs	r3, #12
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f005 facb 	bl	8008446 <memset>
  /* Infinite loop */
  for(;;)
  {
	BaseType_t xStatus = xQueueReceive(queue_process_dataHandle, &sensorData, portMAX_DELAY);
 8002eb0:	4b16      	ldr	r3, [pc, #88]	; (8002f0c <Process_data_task+0x90>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4252      	negs	r2, r2
 8002eb8:	24c5      	movs	r4, #197	; 0xc5
 8002eba:	00a4      	lsls	r4, r4, #2
 8002ebc:	1939      	adds	r1, r7, r4
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f003 fc42 	bl	8006748 <xQueueReceive>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <Process_data_task+0x94>)
 8002ec8:	18b9      	adds	r1, r7, r2
 8002eca:	600b      	str	r3, [r1, #0]
	if (xStatus == pdPASS)
 8002ecc:	18bb      	adds	r3, r7, r2
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d111      	bne.n	8002ef8 <Process_data_task+0x7c>
	{
			// conseguiu tirar da fila
		calculate_analog(&data, &sensorData);
 8002ed4:	193a      	adds	r2, r7, r4
 8002ed6:	2514      	movs	r5, #20
 8002ed8:	197b      	adds	r3, r7, r5
 8002eda:	0011      	movs	r1, r2
 8002edc:	0018      	movs	r0, r3
 8002ede:	f000 f819 	bl	8002f14 <calculate_analog>
		calculate_RMS(RMS, &data);
 8002ee2:	197a      	adds	r2, r7, r5
 8002ee4:	2308      	movs	r3, #8
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	0011      	movs	r1, r2
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 f88c 	bl	8003008 <calculate_RMS>
		calculate_Phase(&sensorData);
 8002ef0:	193b      	adds	r3, r7, r4
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 f91e 	bl	8003134 <calculate_Phase>

	}
    osDelay(1);
 8002ef8:	2001      	movs	r0, #1
 8002efa:	f003 f86d 	bl	8005fd8 <osDelay>
  {
 8002efe:	e7d7      	b.n	8002eb0 <Process_data_task+0x34>
 8002f00:	fffffb68 	.word	0xfffffb68
 8002f04:	fffffe7c 	.word	0xfffffe7c
 8002f08:	fffffb70 	.word	0xfffffb70
 8002f0c:	200002e0 	.word	0x200002e0
 8002f10:	00000494 	.word	0x00000494

08002f14 <calculate_analog>:
	  HAL_Delay(delay);
}


void calculate_analog(Data *data, SensorData *sensorData)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < SAMPLES_PER_TIME; i++)
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	e063      	b.n	8002fec <calculate_analog+0xd8>
	{
		data->sensorData_values[VA][i] = (( sensorData->sensorData_buff[VA][i] * MAX_ADC ) * MAX_ANALOG - OFFSET) * CORRECTION_FACTOR;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	0052      	lsls	r2, r2, #1
 8002f2a:	5ad3      	ldrh	r3, [r2, r3]
 8002f2c:	031b      	lsls	r3, r3, #12
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7ff f9c4 	bl	80022bc <__aeabi_i2d>
 8002f34:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <calculate_analog+0xe8>)
 8002f36:	4b32      	ldr	r3, [pc, #200]	; (8003000 <calculate_analog+0xec>)
 8002f38:	f7fe fba4 	bl	8001684 <__aeabi_dmul>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	000b      	movs	r3, r1
 8002f40:	0010      	movs	r0, r2
 8002f42:	0019      	movs	r1, r3
 8002f44:	2200      	movs	r2, #0
 8002f46:	4b2f      	ldr	r3, [pc, #188]	; (8003004 <calculate_analog+0xf0>)
 8002f48:	f7fe fe08 	bl	8001b5c <__aeabi_dsub>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	000b      	movs	r3, r1
 8002f50:	0010      	movs	r0, r2
 8002f52:	0019      	movs	r1, r3
 8002f54:	f7ff fa2a 	bl	80023ac <__aeabi_d2f>
 8002f58:	1c01      	adds	r1, r0, #0
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	0092      	lsls	r2, r2, #2
 8002f60:	50d1      	str	r1, [r2, r3]
		data->sensorData_values[VB][i] = (( sensorData->sensorData_buff[VB][i] * MAX_ADC ) * MAX_ANALOG - OFFSET) * CORRECTION_FACTOR;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	3240      	adds	r2, #64	; 0x40
 8002f68:	0052      	lsls	r2, r2, #1
 8002f6a:	5ad3      	ldrh	r3, [r2, r3]
 8002f6c:	031b      	lsls	r3, r3, #12
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7ff f9a4 	bl	80022bc <__aeabi_i2d>
 8002f74:	4a21      	ldr	r2, [pc, #132]	; (8002ffc <calculate_analog+0xe8>)
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <calculate_analog+0xec>)
 8002f78:	f7fe fb84 	bl	8001684 <__aeabi_dmul>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	000b      	movs	r3, r1
 8002f80:	0010      	movs	r0, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	2200      	movs	r2, #0
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <calculate_analog+0xf0>)
 8002f88:	f7fe fde8 	bl	8001b5c <__aeabi_dsub>
 8002f8c:	0002      	movs	r2, r0
 8002f8e:	000b      	movs	r3, r1
 8002f90:	0010      	movs	r0, r2
 8002f92:	0019      	movs	r1, r3
 8002f94:	f7ff fa0a 	bl	80023ac <__aeabi_d2f>
 8002f98:	1c01      	adds	r1, r0, #0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	3240      	adds	r2, #64	; 0x40
 8002fa0:	0092      	lsls	r2, r2, #2
 8002fa2:	50d1      	str	r1, [r2, r3]
		data->sensorData_values[VC][i] = (( sensorData->sensorData_buff[VC][i] * MAX_ADC ) * MAX_ANALOG - OFFSET) * CORRECTION_FACTOR;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	3280      	adds	r2, #128	; 0x80
 8002faa:	0052      	lsls	r2, r2, #1
 8002fac:	5ad3      	ldrh	r3, [r2, r3]
 8002fae:	031b      	lsls	r3, r3, #12
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff f983 	bl	80022bc <__aeabi_i2d>
 8002fb6:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <calculate_analog+0xe8>)
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <calculate_analog+0xec>)
 8002fba:	f7fe fb63 	bl	8001684 <__aeabi_dmul>
 8002fbe:	0002      	movs	r2, r0
 8002fc0:	000b      	movs	r3, r1
 8002fc2:	0010      	movs	r0, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <calculate_analog+0xf0>)
 8002fca:	f7fe fdc7 	bl	8001b5c <__aeabi_dsub>
 8002fce:	0002      	movs	r2, r0
 8002fd0:	000b      	movs	r3, r1
 8002fd2:	0010      	movs	r0, r2
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	f7ff f9e9 	bl	80023ac <__aeabi_d2f>
 8002fda:	1c01      	adds	r1, r0, #0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	3280      	adds	r2, #128	; 0x80
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < SAMPLES_PER_TIME; i++)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b3f      	cmp	r3, #63	; 0x3f
 8002ff0:	dd98      	ble.n	8002f24 <calculate_analog+0x10>
	}
}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b004      	add	sp, #16
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	66666666 	.word	0x66666666
 8003000:	400a6666 	.word	0x400a6666
 8003004:	3ff00000 	.word	0x3ff00000

08003008 <calculate_RMS>:

void calculate_RMS(float RMS[], Data *data)
{
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
	float sum_square[3] = {0};
 8003012:	2308      	movs	r3, #8
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	0018      	movs	r0, r3
 8003018:	230c      	movs	r3, #12
 800301a:	001a      	movs	r2, r3
 800301c:	2100      	movs	r1, #0
 800301e:	f005 fa12 	bl	8008446 <memset>

	for (int i = 0; i < SAMPLES_PER_TIME; i++)
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e02c      	b.n	8003082 <calculate_RMS+0x7a>
	{
		sum_square[VA] += data->sensorData_values[VA][i];
 8003028:	2408      	movs	r4, #8
 800302a:	193b      	adds	r3, r7, r4
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	0092      	lsls	r2, r2, #2
 8003034:	58d3      	ldr	r3, [r2, r3]
 8003036:	1c19      	adds	r1, r3, #0
 8003038:	f7fd f930 	bl	800029c <__aeabi_fadd>
 800303c:	1c03      	adds	r3, r0, #0
 800303e:	1c1a      	adds	r2, r3, #0
 8003040:	193b      	adds	r3, r7, r4
 8003042:	601a      	str	r2, [r3, #0]
		sum_square[VB] += data->sensorData_values[VB][i];
 8003044:	193b      	adds	r3, r7, r4
 8003046:	6858      	ldr	r0, [r3, #4]
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	3240      	adds	r2, #64	; 0x40
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	58d3      	ldr	r3, [r2, r3]
 8003052:	1c19      	adds	r1, r3, #0
 8003054:	f7fd f922 	bl	800029c <__aeabi_fadd>
 8003058:	1c03      	adds	r3, r0, #0
 800305a:	1c1a      	adds	r2, r3, #0
 800305c:	193b      	adds	r3, r7, r4
 800305e:	605a      	str	r2, [r3, #4]
	    sum_square[VC] += data->sensorData_values[VC][i];
 8003060:	193b      	adds	r3, r7, r4
 8003062:	6898      	ldr	r0, [r3, #8]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	3280      	adds	r2, #128	; 0x80
 800306a:	0092      	lsls	r2, r2, #2
 800306c:	58d3      	ldr	r3, [r2, r3]
 800306e:	1c19      	adds	r1, r3, #0
 8003070:	f7fd f914 	bl	800029c <__aeabi_fadd>
 8003074:	1c03      	adds	r3, r0, #0
 8003076:	1c1a      	adds	r2, r3, #0
 8003078:	193b      	adds	r3, r7, r4
 800307a:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < SAMPLES_PER_TIME; i++)
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	3301      	adds	r3, #1
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b3f      	cmp	r3, #63	; 0x3f
 8003086:	ddcf      	ble.n	8003028 <calculate_RMS+0x20>
	}
	RMS[VA] = sqrt(sum_square[VA] / SAMPLES_PER_TIME);
 8003088:	2508      	movs	r5, #8
 800308a:	197b      	adds	r3, r7, r5
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2185      	movs	r1, #133	; 0x85
 8003090:	05c9      	lsls	r1, r1, #23
 8003092:	1c18      	adds	r0, r3, #0
 8003094:	f7fd faa0 	bl	80005d8 <__aeabi_fdiv>
 8003098:	1c03      	adds	r3, r0, #0
 800309a:	1c18      	adds	r0, r3, #0
 800309c:	f7ff f93e 	bl	800231c <__aeabi_f2d>
 80030a0:	0002      	movs	r2, r0
 80030a2:	000b      	movs	r3, r1
 80030a4:	0010      	movs	r0, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	f005 faa2 	bl	80085f0 <sqrt>
 80030ac:	0002      	movs	r2, r0
 80030ae:	000b      	movs	r3, r1
 80030b0:	0010      	movs	r0, r2
 80030b2:	0019      	movs	r1, r3
 80030b4:	f7ff f97a 	bl	80023ac <__aeabi_d2f>
 80030b8:	1c02      	adds	r2, r0, #0
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	601a      	str	r2, [r3, #0]
	RMS[VB] = sqrt(sum_square[VB] / SAMPLES_PER_TIME);
 80030be:	197b      	adds	r3, r7, r5
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2185      	movs	r1, #133	; 0x85
 80030c4:	05c9      	lsls	r1, r1, #23
 80030c6:	1c18      	adds	r0, r3, #0
 80030c8:	f7fd fa86 	bl	80005d8 <__aeabi_fdiv>
 80030cc:	1c03      	adds	r3, r0, #0
 80030ce:	1c18      	adds	r0, r3, #0
 80030d0:	f7ff f924 	bl	800231c <__aeabi_f2d>
 80030d4:	0002      	movs	r2, r0
 80030d6:	000b      	movs	r3, r1
 80030d8:	0010      	movs	r0, r2
 80030da:	0019      	movs	r1, r3
 80030dc:	f005 fa88 	bl	80085f0 <sqrt>
 80030e0:	0002      	movs	r2, r0
 80030e2:	000b      	movs	r3, r1
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	1d0c      	adds	r4, r1, #4
 80030e8:	0010      	movs	r0, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	f7ff f95e 	bl	80023ac <__aeabi_d2f>
 80030f0:	1c03      	adds	r3, r0, #0
 80030f2:	6023      	str	r3, [r4, #0]
	RMS[VC] = sqrt(sum_square[VC] / SAMPLES_PER_TIME);
 80030f4:	197b      	adds	r3, r7, r5
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2185      	movs	r1, #133	; 0x85
 80030fa:	05c9      	lsls	r1, r1, #23
 80030fc:	1c18      	adds	r0, r3, #0
 80030fe:	f7fd fa6b 	bl	80005d8 <__aeabi_fdiv>
 8003102:	1c03      	adds	r3, r0, #0
 8003104:	1c18      	adds	r0, r3, #0
 8003106:	f7ff f909 	bl	800231c <__aeabi_f2d>
 800310a:	0002      	movs	r2, r0
 800310c:	000b      	movs	r3, r1
 800310e:	0010      	movs	r0, r2
 8003110:	0019      	movs	r1, r3
 8003112:	f005 fa6d 	bl	80085f0 <sqrt>
 8003116:	0002      	movs	r2, r0
 8003118:	000b      	movs	r3, r1
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	3108      	adds	r1, #8
 800311e:	000c      	movs	r4, r1
 8003120:	0010      	movs	r0, r2
 8003122:	0019      	movs	r1, r3
 8003124:	f7ff f942 	bl	80023ac <__aeabi_d2f>
 8003128:	1c03      	adds	r3, r0, #0
 800312a:	6023      	str	r3, [r4, #0]
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b006      	add	sp, #24
 8003132:	bdb0      	pop	{r4, r5, r7, pc}

08003134 <calculate_Phase>:

void calculate_Phase(SensorData *data)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]

}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b002      	add	sp, #8
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003156:	f000 f9fd 	bl	8003554 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim->Instance==TIM2)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	05db      	lsls	r3, r3, #23
 8003162:	429a      	cmp	r2, r3
 8003164:	d144      	bne.n	80031f0 <HAL_TIM_PeriodElapsedCallback+0xac>
	{
		if (adc_count < SAMPLES_PER_TIME)
 8003166:	4b25      	ldr	r3, [pc, #148]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	2b3f      	cmp	r3, #63	; 0x3f
 800316c:	d840      	bhi.n	80031f0 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			sensorData.sensorData_buff[VA][adc_count] = bufferTensaoVA[adc_count];
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003170:	881b      	ldrh	r3, [r3, #0]
 8003172:	001a      	movs	r2, r3
 8003174:	4b21      	ldr	r3, [pc, #132]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003176:	881b      	ldrh	r3, [r3, #0]
 8003178:	0018      	movs	r0, r3
 800317a:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800317c:	0052      	lsls	r2, r2, #1
 800317e:	5ad1      	ldrh	r1, [r2, r3]
 8003180:	4b20      	ldr	r3, [pc, #128]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003182:	0042      	lsls	r2, r0, #1
 8003184:	52d1      	strh	r1, [r2, r3]
			sensorData.sensorData_buff[VB][adc_count] = bufferTensaoVB[adc_count];
 8003186:	4b1d      	ldr	r3, [pc, #116]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	001a      	movs	r2, r3
 800318c:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	0018      	movs	r0, r3
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003194:	0052      	lsls	r2, r2, #1
 8003196:	5ad1      	ldrh	r1, [r2, r3]
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800319a:	0002      	movs	r2, r0
 800319c:	3240      	adds	r2, #64	; 0x40
 800319e:	0052      	lsls	r2, r2, #1
 80031a0:	52d1      	strh	r1, [r2, r3]
			sensorData.sensorData_buff[VC][adc_count] = bufferTensaoVC[adc_count];
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80031a4:	881b      	ldrh	r3, [r3, #0]
 80031a6:	001a      	movs	r2, r3
 80031a8:	4b14      	ldr	r3, [pc, #80]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	0018      	movs	r0, r3
 80031ae:	4b17      	ldr	r3, [pc, #92]	; (800320c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80031b0:	0052      	lsls	r2, r2, #1
 80031b2:	5ad1      	ldrh	r1, [r2, r3]
 80031b4:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80031b6:	0002      	movs	r2, r0
 80031b8:	3280      	adds	r2, #128	; 0x80
 80031ba:	0052      	lsls	r2, r2, #1
 80031bc:	52d1      	strh	r1, [r2, r3]
			adc_count++;
 80031be:	4b0f      	ldr	r3, [pc, #60]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80031c8:	801a      	strh	r2, [r3, #0]
			if (adc_count == 64)
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d10e      	bne.n	80031f0 <HAL_TIM_PeriodElapsedCallback+0xac>
			{
				BaseType_t xStatus = xQueueSendToBackFromISR(queue_can_sendHandle, &sensorData.sensorData_buff, 0);
 80031d2:	4b0f      	ldr	r3, [pc, #60]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	490b      	ldr	r1, [pc, #44]	; (8003204 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80031d8:	2300      	movs	r3, #0
 80031da:	2200      	movs	r2, #0
 80031dc:	f003 fa43 	bl	8006666 <xQueueGenericSendFromISR>
 80031e0:	0003      	movs	r3, r0
 80031e2:	60fb      	str	r3, [r7, #12]
				if (xStatus != pdPASS)
				{
//				 	fila estourou
				}
				aux = 1;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
				adc_count = 0;
 80031ea:	4b04      	ldr	r3, [pc, #16]	; (80031fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	801a      	strh	r2, [r3, #0]
			}
		}
	}
  /* USER CODE END Callback 1 */
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	200002ee 	.word	0x200002ee
 8003200:	20000000 	.word	0x20000000
 8003204:	200002f0 	.word	0x200002f0
 8003208:	20000080 	.word	0x20000080
 800320c:	20000100 	.word	0x20000100
 8003210:	200002dc 	.word	0x200002dc
 8003214:	200002ec 	.word	0x200002ec

08003218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800321c:	b672      	cpsid	i
}
 800321e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003220:	e7fe      	b.n	8003220 <Error_Handler+0x8>
	...

08003224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_MspInit+0x50>)
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_MspInit+0x50>)
 8003230:	2101      	movs	r1, #1
 8003232:	430a      	orrs	r2, r1
 8003234:	619a      	str	r2, [r3, #24]
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_MspInit+0x50>)
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <HAL_MspInit+0x50>)
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <HAL_MspInit+0x50>)
 8003248:	2180      	movs	r1, #128	; 0x80
 800324a:	0549      	lsls	r1, r1, #21
 800324c:	430a      	orrs	r2, r1
 800324e:	61da      	str	r2, [r3, #28]
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_MspInit+0x50>)
 8003252:	69da      	ldr	r2, [r3, #28]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	055b      	lsls	r3, r3, #21
 8003258:	4013      	ands	r3, r2
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800325e:	2302      	movs	r3, #2
 8003260:	425b      	negs	r3, r3
 8003262:	2200      	movs	r2, #0
 8003264:	2103      	movs	r1, #3
 8003266:	0018      	movs	r0, r3
 8003268:	f001 f910 	bl	800448c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021000 	.word	0x40021000

08003278 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b5b0      	push	{r4, r5, r7, lr}
 800327a:	b08c      	sub	sp, #48	; 0x30
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24

  uint32_t              uwPrescalerValue = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003288:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_InitTick+0xf4>)
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	4b37      	ldr	r3, [pc, #220]	; (800336c <HAL_InitTick+0xf4>)
 800328e:	2180      	movs	r1, #128	; 0x80
 8003290:	0109      	lsls	r1, r1, #4
 8003292:	430a      	orrs	r2, r1
 8003294:	619a      	str	r2, [r3, #24]
 8003296:	4b35      	ldr	r3, [pc, #212]	; (800336c <HAL_InitTick+0xf4>)
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	4013      	ands	r3, r2
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80032a4:	230c      	movs	r3, #12
 80032a6:	18fa      	adds	r2, r7, r3
 80032a8:	2410      	movs	r4, #16
 80032aa:	193b      	adds	r3, r7, r4
 80032ac:	0011      	movs	r1, r2
 80032ae:	0018      	movs	r0, r3
 80032b0:	f002 f932 	bl	8005518 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80032c0:	f002 f914 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80032c4:	0003      	movs	r3, r0
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c8:	e004      	b.n	80032d4 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80032ca:	f002 f90f 	bl	80054ec <HAL_RCC_GetPCLK1Freq>
 80032ce:	0003      	movs	r3, r0
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80032d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d6:	4926      	ldr	r1, [pc, #152]	; (8003370 <HAL_InitTick+0xf8>)
 80032d8:	0018      	movs	r0, r3
 80032da:	f7fc ff15 	bl	8000108 <__udivsi3>
 80032de:	0003      	movs	r3, r0
 80032e0:	3b01      	subs	r3, #1
 80032e2:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80032e4:	4b23      	ldr	r3, [pc, #140]	; (8003374 <HAL_InitTick+0xfc>)
 80032e6:	4a24      	ldr	r2, [pc, #144]	; (8003378 <HAL_InitTick+0x100>)
 80032e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80032ea:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_InitTick+0xfc>)
 80032ec:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_InitTick+0x104>)
 80032ee:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80032f0:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_InitTick+0xfc>)
 80032f2:	6a3a      	ldr	r2, [r7, #32]
 80032f4:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 80032f6:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_InitTick+0xfc>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <HAL_InitTick+0xfc>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003302:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_InitTick+0xfc>)
 8003304:	2200      	movs	r2, #0
 8003306:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003308:	252b      	movs	r5, #43	; 0x2b
 800330a:	197c      	adds	r4, r7, r5
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_InitTick+0xfc>)
 800330e:	0018      	movs	r0, r3
 8003310:	f002 f92c 	bl	800556c <HAL_TIM_Base_Init>
 8003314:	0003      	movs	r3, r0
 8003316:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003318:	197b      	adds	r3, r7, r5
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d11e      	bne.n	800335e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003320:	197c      	adds	r4, r7, r5
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_InitTick+0xfc>)
 8003324:	0018      	movs	r0, r3
 8003326:	f002 f971 	bl	800560c <HAL_TIM_Base_Start_IT>
 800332a:	0003      	movs	r3, r0
 800332c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800332e:	197b      	adds	r3, r7, r5
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d113      	bne.n	800335e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003336:	200d      	movs	r0, #13
 8003338:	f001 f8bd 	bl	80044b6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b03      	cmp	r3, #3
 8003340:	d809      	bhi.n	8003356 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	0019      	movs	r1, r3
 8003348:	200d      	movs	r0, #13
 800334a:	f001 f89f 	bl	800448c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_InitTick+0x108>)
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	e003      	b.n	800335e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8003356:	232b      	movs	r3, #43	; 0x2b
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800335e:	232b      	movs	r3, #43	; 0x2b
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	781b      	ldrb	r3, [r3, #0]
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	b00c      	add	sp, #48	; 0x30
 800336a:	bdb0      	pop	{r4, r5, r7, pc}
 800336c:	40021000 	.word	0x40021000
 8003370:	000f4240 	.word	0x000f4240
 8003374:	20000470 	.word	0x20000470
 8003378:	40012c00 	.word	0x40012c00
 800337c:	000003e7 	.word	0x000003e7
 8003380:	20000184 	.word	0x20000184

08003384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003388:	e7fe      	b.n	8003388 <NMI_Handler+0x4>

0800338a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338e:	e7fe      	b.n	800338e <HardFault_Handler+0x4>

08003390 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <DMA1_Channel1_IRQHandler+0x14>)
 8003396:	0018      	movs	r0, r3
 8003398:	f001 f94c 	bl	8004634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800339c:	46c0      	nop			; (mov r8, r8)
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	20000250 	.word	0x20000250

080033a8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80033ae:	0018      	movs	r0, r3
 80033b0:	f002 f97e 	bl	80056b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	20000470 	.word	0x20000470

080033c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <TIM2_IRQHandler+0x14>)
 80033c6:	0018      	movs	r0, r3
 80033c8:	f002 f972 	bl	80056b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	200004b8 	.word	0x200004b8

080033d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ea:	2308      	movs	r3, #8
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	0018      	movs	r0, r3
 80033f0:	2310      	movs	r3, #16
 80033f2:	001a      	movs	r2, r3
 80033f4:	2100      	movs	r1, #0
 80033f6:	f005 f826 	bl	8008446 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033fa:	003b      	movs	r3, r7
 80033fc:	0018      	movs	r0, r3
 80033fe:	2308      	movs	r3, #8
 8003400:	001a      	movs	r2, r3
 8003402:	2100      	movs	r1, #0
 8003404:	f005 f81f 	bl	8008446 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <MX_TIM2_Init+0xa4>)
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	05d2      	lsls	r2, r2, #23
 800340e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48000-1;
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <MX_TIM2_Init+0xa4>)
 8003412:	4a1e      	ldr	r2, [pc, #120]	; (800348c <MX_TIM2_Init+0xa8>)
 8003414:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <MX_TIM2_Init+0xa4>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500;
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <MX_TIM2_Init+0xa4>)
 800341e:	22fa      	movs	r2, #250	; 0xfa
 8003420:	0052      	lsls	r2, r2, #1
 8003422:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003424:	4b18      	ldr	r3, [pc, #96]	; (8003488 <MX_TIM2_Init+0xa4>)
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800342a:	4b17      	ldr	r3, [pc, #92]	; (8003488 <MX_TIM2_Init+0xa4>)
 800342c:	2200      	movs	r2, #0
 800342e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <MX_TIM2_Init+0xa4>)
 8003432:	0018      	movs	r0, r3
 8003434:	f002 f89a 	bl	800556c <HAL_TIM_Base_Init>
 8003438:	1e03      	subs	r3, r0, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800343c:	f7ff feec 	bl	8003218 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003440:	2108      	movs	r1, #8
 8003442:	187b      	adds	r3, r7, r1
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	0152      	lsls	r2, r2, #5
 8003448:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800344a:	187a      	adds	r2, r7, r1
 800344c:	4b0e      	ldr	r3, [pc, #56]	; (8003488 <MX_TIM2_Init+0xa4>)
 800344e:	0011      	movs	r1, r2
 8003450:	0018      	movs	r0, r3
 8003452:	f002 fa43 	bl	80058dc <HAL_TIM_ConfigClockSource>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d001      	beq.n	800345e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800345a:	f7ff fedd 	bl	8003218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800345e:	003b      	movs	r3, r7
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003464:	003b      	movs	r3, r7
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800346a:	003a      	movs	r2, r7
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <MX_TIM2_Init+0xa4>)
 800346e:	0011      	movs	r1, r2
 8003470:	0018      	movs	r0, r3
 8003472:	f002 fc41 	bl	8005cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8003476:	1e03      	subs	r3, r0, #0
 8003478:	d001      	beq.n	800347e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800347a:	f7ff fecd 	bl	8003218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b006      	add	sp, #24
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			; (mov r8, r8)
 8003488:	200004b8 	.word	0x200004b8
 800348c:	0000bb7f 	.word	0x0000bb7f

08003490 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2380      	movs	r3, #128	; 0x80
 800349e:	05db      	lsls	r3, r3, #23
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d113      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <HAL_TIM_Base_MspInit+0x44>)
 80034a6:	69da      	ldr	r2, [r3, #28]
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_TIM_Base_MspInit+0x44>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	430a      	orrs	r2, r1
 80034ae:	61da      	str	r2, [r3, #28]
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_TIM_Base_MspInit+0x44>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80034bc:	2200      	movs	r2, #0
 80034be:	2103      	movs	r1, #3
 80034c0:	200f      	movs	r0, #15
 80034c2:	f000 ffe3 	bl	800448c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034c6:	200f      	movs	r0, #15
 80034c8:	f000 fff5 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80034cc:	46c0      	nop			; (mov r8, r8)
 80034ce:	46bd      	mov	sp, r7
 80034d0:	b004      	add	sp, #16
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000

080034d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80034d8:	480d      	ldr	r0, [pc, #52]	; (8003510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80034da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80034dc:	f7ff ff7c 	bl	80033d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034e0:	480c      	ldr	r0, [pc, #48]	; (8003514 <LoopForever+0x6>)
  ldr r1, =_edata
 80034e2:	490d      	ldr	r1, [pc, #52]	; (8003518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <LoopForever+0xe>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034e8:	e002      	b.n	80034f0 <LoopCopyDataInit>

080034ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034ee:	3304      	adds	r3, #4

080034f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034f4:	d3f9      	bcc.n	80034ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80034f8:	4c0a      	ldr	r4, [pc, #40]	; (8003524 <LoopForever+0x16>)
  movs r3, #0
 80034fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034fc:	e001      	b.n	8003502 <LoopFillZerobss>

080034fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003500:	3204      	adds	r2, #4

08003502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003504:	d3fb      	bcc.n	80034fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003506:	f004 ff6f 	bl	80083e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800350a:	f7ff fbfd 	bl	8002d08 <main>

0800350e <LoopForever>:

LoopForever:
    b LoopForever
 800350e:	e7fe      	b.n	800350e <LoopForever>
  ldr   r0, =_estack
 8003510:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003518:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800351c:	08008aec 	.word	0x08008aec
  ldr r2, =_sbss
 8003520:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003524:	20002b0c 	.word	0x20002b0c

08003528 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003528:	e7fe      	b.n	8003528 <ADC1_COMP_IRQHandler>
	...

0800352c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <HAL_Init+0x24>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_Init+0x24>)
 8003536:	2110      	movs	r1, #16
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800353c:	2003      	movs	r0, #3
 800353e:	f7ff fe9b 	bl	8003278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003542:	f7ff fe6f 	bl	8003224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	0018      	movs	r0, r3
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	40022000 	.word	0x40022000

08003554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_IncTick+0x1c>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	001a      	movs	r2, r3
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_IncTick+0x20>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	18d2      	adds	r2, r2, r3
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_IncTick+0x20>)
 8003566:	601a      	str	r2, [r3, #0]
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	20000188 	.word	0x20000188
 8003574:	20000500 	.word	0x20000500

08003578 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  return uwTick;
 800357c:	4b02      	ldr	r3, [pc, #8]	; (8003588 <HAL_GetTick+0x10>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	20000500 	.word	0x20000500

0800358c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003594:	230f      	movs	r3, #15
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e125      	b.n	80037f6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2234      	movs	r2, #52	; 0x34
 80035bc:	2100      	movs	r1, #0
 80035be:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7ff f992 	bl	80028ec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	2210      	movs	r2, #16
 80035ce:	4013      	ands	r3, r2
 80035d0:	d000      	beq.n	80035d4 <HAL_ADC_Init+0x48>
 80035d2:	e103      	b.n	80037dc <HAL_ADC_Init+0x250>
 80035d4:	230f      	movs	r3, #15
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d000      	beq.n	80035e0 <HAL_ADC_Init+0x54>
 80035de:	e0fd      	b.n	80037dc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	2204      	movs	r2, #4
 80035e8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80035ea:	d000      	beq.n	80035ee <HAL_ADC_Init+0x62>
 80035ec:	e0f6      	b.n	80037dc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	4a83      	ldr	r2, [pc, #524]	; (8003800 <HAL_ADC_Init+0x274>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	2202      	movs	r2, #2
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2203      	movs	r2, #3
 8003606:	4013      	ands	r3, r2
 8003608:	2b01      	cmp	r3, #1
 800360a:	d112      	bne.n	8003632 <HAL_ADC_Init+0xa6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2201      	movs	r2, #1
 8003614:	4013      	ands	r3, r2
 8003616:	2b01      	cmp	r3, #1
 8003618:	d009      	beq.n	800362e <HAL_ADC_Init+0xa2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	401a      	ands	r2, r3
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	429a      	cmp	r2, r3
 800362c:	d101      	bne.n	8003632 <HAL_ADC_Init+0xa6>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <HAL_ADC_Init+0xa8>
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d116      	bne.n	8003666 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2218      	movs	r2, #24
 8003640:	4393      	bics	r3, r2
 8003642:	0019      	movs	r1, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	0899      	lsrs	r1, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4964      	ldr	r1, [pc, #400]	; (8003804 <HAL_ADC_Init+0x278>)
 8003672:	400a      	ands	r2, r1
 8003674:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7e1b      	ldrb	r3, [r3, #24]
 800367a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7e5b      	ldrb	r3, [r3, #25]
 8003680:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003682:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7e9b      	ldrb	r3, [r3, #26]
 8003688:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800368a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	2b01      	cmp	r3, #1
 8003692:	d002      	beq.n	800369a <HAL_ADC_Init+0x10e>
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	015b      	lsls	r3, r3, #5
 8003698:	e000      	b.n	800369c <HAL_ADC_Init+0x110>
 800369a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800369c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80036a2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_Init+0x124>
 80036ac:	2304      	movs	r3, #4
 80036ae:	e000      	b.n	80036b2 <HAL_ADC_Init+0x126>
 80036b0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80036b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2124      	movs	r1, #36	; 0x24
 80036b8:	5c5b      	ldrb	r3, [r3, r1]
 80036ba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80036bc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7edb      	ldrb	r3, [r3, #27]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d115      	bne.n	80036f8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7e9b      	ldrb	r3, [r3, #26]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d105      	bne.n	80036e0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	0252      	lsls	r2, r2, #9
 80036da:	4313      	orrs	r3, r2
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	e00b      	b.n	80036f8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	2220      	movs	r2, #32
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	2201      	movs	r2, #1
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	23c2      	movs	r3, #194	; 0xc2
 80036fe:	33ff      	adds	r3, #255	; 0xff
 8003700:	429a      	cmp	r2, r3
 8003702:	d007      	beq.n	8003714 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800370c:	4313      	orrs	r3, r2
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4313      	orrs	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68d9      	ldr	r1, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	430a      	orrs	r2, r1
 8003722:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	055b      	lsls	r3, r3, #21
 800372c:	429a      	cmp	r2, r3
 800372e:	d01b      	beq.n	8003768 <HAL_ADC_Init+0x1dc>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d017      	beq.n	8003768 <HAL_ADC_Init+0x1dc>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2b02      	cmp	r3, #2
 800373e:	d013      	beq.n	8003768 <HAL_ADC_Init+0x1dc>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	2b03      	cmp	r3, #3
 8003746:	d00f      	beq.n	8003768 <HAL_ADC_Init+0x1dc>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00b      	beq.n	8003768 <HAL_ADC_Init+0x1dc>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2b05      	cmp	r3, #5
 8003756:	d007      	beq.n	8003768 <HAL_ADC_Init+0x1dc>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	2b06      	cmp	r3, #6
 800375e:	d003      	beq.n	8003768 <HAL_ADC_Init+0x1dc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	2b07      	cmp	r3, #7
 8003766:	d112      	bne.n	800378e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2107      	movs	r1, #7
 8003774:	438a      	bics	r2, r1
 8003776:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6959      	ldr	r1, [r3, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	2207      	movs	r2, #7
 8003784:	401a      	ands	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a1c      	ldr	r2, [pc, #112]	; (8003808 <HAL_ADC_Init+0x27c>)
 8003796:	4013      	ands	r3, r2
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	429a      	cmp	r2, r3
 800379c:	d10b      	bne.n	80037b6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	2203      	movs	r2, #3
 80037aa:	4393      	bics	r3, r2
 80037ac:	2201      	movs	r2, #1
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80037b4:	e01c      	b.n	80037f0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	2212      	movs	r2, #18
 80037bc:	4393      	bics	r3, r2
 80037be:	2210      	movs	r2, #16
 80037c0:	431a      	orrs	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2201      	movs	r2, #1
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80037d2:	230f      	movs	r3, #15
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80037da:	e009      	b.n	80037f0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	2210      	movs	r2, #16
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80037e8:	230f      	movs	r3, #15
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037f0:	230f      	movs	r3, #15
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	781b      	ldrb	r3, [r3, #0]
}
 80037f6:	0018      	movs	r0, r3
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b004      	add	sp, #16
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	fffffefd 	.word	0xfffffefd
 8003804:	fffe0219 	.word	0xfffe0219
 8003808:	833fffe7 	.word	0x833fffe7

0800380c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003818:	2317      	movs	r3, #23
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2204      	movs	r2, #4
 8003828:	4013      	ands	r3, r2
 800382a:	d15e      	bne.n	80038ea <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2234      	movs	r2, #52	; 0x34
 8003830:	5c9b      	ldrb	r3, [r3, r2]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_ADC_Start_DMA+0x2e>
 8003836:	2302      	movs	r3, #2
 8003838:	e05e      	b.n	80038f8 <HAL_ADC_Start_DMA+0xec>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2234      	movs	r2, #52	; 0x34
 800383e:	2101      	movs	r1, #1
 8003840:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	7e5b      	ldrb	r3, [r3, #25]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d007      	beq.n	800385a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800384a:	2317      	movs	r3, #23
 800384c:	18fc      	adds	r4, r7, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	0018      	movs	r0, r3
 8003852:	f000 f983 	bl	8003b5c <ADC_Enable>
 8003856:	0003      	movs	r3, r0
 8003858:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800385a:	2317      	movs	r3, #23
 800385c:	18fb      	adds	r3, r7, r3
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d146      	bne.n	80038f2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	4a25      	ldr	r2, [pc, #148]	; (8003900 <HAL_ADC_Start_DMA+0xf4>)
 800386a:	4013      	ands	r3, r2
 800386c:	2280      	movs	r2, #128	; 0x80
 800386e:	0052      	lsls	r2, r2, #1
 8003870:	431a      	orrs	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2234      	movs	r2, #52	; 0x34
 8003880:	2100      	movs	r1, #0
 8003882:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <HAL_ADC_Start_DMA+0xf8>)
 800388a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <HAL_ADC_Start_DMA+0xfc>)
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_ADC_Start_DMA+0x100>)
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	221c      	movs	r2, #28
 80038a2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2110      	movs	r1, #16
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	430a      	orrs	r2, r1
 80038c2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3340      	adds	r3, #64	; 0x40
 80038ce:	0019      	movs	r1, r3
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f000 fe48 	bl	8004568 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2104      	movs	r1, #4
 80038e4:	430a      	orrs	r2, r1
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	e003      	b.n	80038f2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038ea:	2317      	movs	r3, #23
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	2202      	movs	r2, #2
 80038f0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80038f2:	2317      	movs	r3, #23
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	781b      	ldrb	r3, [r3, #0]
}
 80038f8:	0018      	movs	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	b007      	add	sp, #28
 80038fe:	bd90      	pop	{r4, r7, pc}
 8003900:	fffff0fe 	.word	0xfffff0fe
 8003904:	08003c65 	.word	0x08003c65
 8003908:	08003d19 	.word	0x08003d19
 800390c:	08003d37 	.word	0x08003d37

08003910 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800394a:	230f      	movs	r3, #15
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	2200      	movs	r2, #0
 8003950:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003952:	2300      	movs	r3, #0
 8003954:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	055b      	lsls	r3, r3, #21
 800395e:	429a      	cmp	r2, r3
 8003960:	d011      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x46>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d00d      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x46>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	2b02      	cmp	r3, #2
 8003970:	d009      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x46>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003976:	2b03      	cmp	r3, #3
 8003978:	d005      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x46>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	2b04      	cmp	r3, #4
 8003980:	d001      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x46>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2234      	movs	r2, #52	; 0x34
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_ADC_ConfigChannel+0x54>
 8003990:	2302      	movs	r3, #2
 8003992:	e0d0      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x1f6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2234      	movs	r2, #52	; 0x34
 8003998:	2101      	movs	r1, #1
 800399a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2204      	movs	r2, #4
 80039a4:	4013      	ands	r3, r2
 80039a6:	d000      	beq.n	80039aa <HAL_ADC_ConfigChannel+0x6a>
 80039a8:	e0b4      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4a64      	ldr	r2, [pc, #400]	; (8003b40 <HAL_ADC_ConfigChannel+0x200>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d100      	bne.n	80039b6 <HAL_ADC_ConfigChannel+0x76>
 80039b4:	e082      	b.n	8003abc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2201      	movs	r2, #1
 80039c2:	409a      	lsls	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	055b      	lsls	r3, r3, #21
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d037      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d033      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d02f      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d02b      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	2b04      	cmp	r3, #4
 80039f6:	d027      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d023      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	2b06      	cmp	r3, #6
 8003a06:	d01f      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	2b07      	cmp	r3, #7
 8003a0e:	d01b      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	2107      	movs	r1, #7
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d012      	beq.n	8003a48 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2107      	movs	r1, #7
 8003a2e:	438a      	bics	r2, r1
 8003a30:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6959      	ldr	r1, [r3, #20]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	401a      	ands	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d007      	beq.n	8003a60 <HAL_ADC_ConfigChannel+0x120>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b11      	cmp	r3, #17
 8003a56:	d003      	beq.n	8003a60 <HAL_ADC_ConfigChannel+0x120>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d163      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003a60:	4b38      	ldr	r3, [pc, #224]	; (8003b44 <HAL_ADC_ConfigChannel+0x204>)
 8003a62:	6819      	ldr	r1, [r3, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b10      	cmp	r3, #16
 8003a6a:	d009      	beq.n	8003a80 <HAL_ADC_ConfigChannel+0x140>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b11      	cmp	r3, #17
 8003a72:	d102      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x13a>
 8003a74:	2380      	movs	r3, #128	; 0x80
 8003a76:	03db      	lsls	r3, r3, #15
 8003a78:	e004      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x144>
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	045b      	lsls	r3, r3, #17
 8003a7e:	e001      	b.n	8003a84 <HAL_ADC_ConfigChannel+0x144>
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	041b      	lsls	r3, r3, #16
 8003a84:	4a2f      	ldr	r2, [pc, #188]	; (8003b44 <HAL_ADC_ConfigChannel+0x204>)
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b10      	cmp	r3, #16
 8003a90:	d14a      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a92:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <HAL_ADC_ConfigChannel+0x208>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	492d      	ldr	r1, [pc, #180]	; (8003b4c <HAL_ADC_ConfigChannel+0x20c>)
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7fc fb35 	bl	8000108 <__udivsi3>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	001a      	movs	r2, r3
 8003aa2:	0013      	movs	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aac:	e002      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f9      	bne.n	8003aae <HAL_ADC_ConfigChannel+0x16e>
 8003aba:	e035      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4099      	lsls	r1, r3
 8003aca:	000b      	movs	r3, r1
 8003acc:	43d9      	mvns	r1, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d007      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x1ae>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b11      	cmp	r3, #17
 8003ae4:	d003      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x1ae>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b12      	cmp	r3, #18
 8003aec:	d11c      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_ADC_ConfigChannel+0x204>)
 8003af0:	6819      	ldr	r1, [r3, #0]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d007      	beq.n	8003b0a <HAL_ADC_ConfigChannel+0x1ca>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b11      	cmp	r3, #17
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x1c6>
 8003b02:	4b13      	ldr	r3, [pc, #76]	; (8003b50 <HAL_ADC_ConfigChannel+0x210>)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x1cc>
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <HAL_ADC_ConfigChannel+0x214>)
 8003b08:	e000      	b.n	8003b0c <HAL_ADC_ConfigChannel+0x1cc>
 8003b0a:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_ADC_ConfigChannel+0x218>)
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <HAL_ADC_ConfigChannel+0x204>)
 8003b0e:	400b      	ands	r3, r1
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	e009      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	2220      	movs	r2, #32
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003b20:	230f      	movs	r3, #15
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2234      	movs	r2, #52	; 0x34
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b30:	230f      	movs	r3, #15
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	781b      	ldrb	r3, [r3, #0]
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b004      	add	sp, #16
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	00001001 	.word	0x00001001
 8003b44:	40012708 	.word	0x40012708
 8003b48:	20000180 	.word	0x20000180
 8003b4c:	000f4240 	.word	0x000f4240
 8003b50:	ffbfffff 	.word	0xffbfffff
 8003b54:	feffffff 	.word	0xfeffffff
 8003b58:	ff7fffff 	.word	0xff7fffff

08003b5c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2203      	movs	r2, #3
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d112      	bne.n	8003ba0 <ADC_Enable+0x44>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2201      	movs	r2, #1
 8003b82:	4013      	ands	r3, r2
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d009      	beq.n	8003b9c <ADC_Enable+0x40>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	401a      	ands	r2, r3
 8003b94:	2380      	movs	r3, #128	; 0x80
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d101      	bne.n	8003ba0 <ADC_Enable+0x44>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <ADC_Enable+0x46>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d152      	bne.n	8003c4c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <ADC_Enable+0xfc>)
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d00d      	beq.n	8003bce <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e03f      	b.n	8003c4e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <ADC_Enable+0x100>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	491f      	ldr	r1, [pc, #124]	; (8003c60 <ADC_Enable+0x104>)
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fc fa8f 	bl	8000108 <__udivsi3>
 8003bea:	0003      	movs	r3, r0
 8003bec:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bee:	e002      	b.n	8003bf6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f9      	bne.n	8003bf0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bfc:	f7ff fcbc 	bl	8003578 <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c04:	e01b      	b.n	8003c3e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c06:	f7ff fcb7 	bl	8003578 <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d914      	bls.n	8003c3e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d00d      	beq.n	8003c3e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	2210      	movs	r2, #16
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	2201      	movs	r2, #1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e007      	b.n	8003c4e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d1dc      	bne.n	8003c06 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b004      	add	sp, #16
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	80000017 	.word	0x80000017
 8003c5c:	20000180 	.word	0x20000180
 8003c60:	000f4240 	.word	0x000f4240

08003c64 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c76:	2250      	movs	r2, #80	; 0x50
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d140      	bne.n	8003cfe <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	2280      	movs	r2, #128	; 0x80
 8003c82:	0092      	lsls	r2, r2, #2
 8003c84:	431a      	orrs	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	23c0      	movs	r3, #192	; 0xc0
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	4013      	ands	r3, r2
 8003c96:	d12d      	bne.n	8003cf4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d129      	bne.n	8003cf4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b08      	cmp	r3, #8
 8003cac:	d122      	bne.n	8003cf4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d110      	bne.n	8003cdc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	210c      	movs	r1, #12
 8003cc6:	438a      	bics	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	4a11      	ldr	r2, [pc, #68]	; (8003d14 <ADC_DMAConvCplt+0xb0>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
 8003cda:	e00b      	b.n	8003cf4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cec:	2201      	movs	r2, #1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7ff fe0a 	bl	8003910 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003cfc:	e005      	b.n	8003d0a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	0010      	movs	r0, r2
 8003d08:	4798      	blx	r3
}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	b004      	add	sp, #16
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	fffffefe 	.word	0xfffffefe

08003d18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7ff fdf9 	bl	8003920 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b004      	add	sp, #16
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d36:	b580      	push	{r7, lr}
 8003d38:	b084      	sub	sp, #16
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	2240      	movs	r2, #64	; 0x40
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	2204      	movs	r2, #4
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f7ff fde6 	bl	8003930 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d64:	46c0      	nop			; (mov r8, r8)
 8003d66:	46bd      	mov	sp, r7
 8003d68:	b004      	add	sp, #16
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d74:	2317      	movs	r3, #23
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2234      	movs	r2, #52	; 0x34
 8003d88:	5c9b      	ldrb	r3, [r3, r2]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d101      	bne.n	8003d92 <HAL_ADCEx_Calibration_Start+0x26>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e08d      	b.n	8003eae <HAL_ADCEx_Calibration_Start+0x142>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2234      	movs	r2, #52	; 0x34
 8003d96:	2101      	movs	r1, #1
 8003d98:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2203      	movs	r2, #3
 8003da2:	4013      	ands	r3, r2
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d112      	bne.n	8003dce <HAL_ADCEx_Calibration_Start+0x62>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2201      	movs	r2, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d009      	beq.n	8003dca <HAL_ADCEx_Calibration_Start+0x5e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	2380      	movs	r3, #128	; 0x80
 8003dbe:	021b      	lsls	r3, r3, #8
 8003dc0:	401a      	ands	r2, r3
 8003dc2:	2380      	movs	r3, #128	; 0x80
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d101      	bne.n	8003dce <HAL_ADCEx_Calibration_Start+0x62>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <HAL_ADCEx_Calibration_Start+0x64>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d15b      	bne.n	8003e8c <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	4a37      	ldr	r2, [pc, #220]	; (8003eb8 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2202      	movs	r2, #2
 8003dde:	431a      	orrs	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2203      	movs	r2, #3
 8003dec:	4013      	ands	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2103      	movs	r1, #3
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2180      	movs	r1, #128	; 0x80
 8003e0c:	0609      	lsls	r1, r1, #24
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003e12:	f7ff fbb1 	bl	8003578 <HAL_GetTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003e1a:	e01d      	b.n	8003e58 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003e1c:	f7ff fbac 	bl	8003578 <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d916      	bls.n	8003e58 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	0fdb      	lsrs	r3, r3, #31
 8003e32:	07da      	lsls	r2, r3, #31
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	061b      	lsls	r3, r3, #24
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d10d      	bne.n	8003e58 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e40:	2212      	movs	r2, #18
 8003e42:	4393      	bics	r3, r2
 8003e44:	2210      	movs	r2, #16
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2234      	movs	r2, #52	; 0x34
 8003e50:	2100      	movs	r1, #0
 8003e52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e02a      	b.n	8003eae <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	0fdb      	lsrs	r3, r3, #31
 8003e60:	07da      	lsls	r2, r3, #31
 8003e62:	2380      	movs	r3, #128	; 0x80
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d0d8      	beq.n	8003e1c <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68d9      	ldr	r1, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4393      	bics	r3, r2
 8003e82:	2201      	movs	r2, #1
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
 8003e8a:	e009      	b.n	8003ea0 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	2220      	movs	r2, #32
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003e98:	2317      	movs	r3, #23
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2234      	movs	r2, #52	; 0x34
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003ea8:	2317      	movs	r3, #23
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	781b      	ldrb	r3, [r3, #0]
}
 8003eae:	0018      	movs	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	b006      	add	sp, #24
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	fffffefd 	.word	0xfffffefd

08003ebc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0f0      	b.n	80040b0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	5c9b      	ldrb	r3, [r3, r2]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d103      	bne.n	8003ee2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7fe fdcb 	bl	8002a78 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2101      	movs	r1, #1
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ef2:	f7ff fb41 	bl	8003578 <HAL_GetTick>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003efa:	e013      	b.n	8003f24 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003efc:	f7ff fb3c 	bl	8003578 <HAL_GetTick>
 8003f00:	0002      	movs	r2, r0
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b0a      	cmp	r3, #10
 8003f08:	d90c      	bls.n	8003f24 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	0292      	lsls	r2, r2, #10
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	2105      	movs	r1, #5
 8003f1e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e0c5      	b.n	80040b0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d0e5      	beq.n	8003efc <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2102      	movs	r1, #2
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f40:	f7ff fb1a 	bl	8003578 <HAL_GetTick>
 8003f44:	0003      	movs	r3, r0
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f48:	e013      	b.n	8003f72 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f4a:	f7ff fb15 	bl	8003578 <HAL_GetTick>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b0a      	cmp	r3, #10
 8003f56:	d90c      	bls.n	8003f72 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2280      	movs	r2, #128	; 0x80
 8003f5e:	0292      	lsls	r2, r2, #10
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	2105      	movs	r1, #5
 8003f6c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e09e      	b.n	80040b0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d1e5      	bne.n	8003f4a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	7e1b      	ldrb	r3, [r3, #24]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d108      	bne.n	8003f98 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2180      	movs	r1, #128	; 0x80
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	e007      	b.n	8003fa8 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2180      	movs	r1, #128	; 0x80
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	7e5b      	ldrb	r3, [r3, #25]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d108      	bne.n	8003fc2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	e007      	b.n	8003fd2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2140      	movs	r1, #64	; 0x40
 8003fce:	438a      	bics	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7e9b      	ldrb	r3, [r3, #26]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d108      	bne.n	8003fec <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2120      	movs	r1, #32
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e007      	b.n	8003ffc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	438a      	bics	r2, r1
 8003ffa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	7edb      	ldrb	r3, [r3, #27]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d108      	bne.n	8004016 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2110      	movs	r1, #16
 8004010:	438a      	bics	r2, r1
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e007      	b.n	8004026 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2110      	movs	r1, #16
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7f1b      	ldrb	r3, [r3, #28]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d108      	bne.n	8004040 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2108      	movs	r1, #8
 800403a:	430a      	orrs	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e007      	b.n	8004050 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2108      	movs	r1, #8
 800404c:	438a      	bics	r2, r1
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	7f5b      	ldrb	r3, [r3, #29]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d108      	bne.n	800406a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2104      	movs	r1, #4
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	e007      	b.n	800407a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2104      	movs	r1, #4
 8004076:	438a      	bics	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	431a      	orrs	r2, r3
 8004090:	0011      	movs	r1, r2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	1e5a      	subs	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	2101      	movs	r1, #1
 80040ac:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b004      	add	sp, #16
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040c8:	2013      	movs	r0, #19
 80040ca:	183b      	adds	r3, r7, r0
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	2120      	movs	r1, #32
 80040d0:	5c52      	ldrb	r2, [r2, r1]
 80040d2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80040d4:	0002      	movs	r2, r0
 80040d6:	18bb      	adds	r3, r7, r2
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d004      	beq.n	80040e8 <HAL_CAN_ConfigFilter+0x30>
 80040de:	18bb      	adds	r3, r7, r2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d000      	beq.n	80040e8 <HAL_CAN_ConfigFilter+0x30>
 80040e6:	e0cd      	b.n	8004284 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	2380      	movs	r3, #128	; 0x80
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	58d3      	ldr	r3, [r2, r3]
 80040f0:	2201      	movs	r2, #1
 80040f2:	431a      	orrs	r2, r3
 80040f4:	0011      	movs	r1, r2
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	221f      	movs	r2, #31
 8004104:	4013      	ands	r3, r2
 8004106:	2201      	movs	r2, #1
 8004108:	409a      	lsls	r2, r3
 800410a:	0013      	movs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	2387      	movs	r3, #135	; 0x87
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	58d3      	ldr	r3, [r2, r3]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	43d2      	mvns	r2, r2
 800411a:	401a      	ands	r2, r3
 800411c:	0011      	movs	r1, r2
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	2387      	movs	r3, #135	; 0x87
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d129      	bne.n	8004182 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	2383      	movs	r3, #131	; 0x83
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	58d3      	ldr	r3, [r2, r3]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	43d2      	mvns	r2, r2
 800413a:	401a      	ands	r2, r3
 800413c:	0011      	movs	r1, r2
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	2383      	movs	r3, #131	; 0x83
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	041b      	lsls	r3, r3, #16
 8004152:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004158:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	3248      	adds	r2, #72	; 0x48
 800415e:	00d2      	lsls	r2, r2, #3
 8004160:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004174:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004176:	6979      	ldr	r1, [r7, #20]
 8004178:	3348      	adds	r3, #72	; 0x48
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	18cb      	adds	r3, r1, r3
 800417e:	3304      	adds	r3, #4
 8004180:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d128      	bne.n	80041dc <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	2383      	movs	r3, #131	; 0x83
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	58d2      	ldr	r2, [r2, r3]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	431a      	orrs	r2, r3
 8004196:	0011      	movs	r1, r2
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	2383      	movs	r3, #131	; 0x83
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80041b2:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3248      	adds	r2, #72	; 0x48
 80041b8:	00d2      	lsls	r2, r2, #3
 80041ba:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	041b      	lsls	r3, r3, #16
 80041c8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80041ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80041d0:	6979      	ldr	r1, [r7, #20]
 80041d2:	3348      	adds	r3, #72	; 0x48
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	18cb      	adds	r3, r1, r3
 80041d8:	3304      	adds	r3, #4
 80041da:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	2381      	movs	r3, #129	; 0x81
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	58d3      	ldr	r3, [r2, r3]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	43d2      	mvns	r2, r2
 80041f0:	401a      	ands	r2, r3
 80041f2:	0011      	movs	r1, r2
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	2381      	movs	r3, #129	; 0x81
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	50d1      	str	r1, [r2, r3]
 80041fc:	e00a      	b.n	8004214 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	2381      	movs	r3, #129	; 0x81
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	58d2      	ldr	r2, [r2, r3]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	431a      	orrs	r2, r3
 800420a:	0011      	movs	r1, r2
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	2381      	movs	r3, #129	; 0x81
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10c      	bne.n	8004236 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	2385      	movs	r3, #133	; 0x85
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	58d3      	ldr	r3, [r2, r3]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	43d2      	mvns	r2, r2
 8004228:	401a      	ands	r2, r3
 800422a:	0011      	movs	r1, r2
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	2385      	movs	r3, #133	; 0x85
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	50d1      	str	r1, [r2, r3]
 8004234:	e00a      	b.n	800424c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	2385      	movs	r3, #133	; 0x85
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	58d2      	ldr	r2, [r2, r3]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	431a      	orrs	r2, r3
 8004242:	0011      	movs	r1, r2
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	2385      	movs	r3, #133	; 0x85
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d10a      	bne.n	800426a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	2387      	movs	r3, #135	; 0x87
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	58d2      	ldr	r2, [r2, r3]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	431a      	orrs	r2, r3
 8004260:	0011      	movs	r1, r2
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	2387      	movs	r3, #135	; 0x87
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	58d3      	ldr	r3, [r2, r3]
 8004272:	2201      	movs	r2, #1
 8004274:	4393      	bics	r3, r2
 8004276:	0019      	movs	r1, r3
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	e007      	b.n	8004294 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	02d2      	lsls	r2, r2, #11
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
  }
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b006      	add	sp, #24
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	5c9b      	ldrb	r3, [r3, r2]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d12f      	bne.n	8004310 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	2102      	movs	r1, #2
 80042b6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2101      	movs	r1, #1
 80042c4:	438a      	bics	r2, r1
 80042c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042c8:	f7ff f956 	bl	8003578 <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042d0:	e013      	b.n	80042fa <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80042d2:	f7ff f951 	bl	8003578 <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b0a      	cmp	r3, #10
 80042de:	d90c      	bls.n	80042fa <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2280      	movs	r2, #128	; 0x80
 80042e6:	0292      	lsls	r2, r2, #10
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	2105      	movs	r1, #5
 80042f4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e012      	b.n	8004320 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	4013      	ands	r3, r2
 8004304:	d1e5      	bne.n	80042d2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e007      	b.n	8004320 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2280      	movs	r2, #128	; 0x80
 8004316:	0312      	lsls	r2, r2, #12
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
  }
}
 8004320:	0018      	movs	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	b004      	add	sp, #16
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004332:	200f      	movs	r0, #15
 8004334:	183b      	adds	r3, r7, r0
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	2120      	movs	r1, #32
 800433a:	5c52      	ldrb	r2, [r2, r1]
 800433c:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800433e:	0002      	movs	r2, r0
 8004340:	18bb      	adds	r3, r7, r2
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d003      	beq.n	8004350 <HAL_CAN_ActivateNotification+0x28>
 8004348:	18bb      	adds	r3, r7, r2
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d109      	bne.n	8004364 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6959      	ldr	r1, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	e007      	b.n	8004374 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	2280      	movs	r2, #128	; 0x80
 800436a:	02d2      	lsls	r2, r2, #11
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
  }
}
 8004374:	0018      	movs	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	b004      	add	sp, #16
 800437a:	bd80      	pop	{r7, pc}

0800437c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	0002      	movs	r2, r0
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004388:	1dfb      	adds	r3, r7, #7
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b7f      	cmp	r3, #127	; 0x7f
 800438e:	d809      	bhi.n	80043a4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004390:	1dfb      	adds	r3, r7, #7
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	001a      	movs	r2, r3
 8004396:	231f      	movs	r3, #31
 8004398:	401a      	ands	r2, r3
 800439a:	4b04      	ldr	r3, [pc, #16]	; (80043ac <__NVIC_EnableIRQ+0x30>)
 800439c:	2101      	movs	r1, #1
 800439e:	4091      	lsls	r1, r2
 80043a0:	000a      	movs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
  }
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b002      	add	sp, #8
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	e000e100 	.word	0xe000e100

080043b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043b0:	b590      	push	{r4, r7, lr}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	0002      	movs	r2, r0
 80043b8:	6039      	str	r1, [r7, #0]
 80043ba:	1dfb      	adds	r3, r7, #7
 80043bc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80043be:	1dfb      	adds	r3, r7, #7
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b7f      	cmp	r3, #127	; 0x7f
 80043c4:	d828      	bhi.n	8004418 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043c6:	4a2f      	ldr	r2, [pc, #188]	; (8004484 <__NVIC_SetPriority+0xd4>)
 80043c8:	1dfb      	adds	r3, r7, #7
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	33c0      	adds	r3, #192	; 0xc0
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	589b      	ldr	r3, [r3, r2]
 80043d6:	1dfa      	adds	r2, r7, #7
 80043d8:	7812      	ldrb	r2, [r2, #0]
 80043da:	0011      	movs	r1, r2
 80043dc:	2203      	movs	r2, #3
 80043de:	400a      	ands	r2, r1
 80043e0:	00d2      	lsls	r2, r2, #3
 80043e2:	21ff      	movs	r1, #255	; 0xff
 80043e4:	4091      	lsls	r1, r2
 80043e6:	000a      	movs	r2, r1
 80043e8:	43d2      	mvns	r2, r2
 80043ea:	401a      	ands	r2, r3
 80043ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	019b      	lsls	r3, r3, #6
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	401a      	ands	r2, r3
 80043f6:	1dfb      	adds	r3, r7, #7
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	0018      	movs	r0, r3
 80043fc:	2303      	movs	r3, #3
 80043fe:	4003      	ands	r3, r0
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004404:	481f      	ldr	r0, [pc, #124]	; (8004484 <__NVIC_SetPriority+0xd4>)
 8004406:	1dfb      	adds	r3, r7, #7
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	b25b      	sxtb	r3, r3
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	430a      	orrs	r2, r1
 8004410:	33c0      	adds	r3, #192	; 0xc0
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004416:	e031      	b.n	800447c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <__NVIC_SetPriority+0xd8>)
 800441a:	1dfb      	adds	r3, r7, #7
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	0019      	movs	r1, r3
 8004420:	230f      	movs	r3, #15
 8004422:	400b      	ands	r3, r1
 8004424:	3b08      	subs	r3, #8
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	3306      	adds	r3, #6
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	18d3      	adds	r3, r2, r3
 800442e:	3304      	adds	r3, #4
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	1dfa      	adds	r2, r7, #7
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	0011      	movs	r1, r2
 8004438:	2203      	movs	r2, #3
 800443a:	400a      	ands	r2, r1
 800443c:	00d2      	lsls	r2, r2, #3
 800443e:	21ff      	movs	r1, #255	; 0xff
 8004440:	4091      	lsls	r1, r2
 8004442:	000a      	movs	r2, r1
 8004444:	43d2      	mvns	r2, r2
 8004446:	401a      	ands	r2, r3
 8004448:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	019b      	lsls	r3, r3, #6
 800444e:	22ff      	movs	r2, #255	; 0xff
 8004450:	401a      	ands	r2, r3
 8004452:	1dfb      	adds	r3, r7, #7
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	0018      	movs	r0, r3
 8004458:	2303      	movs	r3, #3
 800445a:	4003      	ands	r3, r0
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004460:	4809      	ldr	r0, [pc, #36]	; (8004488 <__NVIC_SetPriority+0xd8>)
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	001c      	movs	r4, r3
 8004468:	230f      	movs	r3, #15
 800446a:	4023      	ands	r3, r4
 800446c:	3b08      	subs	r3, #8
 800446e:	089b      	lsrs	r3, r3, #2
 8004470:	430a      	orrs	r2, r1
 8004472:	3306      	adds	r3, #6
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	18c3      	adds	r3, r0, r3
 8004478:	3304      	adds	r3, #4
 800447a:	601a      	str	r2, [r3, #0]
}
 800447c:	46c0      	nop			; (mov r8, r8)
 800447e:	46bd      	mov	sp, r7
 8004480:	b003      	add	sp, #12
 8004482:	bd90      	pop	{r4, r7, pc}
 8004484:	e000e100 	.word	0xe000e100
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	210f      	movs	r1, #15
 8004498:	187b      	adds	r3, r7, r1
 800449a:	1c02      	adds	r2, r0, #0
 800449c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	187b      	adds	r3, r7, r1
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b25b      	sxtb	r3, r3
 80044a6:	0011      	movs	r1, r2
 80044a8:	0018      	movs	r0, r3
 80044aa:	f7ff ff81 	bl	80043b0 <__NVIC_SetPriority>
}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b004      	add	sp, #16
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	0002      	movs	r2, r0
 80044be:	1dfb      	adds	r3, r7, #7
 80044c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c2:	1dfb      	adds	r3, r7, #7
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	0018      	movs	r0, r3
 80044ca:	f7ff ff57 	bl	800437c <__NVIC_EnableIRQ>
}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b002      	add	sp, #8
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e036      	b.n	800455c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2221      	movs	r2, #33	; 0x21
 80044f2:	2102      	movs	r1, #2
 80044f4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a18      	ldr	r2, [pc, #96]	; (8004564 <HAL_DMA_Init+0x8c>)
 8004502:	4013      	ands	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800450e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800451a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004526:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0018      	movs	r0, r3
 8004540:	f000 f946 	bl	80047d0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2221      	movs	r2, #33	; 0x21
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	2100      	movs	r1, #0
 8004558:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	0018      	movs	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	b004      	add	sp, #16
 8004562:	bd80      	pop	{r7, pc}
 8004564:	ffffc00f 	.word	0xffffc00f

08004568 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004576:	2317      	movs	r3, #23
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	5c9b      	ldrb	r3, [r3, r2]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_DMA_Start_IT+0x24>
 8004588:	2302      	movs	r3, #2
 800458a:	e04f      	b.n	800462c <HAL_DMA_Start_IT+0xc4>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	2101      	movs	r1, #1
 8004592:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2221      	movs	r2, #33	; 0x21
 8004598:	5c9b      	ldrb	r3, [r3, r2]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b01      	cmp	r3, #1
 800459e:	d13a      	bne.n	8004616 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2221      	movs	r2, #33	; 0x21
 80045a4:	2102      	movs	r1, #2
 80045a6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2101      	movs	r1, #1
 80045ba:	438a      	bics	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f8d7 	bl	8004778 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	210e      	movs	r1, #14
 80045de:	430a      	orrs	r2, r1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e00f      	b.n	8004604 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	210a      	movs	r1, #10
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2104      	movs	r1, #4
 8004600:	438a      	bics	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2101      	movs	r1, #1
 8004610:	430a      	orrs	r2, r1
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e007      	b.n	8004626 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	2100      	movs	r1, #0
 800461c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800461e:	2317      	movs	r3, #23
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	2202      	movs	r2, #2
 8004624:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004626:	2317      	movs	r3, #23
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	781b      	ldrb	r3, [r3, #0]
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b006      	add	sp, #24
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	2204      	movs	r2, #4
 8004652:	409a      	lsls	r2, r3
 8004654:	0013      	movs	r3, r2
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	4013      	ands	r3, r2
 800465a:	d024      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x72>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2204      	movs	r2, #4
 8004660:	4013      	ands	r3, r2
 8004662:	d020      	beq.n	80046a6 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	d107      	bne.n	8004680 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2104      	movs	r1, #4
 800467c:	438a      	bics	r2, r1
 800467e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004688:	2104      	movs	r1, #4
 800468a:	4091      	lsls	r1, r2
 800468c:	000a      	movs	r2, r1
 800468e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d100      	bne.n	800469a <HAL_DMA_IRQHandler+0x66>
 8004698:	e06a      	b.n	8004770 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	0010      	movs	r0, r2
 80046a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046a4:	e064      	b.n	8004770 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2202      	movs	r2, #2
 80046ac:	409a      	lsls	r2, r3
 80046ae:	0013      	movs	r3, r2
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4013      	ands	r3, r2
 80046b4:	d02b      	beq.n	800470e <HAL_DMA_IRQHandler+0xda>
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2202      	movs	r2, #2
 80046ba:	4013      	ands	r3, r2
 80046bc:	d027      	beq.n	800470e <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2220      	movs	r2, #32
 80046c6:	4013      	ands	r3, r2
 80046c8:	d10b      	bne.n	80046e2 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	210a      	movs	r1, #10
 80046d6:	438a      	bics	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	2101      	movs	r1, #1
 80046e0:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ea:	2102      	movs	r1, #2
 80046ec:	4091      	lsls	r1, r2
 80046ee:	000a      	movs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	2100      	movs	r1, #0
 80046f8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d036      	beq.n	8004770 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	0010      	movs	r0, r2
 800470a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800470c:	e030      	b.n	8004770 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	2208      	movs	r2, #8
 8004714:	409a      	lsls	r2, r3
 8004716:	0013      	movs	r3, r2
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4013      	ands	r3, r2
 800471c:	d028      	beq.n	8004770 <HAL_DMA_IRQHandler+0x13c>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2208      	movs	r2, #8
 8004722:	4013      	ands	r3, r2
 8004724:	d024      	beq.n	8004770 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	210e      	movs	r1, #14
 8004732:	438a      	bics	r2, r1
 8004734:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2101      	movs	r1, #1
 8004740:	4091      	lsls	r1, r2
 8004742:	000a      	movs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2221      	movs	r2, #33	; 0x21
 8004750:	2101      	movs	r1, #1
 8004752:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	2100      	movs	r1, #0
 800475a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	0010      	movs	r0, r2
 800476c:	4798      	blx	r3
    }
  }
}
 800476e:	e7ff      	b.n	8004770 <HAL_DMA_IRQHandler+0x13c>
 8004770:	46c0      	nop			; (mov r8, r8)
 8004772:	46bd      	mov	sp, r7
 8004774:	b004      	add	sp, #16
 8004776:	bd80      	pop	{r7, pc}

08004778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	2101      	movs	r1, #1
 8004790:	4091      	lsls	r1, r2
 8004792:	000a      	movs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d108      	bne.n	80047b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80047b6:	e007      	b.n	80047c8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	60da      	str	r2, [r3, #12]
}
 80047c8:	46c0      	nop			; (mov r8, r8)
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b004      	add	sp, #16
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a08      	ldr	r2, [pc, #32]	; (8004800 <DMA_CalcBaseAndBitshift+0x30>)
 80047de:	4694      	mov	ip, r2
 80047e0:	4463      	add	r3, ip
 80047e2:	2114      	movs	r1, #20
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fb fc8f 	bl	8000108 <__udivsi3>
 80047ea:	0003      	movs	r3, r0
 80047ec:	009a      	lsls	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a03      	ldr	r2, [pc, #12]	; (8004804 <DMA_CalcBaseAndBitshift+0x34>)
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80047f8:	46c0      	nop			; (mov r8, r8)
 80047fa:	46bd      	mov	sp, r7
 80047fc:	b002      	add	sp, #8
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	bffdfff8 	.word	0xbffdfff8
 8004804:	40020000 	.word	0x40020000

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004816:	e155      	b.n	8004ac4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4091      	lsls	r1, r2
 8004822:	000a      	movs	r2, r1
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d100      	bne.n	8004830 <HAL_GPIO_Init+0x28>
 800482e:	e146      	b.n	8004abe <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2203      	movs	r2, #3
 8004836:	4013      	ands	r3, r2
 8004838:	2b01      	cmp	r3, #1
 800483a:	d005      	beq.n	8004848 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	2203      	movs	r2, #3
 8004842:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004844:	2b02      	cmp	r3, #2
 8004846:	d130      	bne.n	80048aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	409a      	lsls	r2, r3
 8004856:	0013      	movs	r3, r2
 8004858:	43da      	mvns	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	409a      	lsls	r2, r3
 800486a:	0013      	movs	r3, r2
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800487e:	2201      	movs	r2, #1
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	409a      	lsls	r2, r3
 8004884:	0013      	movs	r3, r2
 8004886:	43da      	mvns	r2, r3
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	2201      	movs	r2, #1
 8004896:	401a      	ands	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	409a      	lsls	r2, r3
 800489c:	0013      	movs	r3, r2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2203      	movs	r2, #3
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d017      	beq.n	80048e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	2203      	movs	r2, #3
 80048c2:	409a      	lsls	r2, r3
 80048c4:	0013      	movs	r3, r2
 80048c6:	43da      	mvns	r2, r3
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	409a      	lsls	r2, r3
 80048d8:	0013      	movs	r3, r2
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2203      	movs	r2, #3
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d123      	bne.n	800493a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	08da      	lsrs	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3208      	adds	r2, #8
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	58d3      	ldr	r3, [r2, r3]
 80048fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2207      	movs	r2, #7
 8004904:	4013      	ands	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	220f      	movs	r2, #15
 800490a:	409a      	lsls	r2, r3
 800490c:	0013      	movs	r3, r2
 800490e:	43da      	mvns	r2, r3
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2107      	movs	r1, #7
 800491e:	400b      	ands	r3, r1
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	409a      	lsls	r2, r3
 8004924:	0013      	movs	r3, r2
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	08da      	lsrs	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3208      	adds	r2, #8
 8004934:	0092      	lsls	r2, r2, #2
 8004936:	6939      	ldr	r1, [r7, #16]
 8004938:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	409a      	lsls	r2, r3
 8004948:	0013      	movs	r3, r2
 800494a:	43da      	mvns	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2203      	movs	r2, #3
 8004958:	401a      	ands	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	409a      	lsls	r2, r3
 8004960:	0013      	movs	r3, r2
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	23c0      	movs	r3, #192	; 0xc0
 8004974:	029b      	lsls	r3, r3, #10
 8004976:	4013      	ands	r3, r2
 8004978:	d100      	bne.n	800497c <HAL_GPIO_Init+0x174>
 800497a:	e0a0      	b.n	8004abe <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497c:	4b57      	ldr	r3, [pc, #348]	; (8004adc <HAL_GPIO_Init+0x2d4>)
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	4b56      	ldr	r3, [pc, #344]	; (8004adc <HAL_GPIO_Init+0x2d4>)
 8004982:	2101      	movs	r1, #1
 8004984:	430a      	orrs	r2, r1
 8004986:	619a      	str	r2, [r3, #24]
 8004988:	4b54      	ldr	r3, [pc, #336]	; (8004adc <HAL_GPIO_Init+0x2d4>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	2201      	movs	r2, #1
 800498e:	4013      	ands	r3, r2
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004994:	4a52      	ldr	r2, [pc, #328]	; (8004ae0 <HAL_GPIO_Init+0x2d8>)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	089b      	lsrs	r3, r3, #2
 800499a:	3302      	adds	r3, #2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	589b      	ldr	r3, [r3, r2]
 80049a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2203      	movs	r2, #3
 80049a6:	4013      	ands	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	220f      	movs	r2, #15
 80049ac:	409a      	lsls	r2, r3
 80049ae:	0013      	movs	r3, r2
 80049b0:	43da      	mvns	r2, r3
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	2390      	movs	r3, #144	; 0x90
 80049bc:	05db      	lsls	r3, r3, #23
 80049be:	429a      	cmp	r2, r3
 80049c0:	d019      	beq.n	80049f6 <HAL_GPIO_Init+0x1ee>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a47      	ldr	r2, [pc, #284]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <HAL_GPIO_Init+0x1ea>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a46      	ldr	r2, [pc, #280]	; (8004ae8 <HAL_GPIO_Init+0x2e0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00d      	beq.n	80049ee <HAL_GPIO_Init+0x1e6>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a45      	ldr	r2, [pc, #276]	; (8004aec <HAL_GPIO_Init+0x2e4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d007      	beq.n	80049ea <HAL_GPIO_Init+0x1e2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a44      	ldr	r2, [pc, #272]	; (8004af0 <HAL_GPIO_Init+0x2e8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <HAL_GPIO_Init+0x1de>
 80049e2:	2304      	movs	r3, #4
 80049e4:	e008      	b.n	80049f8 <HAL_GPIO_Init+0x1f0>
 80049e6:	2305      	movs	r3, #5
 80049e8:	e006      	b.n	80049f8 <HAL_GPIO_Init+0x1f0>
 80049ea:	2303      	movs	r3, #3
 80049ec:	e004      	b.n	80049f8 <HAL_GPIO_Init+0x1f0>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e002      	b.n	80049f8 <HAL_GPIO_Init+0x1f0>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <HAL_GPIO_Init+0x1f0>
 80049f6:	2300      	movs	r3, #0
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	2103      	movs	r1, #3
 80049fc:	400a      	ands	r2, r1
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	4093      	lsls	r3, r2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a08:	4935      	ldr	r1, [pc, #212]	; (8004ae0 <HAL_GPIO_Init+0x2d8>)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	3302      	adds	r3, #2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a16:	4b37      	ldr	r3, [pc, #220]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	43da      	mvns	r2, r3
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4013      	ands	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	035b      	lsls	r3, r3, #13
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a3a:	4b2e      	ldr	r3, [pc, #184]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	43da      	mvns	r2, r3
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	2380      	movs	r3, #128	; 0x80
 8004a56:	039b      	lsls	r3, r3, #14
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a64:	4b23      	ldr	r3, [pc, #140]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43da      	mvns	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	4013      	ands	r3, r2
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a8e:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	025b      	lsls	r3, r3, #9
 8004aac:	4013      	ands	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ab8:	4b0e      	ldr	r3, [pc, #56]	; (8004af4 <HAL_GPIO_Init+0x2ec>)
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	40da      	lsrs	r2, r3
 8004acc:	1e13      	subs	r3, r2, #0
 8004ace:	d000      	beq.n	8004ad2 <HAL_GPIO_Init+0x2ca>
 8004ad0:	e6a2      	b.n	8004818 <HAL_GPIO_Init+0x10>
  } 
}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b006      	add	sp, #24
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	48000400 	.word	0x48000400
 8004ae8:	48000800 	.word	0x48000800
 8004aec:	48000c00 	.word	0x48000c00
 8004af0:	48001000 	.word	0x48001000
 8004af4:	40010400 	.word	0x40010400

08004af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	0008      	movs	r0, r1
 8004b02:	0011      	movs	r1, r2
 8004b04:	1cbb      	adds	r3, r7, #2
 8004b06:	1c02      	adds	r2, r0, #0
 8004b08:	801a      	strh	r2, [r3, #0]
 8004b0a:	1c7b      	adds	r3, r7, #1
 8004b0c:	1c0a      	adds	r2, r1, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b10:	1c7b      	adds	r3, r7, #1
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b18:	1cbb      	adds	r3, r7, #2
 8004b1a:	881a      	ldrh	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b20:	e003      	b.n	8004b2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b22:	1cbb      	adds	r3, r7, #2
 8004b24:	881a      	ldrh	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	b002      	add	sp, #8
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f000 fb76 	bl	8005234 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4013      	ands	r3, r2
 8004b50:	d100      	bne.n	8004b54 <HAL_RCC_OscConfig+0x20>
 8004b52:	e08e      	b.n	8004c72 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004b54:	4bc5      	ldr	r3, [pc, #788]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	220c      	movs	r2, #12
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b04      	cmp	r3, #4
 8004b5e:	d00e      	beq.n	8004b7e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b60:	4bc2      	ldr	r3, [pc, #776]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	220c      	movs	r2, #12
 8004b66:	4013      	ands	r3, r2
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d117      	bne.n	8004b9c <HAL_RCC_OscConfig+0x68>
 8004b6c:	4bbf      	ldr	r3, [pc, #764]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	23c0      	movs	r3, #192	; 0xc0
 8004b72:	025b      	lsls	r3, r3, #9
 8004b74:	401a      	ands	r2, r3
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	025b      	lsls	r3, r3, #9
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d10e      	bne.n	8004b9c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7e:	4bbb      	ldr	r3, [pc, #748]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	029b      	lsls	r3, r3, #10
 8004b86:	4013      	ands	r3, r2
 8004b88:	d100      	bne.n	8004b8c <HAL_RCC_OscConfig+0x58>
 8004b8a:	e071      	b.n	8004c70 <HAL_RCC_OscConfig+0x13c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d000      	beq.n	8004b96 <HAL_RCC_OscConfig+0x62>
 8004b94:	e06c      	b.n	8004c70 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f000 fb4c 	bl	8005234 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x80>
 8004ba4:	4bb1      	ldr	r3, [pc, #708]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	4bb0      	ldr	r3, [pc, #704]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	0249      	lsls	r1, r1, #9
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e02f      	b.n	8004c14 <HAL_RCC_OscConfig+0xe0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10c      	bne.n	8004bd6 <HAL_RCC_OscConfig+0xa2>
 8004bbc:	4bab      	ldr	r3, [pc, #684]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	4baa      	ldr	r3, [pc, #680]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004bc2:	49ab      	ldr	r1, [pc, #684]	; (8004e70 <HAL_RCC_OscConfig+0x33c>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	4ba8      	ldr	r3, [pc, #672]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4ba7      	ldr	r3, [pc, #668]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004bce:	49a9      	ldr	r1, [pc, #676]	; (8004e74 <HAL_RCC_OscConfig+0x340>)
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e01e      	b.n	8004c14 <HAL_RCC_OscConfig+0xe0>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d10e      	bne.n	8004bfc <HAL_RCC_OscConfig+0xc8>
 8004bde:	4ba3      	ldr	r3, [pc, #652]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4ba2      	ldr	r3, [pc, #648]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004be4:	2180      	movs	r1, #128	; 0x80
 8004be6:	02c9      	lsls	r1, r1, #11
 8004be8:	430a      	orrs	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	4b9f      	ldr	r3, [pc, #636]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	4b9e      	ldr	r3, [pc, #632]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004bf2:	2180      	movs	r1, #128	; 0x80
 8004bf4:	0249      	lsls	r1, r1, #9
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e00b      	b.n	8004c14 <HAL_RCC_OscConfig+0xe0>
 8004bfc:	4b9b      	ldr	r3, [pc, #620]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b9a      	ldr	r3, [pc, #616]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004c02:	499b      	ldr	r1, [pc, #620]	; (8004e70 <HAL_RCC_OscConfig+0x33c>)
 8004c04:	400a      	ands	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	4b98      	ldr	r3, [pc, #608]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	4b97      	ldr	r3, [pc, #604]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004c0e:	4999      	ldr	r1, [pc, #612]	; (8004e74 <HAL_RCC_OscConfig+0x340>)
 8004c10:	400a      	ands	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d014      	beq.n	8004c46 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1c:	f7fe fcac 	bl	8003578 <HAL_GetTick>
 8004c20:	0003      	movs	r3, r0
 8004c22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c26:	f7fe fca7 	bl	8003578 <HAL_GetTick>
 8004c2a:	0002      	movs	r2, r0
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b64      	cmp	r3, #100	; 0x64
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e2fd      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c38:	4b8c      	ldr	r3, [pc, #560]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	029b      	lsls	r3, r3, #10
 8004c40:	4013      	ands	r3, r2
 8004c42:	d0f0      	beq.n	8004c26 <HAL_RCC_OscConfig+0xf2>
 8004c44:	e015      	b.n	8004c72 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7fe fc97 	bl	8003578 <HAL_GetTick>
 8004c4a:	0003      	movs	r3, r0
 8004c4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c50:	f7fe fc92 	bl	8003578 <HAL_GetTick>
 8004c54:	0002      	movs	r2, r0
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b64      	cmp	r3, #100	; 0x64
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e2e8      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c62:	4b82      	ldr	r3, [pc, #520]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	029b      	lsls	r3, r3, #10
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x11c>
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c70:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2202      	movs	r2, #2
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d100      	bne.n	8004c7e <HAL_RCC_OscConfig+0x14a>
 8004c7c:	e06c      	b.n	8004d58 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004c7e:	4b7b      	ldr	r3, [pc, #492]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	220c      	movs	r2, #12
 8004c84:	4013      	ands	r3, r2
 8004c86:	d00e      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004c88:	4b78      	ldr	r3, [pc, #480]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	220c      	movs	r2, #12
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d11f      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x1a0>
 8004c94:	4b75      	ldr	r3, [pc, #468]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	23c0      	movs	r3, #192	; 0xc0
 8004c9a:	025b      	lsls	r3, r3, #9
 8004c9c:	401a      	ands	r2, r3
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d116      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ca6:	4b71      	ldr	r3, [pc, #452]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2202      	movs	r2, #2
 8004cac:	4013      	ands	r3, r2
 8004cae:	d005      	beq.n	8004cbc <HAL_RCC_OscConfig+0x188>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e2bb      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	4b6b      	ldr	r3, [pc, #428]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	22f8      	movs	r2, #248	; 0xf8
 8004cc2:	4393      	bics	r3, r2
 8004cc4:	0019      	movs	r1, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00da      	lsls	r2, r3, #3
 8004ccc:	4b67      	ldr	r3, [pc, #412]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd2:	e041      	b.n	8004d58 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d024      	beq.n	8004d26 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cdc:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	4b62      	ldr	r3, [pc, #392]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce8:	f7fe fc46 	bl	8003578 <HAL_GetTick>
 8004cec:	0003      	movs	r3, r0
 8004cee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cf2:	f7fe fc41 	bl	8003578 <HAL_GetTick>
 8004cf6:	0002      	movs	r2, r0
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e297      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	4b59      	ldr	r3, [pc, #356]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	d0f1      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0e:	4b57      	ldr	r3, [pc, #348]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	22f8      	movs	r2, #248	; 0xf8
 8004d14:	4393      	bics	r3, r2
 8004d16:	0019      	movs	r1, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	00da      	lsls	r2, r3, #3
 8004d1e:	4b53      	ldr	r3, [pc, #332]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e018      	b.n	8004d58 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d26:	4b51      	ldr	r3, [pc, #324]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b50      	ldr	r3, [pc, #320]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	438a      	bics	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d32:	f7fe fc21 	bl	8003578 <HAL_GetTick>
 8004d36:	0003      	movs	r3, r0
 8004d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3c:	f7fe fc1c 	bl	8003578 <HAL_GetTick>
 8004d40:	0002      	movs	r2, r0
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e272      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d4e:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2202      	movs	r2, #2
 8004d54:	4013      	ands	r3, r2
 8004d56:	d1f1      	bne.n	8004d3c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d036      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d019      	beq.n	8004d9e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d6a:	4b40      	ldr	r3, [pc, #256]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d70:	2101      	movs	r1, #1
 8004d72:	430a      	orrs	r2, r1
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d76:	f7fe fbff 	bl	8003578 <HAL_GetTick>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d80:	f7fe fbfa 	bl	8003578 <HAL_GetTick>
 8004d84:	0002      	movs	r2, r0
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e250      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	2202      	movs	r2, #2
 8004d98:	4013      	ands	r3, r2
 8004d9a:	d0f1      	beq.n	8004d80 <HAL_RCC_OscConfig+0x24c>
 8004d9c:	e018      	b.n	8004dd0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d9e:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da2:	4b32      	ldr	r3, [pc, #200]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004da4:	2101      	movs	r1, #1
 8004da6:	438a      	bics	r2, r1
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004daa:	f7fe fbe5 	bl	8003578 <HAL_GetTick>
 8004dae:	0003      	movs	r3, r0
 8004db0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004db4:	f7fe fbe0 	bl	8003578 <HAL_GetTick>
 8004db8:	0002      	movs	r2, r0
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e236      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc6:	4b29      	ldr	r3, [pc, #164]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	2202      	movs	r2, #2
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d1f1      	bne.n	8004db4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d100      	bne.n	8004ddc <HAL_RCC_OscConfig+0x2a8>
 8004dda:	e0b5      	b.n	8004f48 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ddc:	201f      	movs	r0, #31
 8004dde:	183b      	adds	r3, r7, r0
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004de4:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	055b      	lsls	r3, r3, #21
 8004dec:	4013      	ands	r3, r2
 8004dee:	d110      	bne.n	8004e12 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	0549      	lsls	r1, r1, #21
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	61da      	str	r2, [r3, #28]
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004e00:	69da      	ldr	r2, [r3, #28]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	055b      	lsls	r3, r3, #21
 8004e06:	4013      	ands	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004e0c:	183b      	adds	r3, r7, r0
 8004e0e:	2201      	movs	r2, #1
 8004e10:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e12:	4b19      	ldr	r3, [pc, #100]	; (8004e78 <HAL_RCC_OscConfig+0x344>)
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	2380      	movs	r3, #128	; 0x80
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d11a      	bne.n	8004e54 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e1e:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <HAL_RCC_OscConfig+0x344>)
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_RCC_OscConfig+0x344>)
 8004e24:	2180      	movs	r1, #128	; 0x80
 8004e26:	0049      	lsls	r1, r1, #1
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e2c:	f7fe fba4 	bl	8003578 <HAL_GetTick>
 8004e30:	0003      	movs	r3, r0
 8004e32:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e36:	f7fe fb9f 	bl	8003578 <HAL_GetTick>
 8004e3a:	0002      	movs	r2, r0
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b64      	cmp	r3, #100	; 0x64
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e1f5      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_RCC_OscConfig+0x344>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	4013      	ands	r3, r2
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d10f      	bne.n	8004e7c <HAL_RCC_OscConfig+0x348>
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004e5e:	6a1a      	ldr	r2, [r3, #32]
 8004e60:	4b02      	ldr	r3, [pc, #8]	; (8004e6c <HAL_RCC_OscConfig+0x338>)
 8004e62:	2101      	movs	r1, #1
 8004e64:	430a      	orrs	r2, r1
 8004e66:	621a      	str	r2, [r3, #32]
 8004e68:	e036      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3a4>
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	fffeffff 	.word	0xfffeffff
 8004e74:	fffbffff 	.word	0xfffbffff
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10c      	bne.n	8004e9e <HAL_RCC_OscConfig+0x36a>
 8004e84:	4bca      	ldr	r3, [pc, #808]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004e86:	6a1a      	ldr	r2, [r3, #32]
 8004e88:	4bc9      	ldr	r3, [pc, #804]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	621a      	str	r2, [r3, #32]
 8004e90:	4bc7      	ldr	r3, [pc, #796]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004e92:	6a1a      	ldr	r2, [r3, #32]
 8004e94:	4bc6      	ldr	r3, [pc, #792]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004e96:	2104      	movs	r1, #4
 8004e98:	438a      	bics	r2, r1
 8004e9a:	621a      	str	r2, [r3, #32]
 8004e9c:	e01c      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3a4>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b05      	cmp	r3, #5
 8004ea4:	d10c      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x38c>
 8004ea6:	4bc2      	ldr	r3, [pc, #776]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004ea8:	6a1a      	ldr	r2, [r3, #32]
 8004eaa:	4bc1      	ldr	r3, [pc, #772]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004eac:	2104      	movs	r1, #4
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	621a      	str	r2, [r3, #32]
 8004eb2:	4bbf      	ldr	r3, [pc, #764]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	4bbe      	ldr	r3, [pc, #760]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004eb8:	2101      	movs	r1, #1
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	621a      	str	r2, [r3, #32]
 8004ebe:	e00b      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3a4>
 8004ec0:	4bbb      	ldr	r3, [pc, #748]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004ec2:	6a1a      	ldr	r2, [r3, #32]
 8004ec4:	4bba      	ldr	r3, [pc, #744]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004ec6:	2101      	movs	r1, #1
 8004ec8:	438a      	bics	r2, r1
 8004eca:	621a      	str	r2, [r3, #32]
 8004ecc:	4bb8      	ldr	r3, [pc, #736]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004ece:	6a1a      	ldr	r2, [r3, #32]
 8004ed0:	4bb7      	ldr	r3, [pc, #732]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004ed2:	2104      	movs	r1, #4
 8004ed4:	438a      	bics	r2, r1
 8004ed6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d014      	beq.n	8004f0a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee0:	f7fe fb4a 	bl	8003578 <HAL_GetTick>
 8004ee4:	0003      	movs	r3, r0
 8004ee6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee8:	e009      	b.n	8004efe <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fe fb45 	bl	8003578 <HAL_GetTick>
 8004eee:	0002      	movs	r2, r0
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	4aaf      	ldr	r2, [pc, #700]	; (80051b4 <HAL_RCC_OscConfig+0x680>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e19a      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efe:	4bac      	ldr	r3, [pc, #688]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	2202      	movs	r2, #2
 8004f04:	4013      	ands	r3, r2
 8004f06:	d0f0      	beq.n	8004eea <HAL_RCC_OscConfig+0x3b6>
 8004f08:	e013      	b.n	8004f32 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f0a:	f7fe fb35 	bl	8003578 <HAL_GetTick>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f12:	e009      	b.n	8004f28 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7fe fb30 	bl	8003578 <HAL_GetTick>
 8004f18:	0002      	movs	r2, r0
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	4aa5      	ldr	r2, [pc, #660]	; (80051b4 <HAL_RCC_OscConfig+0x680>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e185      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f28:	4ba1      	ldr	r3, [pc, #644]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f32:	231f      	movs	r3, #31
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d105      	bne.n	8004f48 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3c:	4b9c      	ldr	r3, [pc, #624]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	4b9b      	ldr	r3, [pc, #620]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f42:	499d      	ldr	r1, [pc, #628]	; (80051b8 <HAL_RCC_OscConfig+0x684>)
 8004f44:	400a      	ands	r2, r1
 8004f46:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	4013      	ands	r3, r2
 8004f50:	d063      	beq.n	800501a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d12a      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004f5a:	4b95      	ldr	r3, [pc, #596]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f5e:	4b94      	ldr	r3, [pc, #592]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f60:	2104      	movs	r1, #4
 8004f62:	430a      	orrs	r2, r1
 8004f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004f66:	4b92      	ldr	r3, [pc, #584]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f6a:	4b91      	ldr	r3, [pc, #580]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f72:	f7fe fb01 	bl	8003578 <HAL_GetTick>
 8004f76:	0003      	movs	r3, r0
 8004f78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004f7c:	f7fe fafc 	bl	8003578 <HAL_GetTick>
 8004f80:	0002      	movs	r2, r0
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e152      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004f8e:	4b88      	ldr	r3, [pc, #544]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	2202      	movs	r2, #2
 8004f94:	4013      	ands	r3, r2
 8004f96:	d0f1      	beq.n	8004f7c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004f98:	4b85      	ldr	r3, [pc, #532]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9c:	22f8      	movs	r2, #248	; 0xf8
 8004f9e:	4393      	bics	r3, r2
 8004fa0:	0019      	movs	r1, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	00da      	lsls	r2, r3, #3
 8004fa8:	4b81      	ldr	r3, [pc, #516]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004faa:	430a      	orrs	r2, r1
 8004fac:	635a      	str	r2, [r3, #52]	; 0x34
 8004fae:	e034      	b.n	800501a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	3305      	adds	r3, #5
 8004fb6:	d111      	bne.n	8004fdc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004fb8:	4b7d      	ldr	r3, [pc, #500]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fbc:	4b7c      	ldr	r3, [pc, #496]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004fbe:	2104      	movs	r1, #4
 8004fc0:	438a      	bics	r2, r1
 8004fc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004fc4:	4b7a      	ldr	r3, [pc, #488]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	22f8      	movs	r2, #248	; 0xf8
 8004fca:	4393      	bics	r3, r2
 8004fcc:	0019      	movs	r1, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	00da      	lsls	r2, r3, #3
 8004fd4:	4b76      	ldr	r3, [pc, #472]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8004fda:	e01e      	b.n	800501a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004fdc:	4b74      	ldr	r3, [pc, #464]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe0:	4b73      	ldr	r3, [pc, #460]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004fe2:	2104      	movs	r1, #4
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004fe8:	4b71      	ldr	r3, [pc, #452]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fec:	4b70      	ldr	r3, [pc, #448]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8004fee:	2101      	movs	r1, #1
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff4:	f7fe fac0 	bl	8003578 <HAL_GetTick>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ffe:	f7fe fabb 	bl	8003578 <HAL_GetTick>
 8005002:	0002      	movs	r2, r0
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e111      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005010:	4b67      	ldr	r3, [pc, #412]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	2202      	movs	r2, #2
 8005016:	4013      	ands	r3, r2
 8005018:	d1f1      	bne.n	8004ffe <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2220      	movs	r2, #32
 8005020:	4013      	ands	r3, r2
 8005022:	d05c      	beq.n	80050de <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005024:	4b62      	ldr	r3, [pc, #392]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	220c      	movs	r2, #12
 800502a:	4013      	ands	r3, r2
 800502c:	2b0c      	cmp	r3, #12
 800502e:	d00e      	beq.n	800504e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005030:	4b5f      	ldr	r3, [pc, #380]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	220c      	movs	r2, #12
 8005036:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005038:	2b08      	cmp	r3, #8
 800503a:	d114      	bne.n	8005066 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800503c:	4b5c      	ldr	r3, [pc, #368]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	23c0      	movs	r3, #192	; 0xc0
 8005042:	025b      	lsls	r3, r3, #9
 8005044:	401a      	ands	r2, r3
 8005046:	23c0      	movs	r3, #192	; 0xc0
 8005048:	025b      	lsls	r3, r3, #9
 800504a:	429a      	cmp	r2, r3
 800504c:	d10b      	bne.n	8005066 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800504e:	4b58      	ldr	r3, [pc, #352]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	029b      	lsls	r3, r3, #10
 8005056:	4013      	ands	r3, r2
 8005058:	d040      	beq.n	80050dc <HAL_RCC_OscConfig+0x5a8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d03c      	beq.n	80050dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0e6      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d01b      	beq.n	80050a6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800506e:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005072:	4b4f      	ldr	r3, [pc, #316]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	0249      	lsls	r1, r1, #9
 8005078:	430a      	orrs	r2, r1
 800507a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7fe fa7c 	bl	8003578 <HAL_GetTick>
 8005080:	0003      	movs	r3, r0
 8005082:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005086:	f7fe fa77 	bl	8003578 <HAL_GetTick>
 800508a:	0002      	movs	r2, r0
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e0cd      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005098:	4b45      	ldr	r3, [pc, #276]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 800509a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	029b      	lsls	r3, r3, #10
 80050a0:	4013      	ands	r3, r2
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCC_OscConfig+0x552>
 80050a4:	e01b      	b.n	80050de <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80050a6:	4b42      	ldr	r3, [pc, #264]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 80050a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 80050ac:	4943      	ldr	r1, [pc, #268]	; (80051bc <HAL_RCC_OscConfig+0x688>)
 80050ae:	400a      	ands	r2, r1
 80050b0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b2:	f7fe fa61 	bl	8003578 <HAL_GetTick>
 80050b6:	0003      	movs	r3, r0
 80050b8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050bc:	f7fe fa5c 	bl	8003578 <HAL_GetTick>
 80050c0:	0002      	movs	r2, r0
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e0b2      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80050ce:	4b38      	ldr	r3, [pc, #224]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 80050d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	029b      	lsls	r3, r3, #10
 80050d6:	4013      	ands	r3, r2
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0x588>
 80050da:	e000      	b.n	80050de <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80050dc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d100      	bne.n	80050e8 <HAL_RCC_OscConfig+0x5b4>
 80050e6:	e0a4      	b.n	8005232 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050e8:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	220c      	movs	r2, #12
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d100      	bne.n	80050f6 <HAL_RCC_OscConfig+0x5c2>
 80050f4:	e078      	b.n	80051e8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d14c      	bne.n	8005198 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fe:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005104:	492e      	ldr	r1, [pc, #184]	; (80051c0 <HAL_RCC_OscConfig+0x68c>)
 8005106:	400a      	ands	r2, r1
 8005108:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510a:	f7fe fa35 	bl	8003578 <HAL_GetTick>
 800510e:	0003      	movs	r3, r0
 8005110:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005114:	f7fe fa30 	bl	8003578 <HAL_GetTick>
 8005118:	0002      	movs	r2, r0
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e086      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005126:	4b22      	ldr	r3, [pc, #136]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	049b      	lsls	r3, r3, #18
 800512e:	4013      	ands	r3, r2
 8005130:	d1f0      	bne.n	8005114 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005132:	4b1f      	ldr	r3, [pc, #124]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	220f      	movs	r2, #15
 8005138:	4393      	bics	r3, r2
 800513a:	0019      	movs	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005140:	4b1b      	ldr	r3, [pc, #108]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005142:	430a      	orrs	r2, r1
 8005144:	62da      	str	r2, [r3, #44]	; 0x2c
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_RCC_OscConfig+0x690>)
 800514c:	4013      	ands	r3, r2
 800514e:	0019      	movs	r1, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005158:	431a      	orrs	r2, r3
 800515a:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 800515c:	430a      	orrs	r2, r1
 800515e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005160:	4b13      	ldr	r3, [pc, #76]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 8005166:	2180      	movs	r1, #128	; 0x80
 8005168:	0449      	lsls	r1, r1, #17
 800516a:	430a      	orrs	r2, r1
 800516c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516e:	f7fe fa03 	bl	8003578 <HAL_GetTick>
 8005172:	0003      	movs	r3, r0
 8005174:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005178:	f7fe f9fe 	bl	8003578 <HAL_GetTick>
 800517c:	0002      	movs	r2, r0
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b02      	cmp	r3, #2
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e054      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	049b      	lsls	r3, r3, #18
 8005192:	4013      	ands	r3, r2
 8005194:	d0f0      	beq.n	8005178 <HAL_RCC_OscConfig+0x644>
 8005196:	e04c      	b.n	8005232 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <HAL_RCC_OscConfig+0x67c>)
 800519e:	4908      	ldr	r1, [pc, #32]	; (80051c0 <HAL_RCC_OscConfig+0x68c>)
 80051a0:	400a      	ands	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a4:	f7fe f9e8 	bl	8003578 <HAL_GetTick>
 80051a8:	0003      	movs	r3, r0
 80051aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ac:	e015      	b.n	80051da <HAL_RCC_OscConfig+0x6a6>
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	40021000 	.word	0x40021000
 80051b4:	00001388 	.word	0x00001388
 80051b8:	efffffff 	.word	0xefffffff
 80051bc:	fffeffff 	.word	0xfffeffff
 80051c0:	feffffff 	.word	0xfeffffff
 80051c4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051c8:	f7fe f9d6 	bl	8003578 <HAL_GetTick>
 80051cc:	0002      	movs	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e02c      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051da:	4b18      	ldr	r3, [pc, #96]	; (800523c <HAL_RCC_OscConfig+0x708>)
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	049b      	lsls	r3, r3, #18
 80051e2:	4013      	ands	r3, r2
 80051e4:	d1f0      	bne.n	80051c8 <HAL_RCC_OscConfig+0x694>
 80051e6:	e024      	b.n	8005232 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e01f      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <HAL_RCC_OscConfig+0x708>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <HAL_RCC_OscConfig+0x708>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	23c0      	movs	r3, #192	; 0xc0
 8005204:	025b      	lsls	r3, r3, #9
 8005206:	401a      	ands	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	429a      	cmp	r2, r3
 800520e:	d10e      	bne.n	800522e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	220f      	movs	r2, #15
 8005214:	401a      	ands	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d107      	bne.n	800522e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	23f0      	movs	r3, #240	; 0xf0
 8005222:	039b      	lsls	r3, r3, #14
 8005224:	401a      	ands	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b008      	add	sp, #32
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40021000 	.word	0x40021000

08005240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0bf      	b.n	80053d4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005254:	4b61      	ldr	r3, [pc, #388]	; (80053dc <HAL_RCC_ClockConfig+0x19c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2201      	movs	r2, #1
 800525a:	4013      	ands	r3, r2
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d911      	bls.n	8005286 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005262:	4b5e      	ldr	r3, [pc, #376]	; (80053dc <HAL_RCC_ClockConfig+0x19c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2201      	movs	r2, #1
 8005268:	4393      	bics	r3, r2
 800526a:	0019      	movs	r1, r3
 800526c:	4b5b      	ldr	r3, [pc, #364]	; (80053dc <HAL_RCC_ClockConfig+0x19c>)
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005274:	4b59      	ldr	r3, [pc, #356]	; (80053dc <HAL_RCC_ClockConfig+0x19c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2201      	movs	r2, #1
 800527a:	4013      	ands	r3, r2
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d001      	beq.n	8005286 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e0a6      	b.n	80053d4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2202      	movs	r2, #2
 800528c:	4013      	ands	r3, r2
 800528e:	d015      	beq.n	80052bc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2204      	movs	r2, #4
 8005296:	4013      	ands	r3, r2
 8005298:	d006      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800529a:	4b51      	ldr	r3, [pc, #324]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4b50      	ldr	r3, [pc, #320]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 80052a0:	21e0      	movs	r1, #224	; 0xe0
 80052a2:	00c9      	lsls	r1, r1, #3
 80052a4:	430a      	orrs	r2, r1
 80052a6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a8:	4b4d      	ldr	r3, [pc, #308]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	22f0      	movs	r2, #240	; 0xf0
 80052ae:	4393      	bics	r3, r2
 80052b0:	0019      	movs	r1, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 80052b8:	430a      	orrs	r2, r1
 80052ba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	4013      	ands	r3, r2
 80052c4:	d04c      	beq.n	8005360 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d107      	bne.n	80052de <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ce:	4b44      	ldr	r3, [pc, #272]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	029b      	lsls	r3, r3, #10
 80052d6:	4013      	ands	r3, r2
 80052d8:	d120      	bne.n	800531c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e07a      	b.n	80053d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d107      	bne.n	80052f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e6:	4b3e      	ldr	r3, [pc, #248]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	049b      	lsls	r3, r3, #18
 80052ee:	4013      	ands	r3, r2
 80052f0:	d114      	bne.n	800531c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e06e      	b.n	80053d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d107      	bne.n	800530e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80052fe:	4b38      	ldr	r3, [pc, #224]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 8005300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005302:	2380      	movs	r3, #128	; 0x80
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	4013      	ands	r3, r2
 8005308:	d108      	bne.n	800531c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e062      	b.n	80053d4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800530e:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2202      	movs	r2, #2
 8005314:	4013      	ands	r3, r2
 8005316:	d101      	bne.n	800531c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e05b      	b.n	80053d4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800531c:	4b30      	ldr	r3, [pc, #192]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2203      	movs	r2, #3
 8005322:	4393      	bics	r3, r2
 8005324:	0019      	movs	r1, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	4b2d      	ldr	r3, [pc, #180]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 800532c:	430a      	orrs	r2, r1
 800532e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005330:	f7fe f922 	bl	8003578 <HAL_GetTick>
 8005334:	0003      	movs	r3, r0
 8005336:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005338:	e009      	b.n	800534e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533a:	f7fe f91d 	bl	8003578 <HAL_GetTick>
 800533e:	0002      	movs	r2, r0
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	4a27      	ldr	r2, [pc, #156]	; (80053e4 <HAL_RCC_ClockConfig+0x1a4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d901      	bls.n	800534e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e042      	b.n	80053d4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534e:	4b24      	ldr	r3, [pc, #144]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	220c      	movs	r2, #12
 8005354:	401a      	ands	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	429a      	cmp	r2, r3
 800535e:	d1ec      	bne.n	800533a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005360:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <HAL_RCC_ClockConfig+0x19c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2201      	movs	r2, #1
 8005366:	4013      	ands	r3, r2
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	429a      	cmp	r2, r3
 800536c:	d211      	bcs.n	8005392 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800536e:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <HAL_RCC_ClockConfig+0x19c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2201      	movs	r2, #1
 8005374:	4393      	bics	r3, r2
 8005376:	0019      	movs	r1, r3
 8005378:	4b18      	ldr	r3, [pc, #96]	; (80053dc <HAL_RCC_ClockConfig+0x19c>)
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005380:	4b16      	ldr	r3, [pc, #88]	; (80053dc <HAL_RCC_ClockConfig+0x19c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2201      	movs	r2, #1
 8005386:	4013      	ands	r3, r2
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d001      	beq.n	8005392 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e020      	b.n	80053d4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2204      	movs	r2, #4
 8005398:	4013      	ands	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <HAL_RCC_ClockConfig+0x1a8>)
 80053a2:	4013      	ands	r3, r2
 80053a4:	0019      	movs	r1, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	4b0d      	ldr	r3, [pc, #52]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80053b0:	f000 f820 	bl	80053f4 <HAL_RCC_GetSysClockFreq>
 80053b4:	0001      	movs	r1, r0
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <HAL_RCC_ClockConfig+0x1a0>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	220f      	movs	r2, #15
 80053be:	4013      	ands	r3, r2
 80053c0:	4a0a      	ldr	r2, [pc, #40]	; (80053ec <HAL_RCC_ClockConfig+0x1ac>)
 80053c2:	5cd3      	ldrb	r3, [r2, r3]
 80053c4:	000a      	movs	r2, r1
 80053c6:	40da      	lsrs	r2, r3
 80053c8:	4b09      	ldr	r3, [pc, #36]	; (80053f0 <HAL_RCC_ClockConfig+0x1b0>)
 80053ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80053cc:	2003      	movs	r0, #3
 80053ce:	f7fd ff53 	bl	8003278 <HAL_InitTick>
  
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b004      	add	sp, #16
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40021000 	.word	0x40021000
 80053e4:	00001388 	.word	0x00001388
 80053e8:	fffff8ff 	.word	0xfffff8ff
 80053ec:	08008a24 	.word	0x08008a24
 80053f0:	20000180 	.word	0x20000180

080053f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]
 8005402:	2300      	movs	r3, #0
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800540e:	4b2d      	ldr	r3, [pc, #180]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	220c      	movs	r2, #12
 8005418:	4013      	ands	r3, r2
 800541a:	2b0c      	cmp	r3, #12
 800541c:	d046      	beq.n	80054ac <HAL_RCC_GetSysClockFreq+0xb8>
 800541e:	d848      	bhi.n	80054b2 <HAL_RCC_GetSysClockFreq+0xbe>
 8005420:	2b04      	cmp	r3, #4
 8005422:	d002      	beq.n	800542a <HAL_RCC_GetSysClockFreq+0x36>
 8005424:	2b08      	cmp	r3, #8
 8005426:	d003      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x3c>
 8005428:	e043      	b.n	80054b2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800542a:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800542c:	613b      	str	r3, [r7, #16]
      break;
 800542e:	e043      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	0c9b      	lsrs	r3, r3, #18
 8005434:	220f      	movs	r2, #15
 8005436:	4013      	ands	r3, r2
 8005438:	4a24      	ldr	r2, [pc, #144]	; (80054cc <HAL_RCC_GetSysClockFreq+0xd8>)
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800543e:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	220f      	movs	r2, #15
 8005444:	4013      	ands	r3, r2
 8005446:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005448:	5cd3      	ldrb	r3, [r2, r3]
 800544a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	23c0      	movs	r3, #192	; 0xc0
 8005450:	025b      	lsls	r3, r3, #9
 8005452:	401a      	ands	r2, r3
 8005454:	2380      	movs	r3, #128	; 0x80
 8005456:	025b      	lsls	r3, r3, #9
 8005458:	429a      	cmp	r2, r3
 800545a:	d109      	bne.n	8005470 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800545c:	68b9      	ldr	r1, [r7, #8]
 800545e:	481a      	ldr	r0, [pc, #104]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005460:	f7fa fe52 	bl	8000108 <__udivsi3>
 8005464:	0003      	movs	r3, r0
 8005466:	001a      	movs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4353      	muls	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e01a      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	23c0      	movs	r3, #192	; 0xc0
 8005474:	025b      	lsls	r3, r3, #9
 8005476:	401a      	ands	r2, r3
 8005478:	23c0      	movs	r3, #192	; 0xc0
 800547a:	025b      	lsls	r3, r3, #9
 800547c:	429a      	cmp	r2, r3
 800547e:	d109      	bne.n	8005494 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005480:	68b9      	ldr	r1, [r7, #8]
 8005482:	4814      	ldr	r0, [pc, #80]	; (80054d4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005484:	f7fa fe40 	bl	8000108 <__udivsi3>
 8005488:	0003      	movs	r3, r0
 800548a:	001a      	movs	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4353      	muls	r3, r2
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	e008      	b.n	80054a6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005494:	68b9      	ldr	r1, [r7, #8]
 8005496:	480c      	ldr	r0, [pc, #48]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005498:	f7fa fe36 	bl	8000108 <__udivsi3>
 800549c:	0003      	movs	r3, r0
 800549e:	001a      	movs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4353      	muls	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	613b      	str	r3, [r7, #16]
      break;
 80054aa:	e005      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <HAL_RCC_GetSysClockFreq+0xe0>)
 80054ae:	613b      	str	r3, [r7, #16]
      break;
 80054b0:	e002      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054b2:	4b05      	ldr	r3, [pc, #20]	; (80054c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80054b4:	613b      	str	r3, [r7, #16]
      break;
 80054b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80054b8:	693b      	ldr	r3, [r7, #16]
}
 80054ba:	0018      	movs	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	b006      	add	sp, #24
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	40021000 	.word	0x40021000
 80054c8:	007a1200 	.word	0x007a1200
 80054cc:	08008a3c 	.word	0x08008a3c
 80054d0:	08008a4c 	.word	0x08008a4c
 80054d4:	02dc6c00 	.word	0x02dc6c00

080054d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80054de:	681b      	ldr	r3, [r3, #0]
}
 80054e0:	0018      	movs	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	20000180 	.word	0x20000180

080054ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80054f0:	f7ff fff2 	bl	80054d8 <HAL_RCC_GetHCLKFreq>
 80054f4:	0001      	movs	r1, r0
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	2207      	movs	r2, #7
 80054fe:	4013      	ands	r3, r2
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005502:	5cd3      	ldrb	r3, [r2, r3]
 8005504:	40d9      	lsrs	r1, r3
 8005506:	000b      	movs	r3, r1
}    
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	46c0      	nop			; (mov r8, r8)
 8005510:	40021000 	.word	0x40021000
 8005514:	08008a34 	.word	0x08008a34

08005518 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2207      	movs	r2, #7
 8005526:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005528:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <HAL_RCC_GetClockConfig+0x4c>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2203      	movs	r2, #3
 800552e:	401a      	ands	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <HAL_RCC_GetClockConfig+0x4c>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	22f0      	movs	r2, #240	; 0xf0
 800553a:	401a      	ands	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8005540:	4b08      	ldr	r3, [pc, #32]	; (8005564 <HAL_RCC_GetClockConfig+0x4c>)
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	23e0      	movs	r3, #224	; 0xe0
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	401a      	ands	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <HAL_RCC_GetClockConfig+0x50>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2201      	movs	r2, #1
 8005554:	401a      	ands	r2, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	601a      	str	r2, [r3, #0]
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	40021000 	.word	0x40021000
 8005568:	40022000 	.word	0x40022000

0800556c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e042      	b.n	8005604 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	223d      	movs	r2, #61	; 0x3d
 8005582:	5c9b      	ldrb	r3, [r3, r2]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d107      	bne.n	800559a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	223c      	movs	r2, #60	; 0x3c
 800558e:	2100      	movs	r1, #0
 8005590:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	0018      	movs	r0, r3
 8005596:	f7fd ff7b 	bl	8003490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	223d      	movs	r2, #61	; 0x3d
 800559e:	2102      	movs	r1, #2
 80055a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3304      	adds	r3, #4
 80055aa:	0019      	movs	r1, r3
 80055ac:	0010      	movs	r0, r2
 80055ae:	f000 fa89 	bl	8005ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2246      	movs	r2, #70	; 0x46
 80055b6:	2101      	movs	r1, #1
 80055b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	223e      	movs	r2, #62	; 0x3e
 80055be:	2101      	movs	r1, #1
 80055c0:	5499      	strb	r1, [r3, r2]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	223f      	movs	r2, #63	; 0x3f
 80055c6:	2101      	movs	r1, #1
 80055c8:	5499      	strb	r1, [r3, r2]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2240      	movs	r2, #64	; 0x40
 80055ce:	2101      	movs	r1, #1
 80055d0:	5499      	strb	r1, [r3, r2]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2241      	movs	r2, #65	; 0x41
 80055d6:	2101      	movs	r1, #1
 80055d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2242      	movs	r2, #66	; 0x42
 80055de:	2101      	movs	r1, #1
 80055e0:	5499      	strb	r1, [r3, r2]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2243      	movs	r2, #67	; 0x43
 80055e6:	2101      	movs	r1, #1
 80055e8:	5499      	strb	r1, [r3, r2]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2244      	movs	r2, #68	; 0x44
 80055ee:	2101      	movs	r1, #1
 80055f0:	5499      	strb	r1, [r3, r2]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2245      	movs	r2, #69	; 0x45
 80055f6:	2101      	movs	r1, #1
 80055f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	223d      	movs	r2, #61	; 0x3d
 80055fe:	2101      	movs	r1, #1
 8005600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	0018      	movs	r0, r3
 8005606:	46bd      	mov	sp, r7
 8005608:	b002      	add	sp, #8
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	223d      	movs	r2, #61	; 0x3d
 8005618:	5c9b      	ldrb	r3, [r3, r2]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d001      	beq.n	8005624 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e03b      	b.n	800569c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	223d      	movs	r2, #61	; 0x3d
 8005628:	2102      	movs	r1, #2
 800562a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2101      	movs	r1, #1
 8005638:	430a      	orrs	r2, r1
 800563a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <HAL_TIM_Base_Start_IT+0x98>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d00f      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x5a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	05db      	lsls	r3, r3, #23
 800564e:	429a      	cmp	r2, r3
 8005650:	d009      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x5a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a14      	ldr	r2, [pc, #80]	; (80056a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_TIM_Base_Start_IT+0x5a>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a12      	ldr	r2, [pc, #72]	; (80056ac <HAL_TIM_Base_Start_IT+0xa0>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d111      	bne.n	800568a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2207      	movs	r2, #7
 800566e:	4013      	ands	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b06      	cmp	r3, #6
 8005676:	d010      	beq.n	800569a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2101      	movs	r1, #1
 8005684:	430a      	orrs	r2, r1
 8005686:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005688:	e007      	b.n	800569a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2101      	movs	r1, #1
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b004      	add	sp, #16
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40012c00 	.word	0x40012c00
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40014000 	.word	0x40014000

080056b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2202      	movs	r2, #2
 80056c0:	4013      	ands	r3, r2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d124      	bne.n	8005710 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	2202      	movs	r2, #2
 80056ce:	4013      	ands	r3, r2
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d11d      	bne.n	8005710 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2203      	movs	r2, #3
 80056da:	4252      	negs	r2, r2
 80056dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	2203      	movs	r2, #3
 80056ec:	4013      	ands	r3, r2
 80056ee:	d004      	beq.n	80056fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	0018      	movs	r0, r3
 80056f4:	f000 f9ce 	bl	8005a94 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e007      	b.n	800570a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 f9c1 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0018      	movs	r0, r3
 8005706:	f000 f9cd 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	2204      	movs	r2, #4
 8005718:	4013      	ands	r3, r2
 800571a:	2b04      	cmp	r3, #4
 800571c:	d125      	bne.n	800576a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2204      	movs	r2, #4
 8005726:	4013      	ands	r3, r2
 8005728:	2b04      	cmp	r3, #4
 800572a:	d11e      	bne.n	800576a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2205      	movs	r2, #5
 8005732:	4252      	negs	r2, r2
 8005734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	699a      	ldr	r2, [r3, #24]
 8005742:	23c0      	movs	r3, #192	; 0xc0
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4013      	ands	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	0018      	movs	r0, r3
 800574e:	f000 f9a1 	bl	8005a94 <HAL_TIM_IC_CaptureCallback>
 8005752:	e007      	b.n	8005764 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	0018      	movs	r0, r3
 8005758:	f000 f994 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	0018      	movs	r0, r3
 8005760:	f000 f9a0 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2208      	movs	r2, #8
 8005772:	4013      	ands	r3, r2
 8005774:	2b08      	cmp	r3, #8
 8005776:	d124      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	2208      	movs	r2, #8
 8005780:	4013      	ands	r3, r2
 8005782:	2b08      	cmp	r3, #8
 8005784:	d11d      	bne.n	80057c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2209      	movs	r2, #9
 800578c:	4252      	negs	r2, r2
 800578e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2204      	movs	r2, #4
 8005794:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69db      	ldr	r3, [r3, #28]
 800579c:	2203      	movs	r2, #3
 800579e:	4013      	ands	r3, r2
 80057a0:	d004      	beq.n	80057ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	0018      	movs	r0, r3
 80057a6:	f000 f975 	bl	8005a94 <HAL_TIM_IC_CaptureCallback>
 80057aa:	e007      	b.n	80057bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	0018      	movs	r0, r3
 80057b0:	f000 f968 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 f974 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2210      	movs	r2, #16
 80057ca:	4013      	ands	r3, r2
 80057cc:	2b10      	cmp	r3, #16
 80057ce:	d125      	bne.n	800581c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	2210      	movs	r2, #16
 80057d8:	4013      	ands	r3, r2
 80057da:	2b10      	cmp	r3, #16
 80057dc:	d11e      	bne.n	800581c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2211      	movs	r2, #17
 80057e4:	4252      	negs	r2, r2
 80057e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2208      	movs	r2, #8
 80057ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69da      	ldr	r2, [r3, #28]
 80057f4:	23c0      	movs	r3, #192	; 0xc0
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4013      	ands	r3, r2
 80057fa:	d004      	beq.n	8005806 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	0018      	movs	r0, r3
 8005800:	f000 f948 	bl	8005a94 <HAL_TIM_IC_CaptureCallback>
 8005804:	e007      	b.n	8005816 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 f93b 	bl	8005a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 f947 	bl	8005aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	2201      	movs	r2, #1
 8005824:	4013      	ands	r3, r2
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10f      	bne.n	800584a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	4013      	ands	r3, r2
 8005834:	2b01      	cmp	r3, #1
 8005836:	d108      	bne.n	800584a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2202      	movs	r2, #2
 800583e:	4252      	negs	r2, r2
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	0018      	movs	r0, r3
 8005846:	f7fd fc7d 	bl	8003144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2280      	movs	r2, #128	; 0x80
 8005852:	4013      	ands	r3, r2
 8005854:	2b80      	cmp	r3, #128	; 0x80
 8005856:	d10f      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2280      	movs	r2, #128	; 0x80
 8005860:	4013      	ands	r3, r2
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d108      	bne.n	8005878 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2281      	movs	r2, #129	; 0x81
 800586c:	4252      	negs	r2, r2
 800586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	0018      	movs	r0, r3
 8005874:	f000 faa6 	bl	8005dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	2240      	movs	r2, #64	; 0x40
 8005880:	4013      	ands	r3, r2
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d10f      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	2240      	movs	r2, #64	; 0x40
 800588e:	4013      	ands	r3, r2
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d108      	bne.n	80058a6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2241      	movs	r2, #65	; 0x41
 800589a:	4252      	negs	r2, r2
 800589c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f000 f907 	bl	8005ab4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2220      	movs	r2, #32
 80058ae:	4013      	ands	r3, r2
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d10f      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	2220      	movs	r2, #32
 80058bc:	4013      	ands	r3, r2
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d108      	bne.n	80058d4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2221      	movs	r2, #33	; 0x21
 80058c8:	4252      	negs	r2, r2
 80058ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f000 fa70 	bl	8005db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e6:	230f      	movs	r3, #15
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	223c      	movs	r2, #60	; 0x3c
 80058f2:	5c9b      	ldrb	r3, [r3, r2]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIM_ConfigClockSource+0x20>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e0bc      	b.n	8005a76 <HAL_TIM_ConfigClockSource+0x19a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	223c      	movs	r2, #60	; 0x3c
 8005900:	2101      	movs	r1, #1
 8005902:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	223d      	movs	r2, #61	; 0x3d
 8005908:	2102      	movs	r1, #2
 800590a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2277      	movs	r2, #119	; 0x77
 8005918:	4393      	bics	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	4a58      	ldr	r2, [pc, #352]	; (8005a80 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005920:	4013      	ands	r3, r2
 8005922:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2280      	movs	r2, #128	; 0x80
 8005932:	0192      	lsls	r2, r2, #6
 8005934:	4293      	cmp	r3, r2
 8005936:	d040      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0xde>
 8005938:	2280      	movs	r2, #128	; 0x80
 800593a:	0192      	lsls	r2, r2, #6
 800593c:	4293      	cmp	r3, r2
 800593e:	d900      	bls.n	8005942 <HAL_TIM_ConfigClockSource+0x66>
 8005940:	e088      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
 8005942:	2280      	movs	r2, #128	; 0x80
 8005944:	0152      	lsls	r2, r2, #5
 8005946:	4293      	cmp	r3, r2
 8005948:	d100      	bne.n	800594c <HAL_TIM_ConfigClockSource+0x70>
 800594a:	e088      	b.n	8005a5e <HAL_TIM_ConfigClockSource+0x182>
 800594c:	2280      	movs	r2, #128	; 0x80
 800594e:	0152      	lsls	r2, r2, #5
 8005950:	4293      	cmp	r3, r2
 8005952:	d900      	bls.n	8005956 <HAL_TIM_ConfigClockSource+0x7a>
 8005954:	e07e      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
 8005956:	2b70      	cmp	r3, #112	; 0x70
 8005958:	d018      	beq.n	800598c <HAL_TIM_ConfigClockSource+0xb0>
 800595a:	d900      	bls.n	800595e <HAL_TIM_ConfigClockSource+0x82>
 800595c:	e07a      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
 800595e:	2b60      	cmp	r3, #96	; 0x60
 8005960:	d04f      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x126>
 8005962:	d900      	bls.n	8005966 <HAL_TIM_ConfigClockSource+0x8a>
 8005964:	e076      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
 8005966:	2b50      	cmp	r3, #80	; 0x50
 8005968:	d03b      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x106>
 800596a:	d900      	bls.n	800596e <HAL_TIM_ConfigClockSource+0x92>
 800596c:	e072      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d057      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x146>
 8005972:	d900      	bls.n	8005976 <HAL_TIM_ConfigClockSource+0x9a>
 8005974:	e06e      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
 8005976:	2b30      	cmp	r3, #48	; 0x30
 8005978:	d063      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x166>
 800597a:	d86b      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
 800597c:	2b20      	cmp	r3, #32
 800597e:	d060      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x166>
 8005980:	d868      	bhi.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
 8005982:	2b00      	cmp	r3, #0
 8005984:	d05d      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x166>
 8005986:	2b10      	cmp	r3, #16
 8005988:	d05b      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x166>
 800598a:	e063      	b.n	8005a54 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	6899      	ldr	r1, [r3, #8]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f000 f98c 	bl	8005cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2277      	movs	r2, #119	; 0x77
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
      break;
 80059b8:	e052      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6899      	ldr	r1, [r3, #8]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f000 f975 	bl	8005cb8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2180      	movs	r1, #128	; 0x80
 80059da:	01c9      	lsls	r1, r1, #7
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]
      break;
 80059e0:	e03e      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6859      	ldr	r1, [r3, #4]
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	001a      	movs	r2, r3
 80059f0:	f000 f8e8 	bl	8005bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2150      	movs	r1, #80	; 0x50
 80059fa:	0018      	movs	r0, r3
 80059fc:	f000 f942 	bl	8005c84 <TIM_ITRx_SetConfig>
      break;
 8005a00:	e02e      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6859      	ldr	r1, [r3, #4]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	001a      	movs	r2, r3
 8005a10:	f000 f906 	bl	8005c20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2160      	movs	r1, #96	; 0x60
 8005a1a:	0018      	movs	r0, r3
 8005a1c:	f000 f932 	bl	8005c84 <TIM_ITRx_SetConfig>
      break;
 8005a20:	e01e      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	001a      	movs	r2, r3
 8005a30:	f000 f8c8 	bl	8005bc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2140      	movs	r1, #64	; 0x40
 8005a3a:	0018      	movs	r0, r3
 8005a3c:	f000 f922 	bl	8005c84 <TIM_ITRx_SetConfig>
      break;
 8005a40:	e00e      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	0019      	movs	r1, r3
 8005a4c:	0010      	movs	r0, r2
 8005a4e:	f000 f919 	bl	8005c84 <TIM_ITRx_SetConfig>
      break;
 8005a52:	e005      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005a54:	230f      	movs	r3, #15
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
      break;
 8005a5c:	e000      	b.n	8005a60 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005a5e:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	223d      	movs	r2, #61	; 0x3d
 8005a64:	2101      	movs	r1, #1
 8005a66:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	223c      	movs	r2, #60	; 0x3c
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	5499      	strb	r1, [r3, r2]

  return status;
 8005a70:	230f      	movs	r3, #15
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	781b      	ldrb	r3, [r3, #0]
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b004      	add	sp, #16
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			; (mov r8, r8)
 8005a80:	ffff00ff 	.word	0xffff00ff

08005a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a8c:	46c0      	nop			; (mov r8, r8)
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b002      	add	sp, #8
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a9c:	46c0      	nop			; (mov r8, r8)
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b002      	add	sp, #8
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b002      	add	sp, #8
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b002      	add	sp, #8
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a34      	ldr	r2, [pc, #208]	; (8005ba8 <TIM_Base_SetConfig+0xe4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d008      	beq.n	8005aee <TIM_Base_SetConfig+0x2a>
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	2380      	movs	r3, #128	; 0x80
 8005ae0:	05db      	lsls	r3, r3, #23
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d003      	beq.n	8005aee <TIM_Base_SetConfig+0x2a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a30      	ldr	r2, [pc, #192]	; (8005bac <TIM_Base_SetConfig+0xe8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d108      	bne.n	8005b00 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2270      	movs	r2, #112	; 0x70
 8005af2:	4393      	bics	r3, r2
 8005af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <TIM_Base_SetConfig+0xe4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d018      	beq.n	8005b3a <TIM_Base_SetConfig+0x76>
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	2380      	movs	r3, #128	; 0x80
 8005b0c:	05db      	lsls	r3, r3, #23
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d013      	beq.n	8005b3a <TIM_Base_SetConfig+0x76>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a25      	ldr	r2, [pc, #148]	; (8005bac <TIM_Base_SetConfig+0xe8>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00f      	beq.n	8005b3a <TIM_Base_SetConfig+0x76>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a24      	ldr	r2, [pc, #144]	; (8005bb0 <TIM_Base_SetConfig+0xec>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00b      	beq.n	8005b3a <TIM_Base_SetConfig+0x76>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a23      	ldr	r2, [pc, #140]	; (8005bb4 <TIM_Base_SetConfig+0xf0>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <TIM_Base_SetConfig+0x76>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a22      	ldr	r2, [pc, #136]	; (8005bb8 <TIM_Base_SetConfig+0xf4>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_Base_SetConfig+0x76>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <TIM_Base_SetConfig+0xf8>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d108      	bne.n	8005b4c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a20      	ldr	r2, [pc, #128]	; (8005bc0 <TIM_Base_SetConfig+0xfc>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2280      	movs	r2, #128	; 0x80
 8005b50:	4393      	bics	r3, r2
 8005b52:	001a      	movs	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <TIM_Base_SetConfig+0xe4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00b      	beq.n	8005b92 <TIM_Base_SetConfig+0xce>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <TIM_Base_SetConfig+0xf0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <TIM_Base_SetConfig+0xce>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a0c      	ldr	r2, [pc, #48]	; (8005bb8 <TIM_Base_SetConfig+0xf4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d003      	beq.n	8005b92 <TIM_Base_SetConfig+0xce>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <TIM_Base_SetConfig+0xf8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d103      	bne.n	8005b9a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	615a      	str	r2, [r3, #20]
}
 8005ba0:	46c0      	nop			; (mov r8, r8)
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b004      	add	sp, #16
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40012c00 	.word	0x40012c00
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40002000 	.word	0x40002000
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800
 8005bc0:	fffffcff 	.word	0xfffffcff

08005bc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	4393      	bics	r3, r2
 8005bde:	001a      	movs	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	22f0      	movs	r2, #240	; 0xf0
 8005bee:	4393      	bics	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	011b      	lsls	r3, r3, #4
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	220a      	movs	r2, #10
 8005c00:	4393      	bics	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	621a      	str	r2, [r3, #32]
}
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b006      	add	sp, #24
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	2210      	movs	r2, #16
 8005c32:	4393      	bics	r3, r2
 8005c34:	001a      	movs	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <TIM_TI2_ConfigInputStage+0x60>)
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	031b      	lsls	r3, r3, #12
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	22a0      	movs	r2, #160	; 0xa0
 8005c5c:	4393      	bics	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	621a      	str	r2, [r3, #32]
}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	b006      	add	sp, #24
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	ffff0fff 	.word	0xffff0fff

08005c84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2270      	movs	r2, #112	; 0x70
 8005c98:	4393      	bics	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	2207      	movs	r2, #7
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	609a      	str	r2, [r3, #8]
}
 8005cae:	46c0      	nop			; (mov r8, r8)
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b004      	add	sp, #16
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	4a09      	ldr	r2, [pc, #36]	; (8005cf4 <TIM_ETR_SetConfig+0x3c>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	021a      	lsls	r2, r3, #8
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	697a      	ldr	r2, [r7, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	609a      	str	r2, [r3, #8]
}
 8005cec:	46c0      	nop			; (mov r8, r8)
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b006      	add	sp, #24
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	ffff00ff 	.word	0xffff00ff

08005cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	223c      	movs	r2, #60	; 0x3c
 8005d06:	5c9b      	ldrb	r3, [r3, r2]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d101      	bne.n	8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e047      	b.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	223c      	movs	r2, #60	; 0x3c
 8005d14:	2101      	movs	r1, #1
 8005d16:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	223d      	movs	r2, #61	; 0x3d
 8005d1c:	2102      	movs	r1, #2
 8005d1e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2270      	movs	r2, #112	; 0x70
 8005d34:	4393      	bics	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a16      	ldr	r2, [pc, #88]	; (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d00f      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	05db      	lsls	r3, r3, #23
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a11      	ldr	r2, [pc, #68]	; (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10c      	bne.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2280      	movs	r2, #128	; 0x80
 8005d78:	4393      	bics	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	223d      	movs	r2, #61	; 0x3d
 8005d92:	2101      	movs	r1, #1
 8005d94:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	223c      	movs	r2, #60	; 0x3c
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	0018      	movs	r0, r3
 8005da2:	46bd      	mov	sp, r7
 8005da4:	b004      	add	sp, #16
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40012c00 	.word	0x40012c00
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40014000 	.word	0x40014000

08005db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	b002      	add	sp, #8
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dcc:	46c0      	nop			; (mov r8, r8)
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b002      	add	sp, #8
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dda:	f3ef 8305 	mrs	r3, IPSR
 8005dde:	60bb      	str	r3, [r7, #8]
  return(result);
 8005de0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <osKernelInitialize+0x26>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005de6:	f3ef 8310 	mrs	r3, PRIMASK
 8005dea:	607b      	str	r3, [r7, #4]
  return(result);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d007      	beq.n	8005e02 <osKernelInitialize+0x2e>
 8005df2:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <osKernelInitialize+0x54>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d103      	bne.n	8005e02 <osKernelInitialize+0x2e>
    stat = osErrorISR;
 8005dfa:	2306      	movs	r3, #6
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	e00c      	b.n	8005e1c <osKernelInitialize+0x48>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <osKernelInitialize+0x54>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <osKernelInitialize+0x42>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e0a:	4b07      	ldr	r3, [pc, #28]	; (8005e28 <osKernelInitialize+0x54>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e002      	b.n	8005e1c <osKernelInitialize+0x48>
    } else {
      stat = osError;
 8005e16:	2301      	movs	r3, #1
 8005e18:	425b      	negs	r3, r3
 8005e1a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
}
 8005e1e:	0018      	movs	r0, r3
 8005e20:	46bd      	mov	sp, r7
 8005e22:	b004      	add	sp, #16
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	20000504 	.word	0x20000504

08005e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b084      	sub	sp, #16
 8005e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e32:	f3ef 8305 	mrs	r3, IPSR
 8005e36:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <osKernelStart+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e42:	607b      	str	r3, [r7, #4]
  return(result);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d007      	beq.n	8005e5a <osKernelStart+0x2e>
 8005e4a:	4b0e      	ldr	r3, [pc, #56]	; (8005e84 <osKernelStart+0x58>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d103      	bne.n	8005e5a <osKernelStart+0x2e>
    stat = osErrorISR;
 8005e52:	2306      	movs	r3, #6
 8005e54:	425b      	negs	r3, r3
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	e00e      	b.n	8005e78 <osKernelStart+0x4c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e5a:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <osKernelStart+0x58>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d107      	bne.n	8005e72 <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8005e62:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <osKernelStart+0x58>)
 8005e64:	2202      	movs	r2, #2
 8005e66:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005e68:	f001 f850 	bl	8006f0c <vTaskStartScheduler>
      stat = osOK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	e002      	b.n	8005e78 <osKernelStart+0x4c>
    } else {
      stat = osError;
 8005e72:	2301      	movs	r3, #1
 8005e74:	425b      	negs	r3, r3
 8005e76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e78:	68fb      	ldr	r3, [r7, #12]
}
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	b004      	add	sp, #16
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	46c0      	nop			; (mov r8, r8)
 8005e84:	20000504 	.word	0x20000504

08005e88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e88:	b5b0      	push	{r4, r5, r7, lr}
 8005e8a:	b090      	sub	sp, #64	; 0x40
 8005e8c:	af04      	add	r7, sp, #16
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e98:	f3ef 8305 	mrs	r3, IPSR
 8005e9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005e9e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d000      	beq.n	8005ea6 <osThreadNew+0x1e>
 8005ea4:	e090      	b.n	8005fc8 <osThreadNew+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ea6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eaa:	61bb      	str	r3, [r7, #24]
  return(result);
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d004      	beq.n	8005ebc <osThreadNew+0x34>
 8005eb2:	4b48      	ldr	r3, [pc, #288]	; (8005fd4 <osThreadNew+0x14c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d100      	bne.n	8005ebc <osThreadNew+0x34>
 8005eba:	e085      	b.n	8005fc8 <osThreadNew+0x140>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d100      	bne.n	8005ec4 <osThreadNew+0x3c>
 8005ec2:	e081      	b.n	8005fc8 <osThreadNew+0x140>
    stack = configMINIMAL_STACK_SIZE;
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005ec8:	2318      	movs	r3, #24
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24

    empty = '\0';
 8005ecc:	2117      	movs	r1, #23
 8005ece:	187b      	adds	r3, r7, r1
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	701a      	strb	r2, [r3, #0]
    name  = &empty;
 8005ed4:	187b      	adds	r3, r7, r1
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem   = -1;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	425b      	negs	r3, r3
 8005edc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d044      	beq.n	8005f6e <osThreadNew+0xe6>
      if (attr->name != NULL) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <osThreadNew+0x6a>
        name = attr->name;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <osThreadNew+0x8e>
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	2b38      	cmp	r3, #56	; 0x38
 8005f0a:	d804      	bhi.n	8005f16 <osThreadNew+0x8e>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	4013      	ands	r3, r2
 8005f14:	d001      	beq.n	8005f1a <osThreadNew+0x92>
        return (NULL);
 8005f16:	2300      	movs	r3, #0
 8005f18:	e057      	b.n	8005fca <osThreadNew+0x142>
      }

      if (attr->stack_size > 0U) {
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <osThreadNew+0xa2>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	089b      	lsrs	r3, r3, #2
 8005f28:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <osThreadNew+0xc8>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2bbb      	cmp	r3, #187	; 0xbb
 8005f38:	d90a      	bls.n	8005f50 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d006      	beq.n	8005f50 <osThreadNew+0xc8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <osThreadNew+0xc8>
        mem = 1;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	623b      	str	r3, [r7, #32]
 8005f4e:	e010      	b.n	8005f72 <osThreadNew+0xea>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d10c      	bne.n	8005f72 <osThreadNew+0xea>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d108      	bne.n	8005f72 <osThreadNew+0xea>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d104      	bne.n	8005f72 <osThreadNew+0xea>
          mem = 0;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	623b      	str	r3, [r7, #32]
 8005f6c:	e001      	b.n	8005f72 <osThreadNew+0xea>
        }
      }
    }
    else {
      mem = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d112      	bne.n	8005f9e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691a      	ldr	r2, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	689b      	ldr	r3, [r3, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f80:	68bd      	ldr	r5, [r7, #8]
 8005f82:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8005f84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	9302      	str	r3, [sp, #8]
 8005f8a:	9201      	str	r2, [sp, #4]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	002b      	movs	r3, r5
 8005f92:	0022      	movs	r2, r4
 8005f94:	f000 fe05 	bl	8006ba2 <xTaskCreateStatic>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	e014      	b.n	8005fc8 <osThreadNew+0x140>
    }
    else {
      if (mem == 0) {
 8005f9e:	6a3b      	ldr	r3, [r7, #32]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d111      	bne.n	8005fc8 <osThreadNew+0x140>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68bc      	ldr	r4, [r7, #8]
 8005faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	2310      	movs	r3, #16
 8005fb0:	18fb      	adds	r3, r7, r3
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	9300      	str	r3, [sp, #0]
 8005fb8:	0023      	movs	r3, r4
 8005fba:	f000 fe35 	bl	8006c28 <xTaskCreate>
 8005fbe:	0003      	movs	r3, r0
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d001      	beq.n	8005fc8 <osThreadNew+0x140>
          hTask = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fc8:	693b      	ldr	r3, [r7, #16]
}
 8005fca:	0018      	movs	r0, r3
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	b00c      	add	sp, #48	; 0x30
 8005fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005fd2:	46c0      	nop			; (mov r8, r8)
 8005fd4:	20000504 	.word	0x20000504

08005fd8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe0:	f3ef 8305 	mrs	r3, IPSR
 8005fe4:	613b      	str	r3, [r7, #16]
  return(result);
 8005fe6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d109      	bne.n	8006000 <osDelay+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fec:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d007      	beq.n	8006008 <osDelay+0x30>
 8005ff8:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <osDelay+0x4c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d103      	bne.n	8006008 <osDelay+0x30>
    stat = osErrorISR;
 8006000:	2306      	movs	r3, #6
 8006002:	425b      	negs	r3, r3
 8006004:	617b      	str	r3, [r7, #20]
 8006006:	e008      	b.n	800601a <osDelay+0x42>
  }
  else {
    stat = osOK;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <osDelay+0x42>
      vTaskDelay(ticks);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	0018      	movs	r0, r3
 8006016:	f000 ff53 	bl	8006ec0 <vTaskDelay>
    }
  }

  return (stat);
 800601a:	697b      	ldr	r3, [r7, #20]
}
 800601c:	0018      	movs	r0, r3
 800601e:	46bd      	mov	sp, r7
 8006020:	b006      	add	sp, #24
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000504 	.word	0x20000504

08006028 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006028:	b590      	push	{r4, r7, lr}
 800602a:	b08d      	sub	sp, #52	; 0x34
 800602c:	af02      	add	r7, sp, #8
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006038:	f3ef 8305 	mrs	r3, IPSR
 800603c:	61bb      	str	r3, [r7, #24]
  return(result);
 800603e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006040:	2b00      	cmp	r3, #0
 8006042:	d000      	beq.n	8006046 <osMessageQueueNew+0x1e>
 8006044:	e06f      	b.n	8006126 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006046:	f3ef 8310 	mrs	r3, PRIMASK
 800604a:	617b      	str	r3, [r7, #20]
  return(result);
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <osMessageQueueNew+0x34>
 8006052:	4b37      	ldr	r3, [pc, #220]	; (8006130 <osMessageQueueNew+0x108>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b02      	cmp	r3, #2
 8006058:	d100      	bne.n	800605c <osMessageQueueNew+0x34>
 800605a:	e064      	b.n	8006126 <osMessageQueueNew+0xfe>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d100      	bne.n	8006064 <osMessageQueueNew+0x3c>
 8006062:	e060      	b.n	8006126 <osMessageQueueNew+0xfe>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d05d      	beq.n	8006126 <osMessageQueueNew+0xfe>
    mem = -1;
 800606a:	2301      	movs	r3, #1
 800606c:	425b      	negs	r3, r3
 800606e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d028      	beq.n	80060c8 <osMessageQueueNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d011      	beq.n	80060a2 <osMessageQueueNew+0x7a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2b4f      	cmp	r3, #79	; 0x4f
 8006084:	d90d      	bls.n	80060a2 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695a      	ldr	r2, [r3, #20]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	434b      	muls	r3, r1
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <osMessageQueueNew+0x7a>
        mem = 1;
 800609c:	2301      	movs	r3, #1
 800609e:	623b      	str	r3, [r7, #32]
 80060a0:	e014      	b.n	80060cc <osMessageQueueNew+0xa4>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d110      	bne.n	80060cc <osMessageQueueNew+0xa4>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10c      	bne.n	80060cc <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d108      	bne.n	80060cc <osMessageQueueNew+0xa4>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <osMessageQueueNew+0xa4>
          mem = 0;
 80060c2:	2300      	movs	r3, #0
 80060c4:	623b      	str	r3, [r7, #32]
 80060c6:	e001      	b.n	80060cc <osMessageQueueNew+0xa4>
        }
      }
    }
    else {
      mem = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d10c      	bne.n	80060ec <osMessageQueueNew+0xc4>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	68b9      	ldr	r1, [r7, #8]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	2400      	movs	r4, #0
 80060e0:	9400      	str	r4, [sp, #0]
 80060e2:	f000 f954 	bl	800638e <xQueueGenericCreateStatic>
 80060e6:	0003      	movs	r3, r0
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ea:	e00a      	b.n	8006102 <osMessageQueueNew+0xda>
    }
    else {
      if (mem == 0) {
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d107      	bne.n	8006102 <osMessageQueueNew+0xda>
        hQueue = xQueueCreate (msg_count, msg_size);
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	0018      	movs	r0, r3
 80060fa:	f000 f993 	bl	8006424 <xQueueGenericCreate>
 80060fe:	0003      	movs	r3, r0
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00e      	beq.n	8006126 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <osMessageQueueNew+0xee>
        name = attr->name;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e001      	b.n	800611a <osMessageQueueNew+0xf2>
      } else {
        name = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	0011      	movs	r1, r2
 8006120:	0018      	movs	r0, r3
 8006122:	f000 fce3 	bl	8006aec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006128:	0018      	movs	r0, r3
 800612a:	46bd      	mov	sp, r7
 800612c:	b00b      	add	sp, #44	; 0x2c
 800612e:	bd90      	pop	{r4, r7, pc}
 8006130:	20000504 	.word	0x20000504

08006134 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a06      	ldr	r2, [pc, #24]	; (800615c <vApplicationGetIdleTaskMemory+0x28>)
 8006144:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	4a05      	ldr	r2, [pc, #20]	; (8006160 <vApplicationGetIdleTaskMemory+0x2c>)
 800614a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2280      	movs	r2, #128	; 0x80
 8006150:	601a      	str	r2, [r3, #0]
}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	46bd      	mov	sp, r7
 8006156:	b004      	add	sp, #16
 8006158:	bd80      	pop	{r7, pc}
 800615a:	46c0      	nop			; (mov r8, r8)
 800615c:	20000508 	.word	0x20000508
 8006160:	200005c4 	.word	0x200005c4

08006164 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a06      	ldr	r2, [pc, #24]	; (800618c <vApplicationGetTimerTaskMemory+0x28>)
 8006174:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4a05      	ldr	r2, [pc, #20]	; (8006190 <vApplicationGetTimerTaskMemory+0x2c>)
 800617a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2280      	movs	r2, #128	; 0x80
 8006180:	0052      	lsls	r2, r2, #1
 8006182:	601a      	str	r2, [r3, #0]
}
 8006184:	46c0      	nop			; (mov r8, r8)
 8006186:	46bd      	mov	sp, r7
 8006188:	b004      	add	sp, #16
 800618a:	bd80      	pop	{r7, pc}
 800618c:	200007c4 	.word	0x200007c4
 8006190:	20000880 	.word	0x20000880

08006194 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3308      	adds	r3, #8
 80061a0:	001a      	movs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	4252      	negs	r2, r2
 80061ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3308      	adds	r3, #8
 80061b2:	001a      	movs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3308      	adds	r3, #8
 80061bc:	001a      	movs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061c8:	46c0      	nop			; (mov r8, r8)
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b002      	add	sp, #8
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	46bd      	mov	sp, r7
 80061e2:	b002      	add	sp, #8
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	1c5a      	adds	r2, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
}
 8006222:	46c0      	nop			; (mov r8, r8)
 8006224:	46bd      	mov	sp, r7
 8006226:	b004      	add	sp, #16
 8006228:	bd80      	pop	{r7, pc}

0800622a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	3301      	adds	r3, #1
 800623e:	d103      	bne.n	8006248 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	691b      	ldr	r3, [r3, #16]
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	e00c      	b.n	8006262 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3308      	adds	r3, #8
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	e002      	b.n	8006256 <vListInsert+0x2c>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	429a      	cmp	r2, r3
 8006260:	d2f6      	bcs.n	8006250 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	601a      	str	r2, [r3, #0]
}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	46bd      	mov	sp, r7
 8006292:	b004      	add	sp, #16
 8006294:	bd80      	pop	{r7, pc}

08006296 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6892      	ldr	r2, [r2, #8]
 80062ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6852      	ldr	r2, [r2, #4]
 80062b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d103      	bne.n	80062ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689a      	ldr	r2, [r3, #8]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	1e5a      	subs	r2, r3, #1
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	b004      	add	sp, #16
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b084      	sub	sp, #16
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <xQueueGenericReset+0x18>
 80062fa:	b672      	cpsid	i
 80062fc:	e7fe      	b.n	80062fc <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80062fe:	f001 fe2f 	bl	8007f60 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	434b      	muls	r3, r1
 8006310:	18d2      	adds	r2, r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632c:	1e59      	subs	r1, r3, #1
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	434b      	muls	r3, r1
 8006334:	18d2      	adds	r2, r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2244      	movs	r2, #68	; 0x44
 800633e:	21ff      	movs	r1, #255	; 0xff
 8006340:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2245      	movs	r2, #69	; 0x45
 8006346:	21ff      	movs	r1, #255	; 0xff
 8006348:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d10d      	bne.n	800636c <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d013      	beq.n	8006380 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3310      	adds	r3, #16
 800635c:	0018      	movs	r0, r3
 800635e:	f001 f82b 	bl	80073b8 <xTaskRemoveFromEventList>
 8006362:	1e03      	subs	r3, r0, #0
 8006364:	d00c      	beq.n	8006380 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006366:	f001 fdeb 	bl	8007f40 <vPortYield>
 800636a:	e009      	b.n	8006380 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3310      	adds	r3, #16
 8006370:	0018      	movs	r0, r3
 8006372:	f7ff ff0f 	bl	8006194 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3324      	adds	r3, #36	; 0x24
 800637a:	0018      	movs	r0, r3
 800637c:	f7ff ff0a 	bl	8006194 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006380:	f001 fe00 	bl	8007f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006384:	2301      	movs	r3, #1
}
 8006386:	0018      	movs	r0, r3
 8006388:	46bd      	mov	sp, r7
 800638a:	b004      	add	sp, #16
 800638c:	bd80      	pop	{r7, pc}

0800638e <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800638e:	b590      	push	{r4, r7, lr}
 8006390:	b089      	sub	sp, #36	; 0x24
 8006392:	af02      	add	r7, sp, #8
 8006394:	60f8      	str	r0, [r7, #12]
 8006396:	60b9      	str	r1, [r7, #8]
 8006398:	607a      	str	r2, [r7, #4]
 800639a:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <xQueueGenericCreateStatic+0x18>
 80063a2:	b672      	cpsid	i
 80063a4:	e7fe      	b.n	80063a4 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <xQueueGenericCreateStatic+0x22>
 80063ac:	b672      	cpsid	i
 80063ae:	e7fe      	b.n	80063ae <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <xQueueGenericCreateStatic+0x2e>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <xQueueGenericCreateStatic+0x32>
 80063bc:	2301      	movs	r3, #1
 80063be:	e000      	b.n	80063c2 <xQueueGenericCreateStatic+0x34>
 80063c0:	2300      	movs	r3, #0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d101      	bne.n	80063ca <xQueueGenericCreateStatic+0x3c>
 80063c6:	b672      	cpsid	i
 80063c8:	e7fe      	b.n	80063c8 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <xQueueGenericCreateStatic+0x48>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <xQueueGenericCreateStatic+0x4c>
 80063d6:	2301      	movs	r3, #1
 80063d8:	e000      	b.n	80063dc <xQueueGenericCreateStatic+0x4e>
 80063da:	2300      	movs	r3, #0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <xQueueGenericCreateStatic+0x56>
 80063e0:	b672      	cpsid	i
 80063e2:	e7fe      	b.n	80063e2 <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80063e4:	2350      	movs	r3, #80	; 0x50
 80063e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b50      	cmp	r3, #80	; 0x50
 80063ec:	d001      	beq.n	80063f2 <xQueueGenericCreateStatic+0x64>
 80063ee:	b672      	cpsid	i
 80063f0:	e7fe      	b.n	80063f0 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00e      	beq.n	800641a <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2246      	movs	r2, #70	; 0x46
 8006400:	2101      	movs	r1, #1
 8006402:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006404:	2328      	movs	r3, #40	; 0x28
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	781c      	ldrb	r4, [r3, #0]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	0023      	movs	r3, r4
 8006416:	f000 f83b 	bl	8006490 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800641a:	697b      	ldr	r3, [r7, #20]
	}
 800641c:	0018      	movs	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	b007      	add	sp, #28
 8006422:	bd90      	pop	{r4, r7, pc}

08006424 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006424:	b590      	push	{r4, r7, lr}
 8006426:	b08b      	sub	sp, #44	; 0x2c
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	1dfb      	adds	r3, r7, #7
 8006430:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <xQueueGenericCreate+0x18>
 8006438:	b672      	cpsid	i
 800643a:	e7fe      	b.n	800643a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e003      	b.n	8006450 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	4353      	muls	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	3350      	adds	r3, #80	; 0x50
 8006454:	0018      	movs	r0, r3
 8006456:	f001 fe1b 	bl	8008090 <pvPortMalloc>
 800645a:	0003      	movs	r3, r0
 800645c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	3350      	adds	r3, #80	; 0x50
 8006468:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2246      	movs	r2, #70	; 0x46
 800646e:	2100      	movs	r1, #0
 8006470:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006472:	1dfb      	adds	r3, r7, #7
 8006474:	781c      	ldrb	r4, [r3, #0]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	68b9      	ldr	r1, [r7, #8]
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	0023      	movs	r3, r4
 8006482:	f000 f805 	bl	8006490 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006486:	69bb      	ldr	r3, [r7, #24]
	}
 8006488:	0018      	movs	r0, r3
 800648a:	46bd      	mov	sp, r7
 800648c:	b009      	add	sp, #36	; 0x24
 800648e:	bd90      	pop	{r4, r7, pc}

08006490 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	001a      	movs	r2, r3
 800649e:	1cfb      	adds	r3, r7, #3
 80064a0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d103      	bne.n	80064b0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	e002      	b.n	80064b6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2101      	movs	r1, #1
 80064c6:	0018      	movs	r0, r3
 80064c8:	f7ff ff0d 	bl	80062e6 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	1cfa      	adds	r2, r7, #3
 80064d0:	214c      	movs	r1, #76	; 0x4c
 80064d2:	7812      	ldrb	r2, [r2, #0]
 80064d4:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	46bd      	mov	sp, r7
 80064da:	b004      	add	sp, #16
 80064dc:	bd80      	pop	{r7, pc}

080064de <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b08a      	sub	sp, #40	; 0x28
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064ec:	2300      	movs	r3, #0
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d101      	bne.n	80064fe <xQueueGenericSend+0x20>
 80064fa:	b672      	cpsid	i
 80064fc:	e7fe      	b.n	80064fc <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <xQueueGenericSend+0x2e>
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <xQueueGenericSend+0x32>
 800650c:	2301      	movs	r3, #1
 800650e:	e000      	b.n	8006512 <xQueueGenericSend+0x34>
 8006510:	2300      	movs	r3, #0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <xQueueGenericSend+0x3c>
 8006516:	b672      	cpsid	i
 8006518:	e7fe      	b.n	8006518 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d103      	bne.n	8006528 <xQueueGenericSend+0x4a>
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006524:	2b01      	cmp	r3, #1
 8006526:	d101      	bne.n	800652c <xQueueGenericSend+0x4e>
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <xQueueGenericSend+0x50>
 800652c:	2300      	movs	r3, #0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <xQueueGenericSend+0x58>
 8006532:	b672      	cpsid	i
 8006534:	e7fe      	b.n	8006534 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006536:	f001 f8dd 	bl	80076f4 <xTaskGetSchedulerState>
 800653a:	1e03      	subs	r3, r0, #0
 800653c:	d102      	bne.n	8006544 <xQueueGenericSend+0x66>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <xQueueGenericSend+0x6a>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <xQueueGenericSend+0x6c>
 8006548:	2300      	movs	r3, #0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <xQueueGenericSend+0x74>
 800654e:	b672      	cpsid	i
 8006550:	e7fe      	b.n	8006550 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006552:	f001 fd05 	bl	8007f60 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800655a:	6a3b      	ldr	r3, [r7, #32]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	429a      	cmp	r2, r3
 8006560:	d302      	bcc.n	8006568 <xQueueGenericSend+0x8a>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d11e      	bne.n	80065a6 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	68b9      	ldr	r1, [r7, #8]
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	0018      	movs	r0, r3
 8006570:	f000 f99f 	bl	80068b2 <prvCopyDataToQueue>
 8006574:	0003      	movs	r3, r0
 8006576:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d009      	beq.n	8006594 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	0018      	movs	r0, r3
 8006586:	f000 ff17 	bl	80073b8 <xTaskRemoveFromEventList>
 800658a:	1e03      	subs	r3, r0, #0
 800658c:	d007      	beq.n	800659e <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800658e:	f001 fcd7 	bl	8007f40 <vPortYield>
 8006592:	e004      	b.n	800659e <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800659a:	f001 fcd1 	bl	8007f40 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800659e:	f001 fcf1 	bl	8007f84 <vPortExitCritical>
				return pdPASS;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e05b      	b.n	800665e <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d103      	bne.n	80065b4 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065ac:	f001 fcea 	bl	8007f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e054      	b.n	800665e <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d106      	bne.n	80065c8 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065ba:	2314      	movs	r3, #20
 80065bc:	18fb      	adds	r3, r7, r3
 80065be:	0018      	movs	r0, r3
 80065c0:	f000 ff56 	bl	8007470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065c8:	f001 fcdc 	bl	8007f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065cc:	f000 fcfc 	bl	8006fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d0:	f001 fcc6 	bl	8007f60 <vPortEnterCritical>
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	2244      	movs	r2, #68	; 0x44
 80065d8:	5c9b      	ldrb	r3, [r3, r2]
 80065da:	b25b      	sxtb	r3, r3
 80065dc:	3301      	adds	r3, #1
 80065de:	d103      	bne.n	80065e8 <xQueueGenericSend+0x10a>
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	2244      	movs	r2, #68	; 0x44
 80065e4:	2100      	movs	r1, #0
 80065e6:	5499      	strb	r1, [r3, r2]
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	2245      	movs	r2, #69	; 0x45
 80065ec:	5c9b      	ldrb	r3, [r3, r2]
 80065ee:	b25b      	sxtb	r3, r3
 80065f0:	3301      	adds	r3, #1
 80065f2:	d103      	bne.n	80065fc <xQueueGenericSend+0x11e>
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2245      	movs	r2, #69	; 0x45
 80065f8:	2100      	movs	r1, #0
 80065fa:	5499      	strb	r1, [r3, r2]
 80065fc:	f001 fcc2 	bl	8007f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006600:	1d3a      	adds	r2, r7, #4
 8006602:	2314      	movs	r3, #20
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	0011      	movs	r1, r2
 8006608:	0018      	movs	r0, r3
 800660a:	f000 ff45 	bl	8007498 <xTaskCheckForTimeOut>
 800660e:	1e03      	subs	r3, r0, #0
 8006610:	d11e      	bne.n	8006650 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	0018      	movs	r0, r3
 8006616:	f000 fa51 	bl	8006abc <prvIsQueueFull>
 800661a:	1e03      	subs	r3, r0, #0
 800661c:	d011      	beq.n	8006642 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	3310      	adds	r3, #16
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	0011      	movs	r1, r2
 8006626:	0018      	movs	r0, r3
 8006628:	f000 fe82 	bl	8007330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	0018      	movs	r0, r3
 8006630:	f000 f9d0 	bl	80069d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006634:	f000 fcd4 	bl	8006fe0 <xTaskResumeAll>
 8006638:	1e03      	subs	r3, r0, #0
 800663a:	d18a      	bne.n	8006552 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800663c:	f001 fc80 	bl	8007f40 <vPortYield>
 8006640:	e787      	b.n	8006552 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	0018      	movs	r0, r3
 8006646:	f000 f9c5 	bl	80069d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800664a:	f000 fcc9 	bl	8006fe0 <xTaskResumeAll>
 800664e:	e780      	b.n	8006552 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	0018      	movs	r0, r3
 8006654:	f000 f9be 	bl	80069d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006658:	f000 fcc2 	bl	8006fe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800665c:	2300      	movs	r3, #0
		}
	}
}
 800665e:	0018      	movs	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	b00a      	add	sp, #40	; 0x28
 8006664:	bd80      	pop	{r7, pc}

08006666 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006666:	b590      	push	{r4, r7, lr}
 8006668:	b089      	sub	sp, #36	; 0x24
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
 8006672:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d101      	bne.n	8006682 <xQueueGenericSendFromISR+0x1c>
 800667e:	b672      	cpsid	i
 8006680:	e7fe      	b.n	8006680 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <xQueueGenericSendFromISR+0x2a>
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <xQueueGenericSendFromISR+0x2e>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <xQueueGenericSendFromISR+0x30>
 8006694:	2300      	movs	r3, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d101      	bne.n	800669e <xQueueGenericSendFromISR+0x38>
 800669a:	b672      	cpsid	i
 800669c:	e7fe      	b.n	800669c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d103      	bne.n	80066ac <xQueueGenericSendFromISR+0x46>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d101      	bne.n	80066b0 <xQueueGenericSendFromISR+0x4a>
 80066ac:	2301      	movs	r3, #1
 80066ae:	e000      	b.n	80066b2 <xQueueGenericSendFromISR+0x4c>
 80066b0:	2300      	movs	r3, #0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <xQueueGenericSendFromISR+0x54>
 80066b6:	b672      	cpsid	i
 80066b8:	e7fe      	b.n	80066b8 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066ba:	f001 fc7b 	bl	8007fb4 <ulSetInterruptMaskFromISR>
 80066be:	0003      	movs	r3, r0
 80066c0:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d302      	bcc.n	80066d4 <xQueueGenericSendFromISR+0x6e>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d12e      	bne.n	8006732 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066d4:	2413      	movs	r4, #19
 80066d6:	193b      	adds	r3, r7, r4
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	2145      	movs	r1, #69	; 0x45
 80066dc:	5c52      	ldrb	r2, [r2, r1]
 80066de:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f000 f8e3 	bl	80068b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066ec:	193b      	adds	r3, r7, r4
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	b25b      	sxtb	r3, r3
 80066f2:	3301      	adds	r3, #1
 80066f4:	d111      	bne.n	800671a <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d016      	beq.n	800672c <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	3324      	adds	r3, #36	; 0x24
 8006702:	0018      	movs	r0, r3
 8006704:	f000 fe58 	bl	80073b8 <xTaskRemoveFromEventList>
 8006708:	1e03      	subs	r3, r0, #0
 800670a:	d00f      	beq.n	800672c <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	e008      	b.n	800672c <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800671a:	2313      	movs	r3, #19
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	3301      	adds	r3, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	b259      	sxtb	r1, r3
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	2245      	movs	r2, #69	; 0x45
 800672a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800672c:	2301      	movs	r3, #1
 800672e:	61fb      	str	r3, [r7, #28]
		{
 8006730:	e001      	b.n	8006736 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	0018      	movs	r0, r3
 800673a:	f001 fc41 	bl	8007fc0 <vClearInterruptMaskFromISR>

	return xReturn;
 800673e:	69fb      	ldr	r3, [r7, #28]
}
 8006740:	0018      	movs	r0, r3
 8006742:	46bd      	mov	sp, r7
 8006744:	b009      	add	sp, #36	; 0x24
 8006746:	bd90      	pop	{r4, r7, pc}

08006748 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006754:	2300      	movs	r3, #0
 8006756:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <xQueueReceive+0x1e>
 8006762:	b672      	cpsid	i
 8006764:	e7fe      	b.n	8006764 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <xQueueReceive+0x2c>
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <xQueueReceive+0x30>
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <xQueueReceive+0x32>
 8006778:	2300      	movs	r3, #0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueReceive+0x3a>
 800677e:	b672      	cpsid	i
 8006780:	e7fe      	b.n	8006780 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006782:	f000 ffb7 	bl	80076f4 <xTaskGetSchedulerState>
 8006786:	1e03      	subs	r3, r0, #0
 8006788:	d102      	bne.n	8006790 <xQueueReceive+0x48>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <xQueueReceive+0x4c>
 8006790:	2301      	movs	r3, #1
 8006792:	e000      	b.n	8006796 <xQueueReceive+0x4e>
 8006794:	2300      	movs	r3, #0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <xQueueReceive+0x56>
 800679a:	b672      	cpsid	i
 800679c:	e7fe      	b.n	800679c <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800679e:	f001 fbdf 	bl	8007f60 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d01a      	beq.n	80067e4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	0011      	movs	r1, r2
 80067b4:	0018      	movs	r0, r3
 80067b6:	f000 f8e7 	bl	8006988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	1e5a      	subs	r2, r3, #1
 80067be:	6a3b      	ldr	r3, [r7, #32]
 80067c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	3310      	adds	r3, #16
 80067ce:	0018      	movs	r0, r3
 80067d0:	f000 fdf2 	bl	80073b8 <xTaskRemoveFromEventList>
 80067d4:	1e03      	subs	r3, r0, #0
 80067d6:	d001      	beq.n	80067dc <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067d8:	f001 fbb2 	bl	8007f40 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067dc:	f001 fbd2 	bl	8007f84 <vPortExitCritical>
				return pdPASS;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e062      	b.n	80068aa <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d103      	bne.n	80067f2 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067ea:	f001 fbcb 	bl	8007f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80067ee:	2300      	movs	r3, #0
 80067f0:	e05b      	b.n	80068aa <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067f8:	2314      	movs	r3, #20
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	0018      	movs	r0, r3
 80067fe:	f000 fe37 	bl	8007470 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006802:	2301      	movs	r3, #1
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006806:	f001 fbbd 	bl	8007f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800680a:	f000 fbdd 	bl	8006fc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800680e:	f001 fba7 	bl	8007f60 <vPortEnterCritical>
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	2244      	movs	r2, #68	; 0x44
 8006816:	5c9b      	ldrb	r3, [r3, r2]
 8006818:	b25b      	sxtb	r3, r3
 800681a:	3301      	adds	r3, #1
 800681c:	d103      	bne.n	8006826 <xQueueReceive+0xde>
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2244      	movs	r2, #68	; 0x44
 8006822:	2100      	movs	r1, #0
 8006824:	5499      	strb	r1, [r3, r2]
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	2245      	movs	r2, #69	; 0x45
 800682a:	5c9b      	ldrb	r3, [r3, r2]
 800682c:	b25b      	sxtb	r3, r3
 800682e:	3301      	adds	r3, #1
 8006830:	d103      	bne.n	800683a <xQueueReceive+0xf2>
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	2245      	movs	r2, #69	; 0x45
 8006836:	2100      	movs	r1, #0
 8006838:	5499      	strb	r1, [r3, r2]
 800683a:	f001 fba3 	bl	8007f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800683e:	1d3a      	adds	r2, r7, #4
 8006840:	2314      	movs	r3, #20
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	0011      	movs	r1, r2
 8006846:	0018      	movs	r0, r3
 8006848:	f000 fe26 	bl	8007498 <xTaskCheckForTimeOut>
 800684c:	1e03      	subs	r3, r0, #0
 800684e:	d11e      	bne.n	800688e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	0018      	movs	r0, r3
 8006854:	f000 f91c 	bl	8006a90 <prvIsQueueEmpty>
 8006858:	1e03      	subs	r3, r0, #0
 800685a:	d011      	beq.n	8006880 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	3324      	adds	r3, #36	; 0x24
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	0011      	movs	r1, r2
 8006864:	0018      	movs	r0, r3
 8006866:	f000 fd63 	bl	8007330 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	0018      	movs	r0, r3
 800686e:	f000 f8b1 	bl	80069d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006872:	f000 fbb5 	bl	8006fe0 <xTaskResumeAll>
 8006876:	1e03      	subs	r3, r0, #0
 8006878:	d191      	bne.n	800679e <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800687a:	f001 fb61 	bl	8007f40 <vPortYield>
 800687e:	e78e      	b.n	800679e <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	0018      	movs	r0, r3
 8006884:	f000 f8a6 	bl	80069d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006888:	f000 fbaa 	bl	8006fe0 <xTaskResumeAll>
 800688c:	e787      	b.n	800679e <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	0018      	movs	r0, r3
 8006892:	f000 f89f 	bl	80069d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006896:	f000 fba3 	bl	8006fe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	0018      	movs	r0, r3
 800689e:	f000 f8f7 	bl	8006a90 <prvIsQueueEmpty>
 80068a2:	1e03      	subs	r3, r0, #0
 80068a4:	d100      	bne.n	80068a8 <xQueueReceive+0x160>
 80068a6:	e77a      	b.n	800679e <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80068aa:	0018      	movs	r0, r3
 80068ac:	46bd      	mov	sp, r7
 80068ae:	b00a      	add	sp, #40	; 0x28
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068be:	2300      	movs	r3, #0
 80068c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10e      	bne.n	80068ee <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d14e      	bne.n	8006976 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	0018      	movs	r0, r3
 80068de:	f000 ff25 	bl	800772c <xTaskPriorityDisinherit>
 80068e2:	0003      	movs	r3, r0
 80068e4:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	605a      	str	r2, [r3, #4]
 80068ec:	e043      	b.n	8006976 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d119      	bne.n	8006928 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6898      	ldr	r0, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	0019      	movs	r1, r3
 8006900:	f001 fd98 	bl	8008434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690c:	18d2      	adds	r2, r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d32b      	bcc.n	8006976 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	609a      	str	r2, [r3, #8]
 8006926:	e026      	b.n	8006976 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	68d8      	ldr	r0, [r3, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	0019      	movs	r1, r3
 8006934:	f001 fd7e 	bl	8008434 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	425b      	negs	r3, r3
 8006942:	18d2      	adds	r2, r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d207      	bcs.n	8006964 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695c:	425b      	negs	r3, r3
 800695e:	18d2      	adds	r2, r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b02      	cmp	r3, #2
 8006968:	d105      	bne.n	8006976 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d002      	beq.n	8006976 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3b01      	subs	r3, #1
 8006974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800697e:	697b      	ldr	r3, [r7, #20]
}
 8006980:	0018      	movs	r0, r3
 8006982:	46bd      	mov	sp, r7
 8006984:	b006      	add	sp, #24
 8006986:	bd80      	pop	{r7, pc}

08006988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	2b00      	cmp	r3, #0
 8006998:	d018      	beq.n	80069cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	18d2      	adds	r2, r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	68da      	ldr	r2, [r3, #12]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d303      	bcc.n	80069bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	68d9      	ldr	r1, [r3, #12]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	0018      	movs	r0, r3
 80069c8:	f001 fd34 	bl	8008434 <memcpy>
	}
}
 80069cc:	46c0      	nop			; (mov r8, r8)
 80069ce:	46bd      	mov	sp, r7
 80069d0:	b002      	add	sp, #8
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069dc:	f001 fac0 	bl	8007f60 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069e0:	230f      	movs	r3, #15
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	2145      	movs	r1, #69	; 0x45
 80069e8:	5c52      	ldrb	r2, [r2, r1]
 80069ea:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069ec:	e013      	b.n	8006a16 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d016      	beq.n	8006a24 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3324      	adds	r3, #36	; 0x24
 80069fa:	0018      	movs	r0, r3
 80069fc:	f000 fcdc 	bl	80073b8 <xTaskRemoveFromEventList>
 8006a00:	1e03      	subs	r3, r0, #0
 8006a02:	d001      	beq.n	8006a08 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a04:	f000 fd98 	bl	8007538 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a08:	210f      	movs	r1, #15
 8006a0a:	187b      	adds	r3, r7, r1
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	187b      	adds	r3, r7, r1
 8006a14:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a16:	230f      	movs	r3, #15
 8006a18:	18fb      	adds	r3, r7, r3
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b25b      	sxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	dce5      	bgt.n	80069ee <prvUnlockQueue+0x1a>
 8006a22:	e000      	b.n	8006a26 <prvUnlockQueue+0x52>
					break;
 8006a24:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2245      	movs	r2, #69	; 0x45
 8006a2a:	21ff      	movs	r1, #255	; 0xff
 8006a2c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006a2e:	f001 faa9 	bl	8007f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a32:	f001 fa95 	bl	8007f60 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a36:	230e      	movs	r3, #14
 8006a38:	18fb      	adds	r3, r7, r3
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	2144      	movs	r1, #68	; 0x44
 8006a3e:	5c52      	ldrb	r2, [r2, r1]
 8006a40:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a42:	e013      	b.n	8006a6c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d016      	beq.n	8006a7a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	3310      	adds	r3, #16
 8006a50:	0018      	movs	r0, r3
 8006a52:	f000 fcb1 	bl	80073b8 <xTaskRemoveFromEventList>
 8006a56:	1e03      	subs	r3, r0, #0
 8006a58:	d001      	beq.n	8006a5e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006a5a:	f000 fd6d 	bl	8007538 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a5e:	210e      	movs	r1, #14
 8006a60:	187b      	adds	r3, r7, r1
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	187b      	adds	r3, r7, r1
 8006a6a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a6c:	230e      	movs	r3, #14
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dce5      	bgt.n	8006a44 <prvUnlockQueue+0x70>
 8006a78:	e000      	b.n	8006a7c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006a7a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2244      	movs	r2, #68	; 0x44
 8006a80:	21ff      	movs	r1, #255	; 0xff
 8006a82:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006a84:	f001 fa7e 	bl	8007f84 <vPortExitCritical>
}
 8006a88:	46c0      	nop			; (mov r8, r8)
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b004      	add	sp, #16
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a98:	f001 fa62 	bl	8007f60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	60fb      	str	r3, [r7, #12]
 8006aa8:	e001      	b.n	8006aae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aae:	f001 fa69 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
}
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b004      	add	sp, #16
 8006aba:	bd80      	pop	{r7, pc}

08006abc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ac4:	f001 fa4c 	bl	8007f60 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d102      	bne.n	8006ada <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e001      	b.n	8006ade <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ade:	f001 fa51 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
}
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	b004      	add	sp, #16
 8006aea:	bd80      	pop	{r7, pc}

08006aec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
 8006afa:	e015      	b.n	8006b28 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006afc:	4b0e      	ldr	r3, [pc, #56]	; (8006b38 <vQueueAddToRegistry+0x4c>)
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	00d2      	lsls	r2, r2, #3
 8006b02:	58d3      	ldr	r3, [r2, r3]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10c      	bne.n	8006b22 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b08:	4b0b      	ldr	r3, [pc, #44]	; (8006b38 <vQueueAddToRegistry+0x4c>)
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	00d2      	lsls	r2, r2, #3
 8006b0e:	6839      	ldr	r1, [r7, #0]
 8006b10:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b12:	4a09      	ldr	r2, [pc, #36]	; (8006b38 <vQueueAddToRegistry+0x4c>)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	00db      	lsls	r3, r3, #3
 8006b18:	18d3      	adds	r3, r2, r3
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b20:	e006      	b.n	8006b30 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3301      	adds	r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2b07      	cmp	r3, #7
 8006b2c:	d9e6      	bls.n	8006afc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b004      	add	sp, #16
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20000c80 	.word	0x20000c80

08006b3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b4c:	f001 fa08 	bl	8007f60 <vPortEnterCritical>
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	2244      	movs	r2, #68	; 0x44
 8006b54:	5c9b      	ldrb	r3, [r3, r2]
 8006b56:	b25b      	sxtb	r3, r3
 8006b58:	3301      	adds	r3, #1
 8006b5a:	d103      	bne.n	8006b64 <vQueueWaitForMessageRestricted+0x28>
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2244      	movs	r2, #68	; 0x44
 8006b60:	2100      	movs	r1, #0
 8006b62:	5499      	strb	r1, [r3, r2]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2245      	movs	r2, #69	; 0x45
 8006b68:	5c9b      	ldrb	r3, [r3, r2]
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	d103      	bne.n	8006b78 <vQueueWaitForMessageRestricted+0x3c>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2245      	movs	r2, #69	; 0x45
 8006b74:	2100      	movs	r1, #0
 8006b76:	5499      	strb	r1, [r3, r2]
 8006b78:	f001 fa04 	bl	8007f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d106      	bne.n	8006b92 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	3324      	adds	r3, #36	; 0x24
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	68b9      	ldr	r1, [r7, #8]
 8006b8c:	0018      	movs	r0, r3
 8006b8e:	f000 fbed 	bl	800736c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f7ff ff1d 	bl	80069d4 <prvUnlockQueue>
	}
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	b006      	add	sp, #24
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ba2:	b590      	push	{r4, r7, lr}
 8006ba4:	b08d      	sub	sp, #52	; 0x34
 8006ba6:	af04      	add	r7, sp, #16
 8006ba8:	60f8      	str	r0, [r7, #12]
 8006baa:	60b9      	str	r1, [r7, #8]
 8006bac:	607a      	str	r2, [r7, #4]
 8006bae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <xTaskCreateStatic+0x18>
 8006bb6:	b672      	cpsid	i
 8006bb8:	e7fe      	b.n	8006bb8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <xTaskCreateStatic+0x22>
 8006bc0:	b672      	cpsid	i
 8006bc2:	e7fe      	b.n	8006bc2 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bc4:	23bc      	movs	r3, #188	; 0xbc
 8006bc6:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2bbc      	cmp	r3, #188	; 0xbc
 8006bcc:	d001      	beq.n	8006bd2 <xTaskCreateStatic+0x30>
 8006bce:	b672      	cpsid	i
 8006bd0:	e7fe      	b.n	8006bd0 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d020      	beq.n	8006c1a <xTaskCreateStatic+0x78>
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d01d      	beq.n	8006c1a <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006be6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	22b9      	movs	r2, #185	; 0xb9
 8006bec:	2102      	movs	r1, #2
 8006bee:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bf0:	683c      	ldr	r4, [r7, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	68b9      	ldr	r1, [r7, #8]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9303      	str	r3, [sp, #12]
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	9302      	str	r3, [sp, #8]
 8006c00:	2318      	movs	r3, #24
 8006c02:	18fb      	adds	r3, r7, r3
 8006c04:	9301      	str	r3, [sp, #4]
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	0023      	movs	r3, r4
 8006c0c:	f000 f858 	bl	8006cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	0018      	movs	r0, r3
 8006c14:	f000 f8ec 	bl	8006df0 <prvAddNewTaskToReadyList>
 8006c18:	e001      	b.n	8006c1e <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006c20:	0018      	movs	r0, r3
 8006c22:	46bd      	mov	sp, r7
 8006c24:	b009      	add	sp, #36	; 0x24
 8006c26:	bd90      	pop	{r4, r7, pc}

08006c28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c28:	b590      	push	{r4, r7, lr}
 8006c2a:	b08d      	sub	sp, #52	; 0x34
 8006c2c:	af04      	add	r7, sp, #16
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	1dbb      	adds	r3, r7, #6
 8006c36:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c38:	1dbb      	adds	r3, r7, #6
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f001 fa26 	bl	8008090 <pvPortMalloc>
 8006c44:	0003      	movs	r3, r0
 8006c46:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d010      	beq.n	8006c70 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006c4e:	20bc      	movs	r0, #188	; 0xbc
 8006c50:	f001 fa1e 	bl	8008090 <pvPortMalloc>
 8006c54:	0003      	movs	r3, r0
 8006c56:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	631a      	str	r2, [r3, #48]	; 0x30
 8006c64:	e006      	b.n	8006c74 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f001 fab7 	bl	80081dc <vPortFree>
 8006c6e:	e001      	b.n	8006c74 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01a      	beq.n	8006cb0 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	22b9      	movs	r2, #185	; 0xb9
 8006c7e:	2100      	movs	r1, #0
 8006c80:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c82:	1dbb      	adds	r3, r7, #6
 8006c84:	881a      	ldrh	r2, [r3, #0]
 8006c86:	683c      	ldr	r4, [r7, #0]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	9303      	str	r3, [sp, #12]
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	9302      	str	r3, [sp, #8]
 8006c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	0023      	movs	r3, r4
 8006c9e:	f000 f80f 	bl	8006cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	0018      	movs	r0, r3
 8006ca6:	f000 f8a3 	bl	8006df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006caa:	2301      	movs	r3, #1
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	e002      	b.n	8006cb6 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	425b      	negs	r3, r3
 8006cb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
	}
 8006cb8:	0018      	movs	r0, r3
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	b009      	add	sp, #36	; 0x24
 8006cbe:	bd90      	pop	{r4, r7, pc}

08006cc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
 8006ccc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	001a      	movs	r2, r3
 8006cd8:	21a5      	movs	r1, #165	; 0xa5
 8006cda:	f001 fbb4 	bl	8008446 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	493e      	ldr	r1, [pc, #248]	; (8006de0 <prvInitialiseNewTask+0x120>)
 8006ce6:	468c      	mov	ip, r1
 8006ce8:	4463      	add	r3, ip
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	18d3      	adds	r3, r2, r3
 8006cee:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2207      	movs	r2, #7
 8006cf4:	4393      	bics	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2207      	movs	r2, #7
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	d001      	beq.n	8006d04 <prvInitialiseNewTask+0x44>
 8006d00:	b672      	cpsid	i
 8006d02:	e7fe      	b.n	8006d02 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d04:	2300      	movs	r3, #0
 8006d06:	617b      	str	r3, [r7, #20]
 8006d08:	e013      	b.n	8006d32 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	18d3      	adds	r3, r2, r3
 8006d10:	7818      	ldrb	r0, [r3, #0]
 8006d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d14:	2134      	movs	r1, #52	; 0x34
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	18d3      	adds	r3, r2, r3
 8006d1a:	185b      	adds	r3, r3, r1
 8006d1c:	1c02      	adds	r2, r0, #0
 8006d1e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	18d3      	adds	r3, r2, r3
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b0f      	cmp	r3, #15
 8006d36:	d9e8      	bls.n	8006d0a <prvInitialiseNewTask+0x4a>
 8006d38:	e000      	b.n	8006d3c <prvInitialiseNewTask+0x7c>
		{
			break;
 8006d3a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	2243      	movs	r2, #67	; 0x43
 8006d40:	2100      	movs	r1, #0
 8006d42:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b37      	cmp	r3, #55	; 0x37
 8006d48:	d901      	bls.n	8006d4e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d4a:	2337      	movs	r3, #55	; 0x37
 8006d4c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	6a3a      	ldr	r2, [r7, #32]
 8006d52:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	6a3a      	ldr	r2, [r7, #32]
 8006d58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d62:	3304      	adds	r3, #4
 8006d64:	0018      	movs	r0, r3
 8006d66:	f7ff fa33 	bl	80061d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	3318      	adds	r3, #24
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f7ff fa2e 	bl	80061d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	2238      	movs	r2, #56	; 0x38
 8006d7e:	1ad2      	subs	r2, r2, r3
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d88:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	22b4      	movs	r2, #180	; 0xb4
 8006d8e:	2100      	movs	r1, #0
 8006d90:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d94:	22b8      	movs	r2, #184	; 0xb8
 8006d96:	2100      	movs	r1, #0
 8006d98:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9c:	3354      	adds	r3, #84	; 0x54
 8006d9e:	2260      	movs	r2, #96	; 0x60
 8006da0:	2100      	movs	r1, #0
 8006da2:	0018      	movs	r0, r3
 8006da4:	f001 fb4f 	bl	8008446 <memset>
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	4a0e      	ldr	r2, [pc, #56]	; (8006de4 <prvInitialiseNewTask+0x124>)
 8006dac:	659a      	str	r2, [r3, #88]	; 0x58
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	4a0d      	ldr	r2, [pc, #52]	; (8006de8 <prvInitialiseNewTask+0x128>)
 8006db2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db6:	4a0d      	ldr	r2, [pc, #52]	; (8006dec <prvInitialiseNewTask+0x12c>)
 8006db8:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	68f9      	ldr	r1, [r7, #12]
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	0018      	movs	r0, r3
 8006dc2:	f001 f833 	bl	8007e2c <pxPortInitialiseStack>
 8006dc6:	0002      	movs	r2, r0
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d002      	beq.n	8006dd8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dd8:	46c0      	nop			; (mov r8, r8)
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b006      	add	sp, #24
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	3fffffff 	.word	0x3fffffff
 8006de4:	08008aa4 	.word	0x08008aa4
 8006de8:	08008ac4 	.word	0x08008ac4
 8006dec:	08008a84 	.word	0x08008a84

08006df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006df8:	f001 f8b2 	bl	8007f60 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006dfc:	4b2a      	ldr	r3, [pc, #168]	; (8006ea8 <prvAddNewTaskToReadyList+0xb8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	1c5a      	adds	r2, r3, #1
 8006e02:	4b29      	ldr	r3, [pc, #164]	; (8006ea8 <prvAddNewTaskToReadyList+0xb8>)
 8006e04:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006e06:	4b29      	ldr	r3, [pc, #164]	; (8006eac <prvAddNewTaskToReadyList+0xbc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d109      	bne.n	8006e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e0e:	4b27      	ldr	r3, [pc, #156]	; (8006eac <prvAddNewTaskToReadyList+0xbc>)
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e14:	4b24      	ldr	r3, [pc, #144]	; (8006ea8 <prvAddNewTaskToReadyList+0xb8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d110      	bne.n	8006e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e1c:	f000 fba6 	bl	800756c <prvInitialiseTaskLists>
 8006e20:	e00d      	b.n	8006e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e22:	4b23      	ldr	r3, [pc, #140]	; (8006eb0 <prvAddNewTaskToReadyList+0xc0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e2a:	4b20      	ldr	r3, [pc, #128]	; (8006eac <prvAddNewTaskToReadyList+0xbc>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d802      	bhi.n	8006e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e38:	4b1c      	ldr	r3, [pc, #112]	; (8006eac <prvAddNewTaskToReadyList+0xbc>)
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e3e:	4b1d      	ldr	r3, [pc, #116]	; (8006eb4 <prvAddNewTaskToReadyList+0xc4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <prvAddNewTaskToReadyList+0xc4>)
 8006e46:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e48:	4b1a      	ldr	r3, [pc, #104]	; (8006eb4 <prvAddNewTaskToReadyList+0xc4>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e54:	4b18      	ldr	r3, [pc, #96]	; (8006eb8 <prvAddNewTaskToReadyList+0xc8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d903      	bls.n	8006e64 <prvAddNewTaskToReadyList+0x74>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e60:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <prvAddNewTaskToReadyList+0xc8>)
 8006e62:	601a      	str	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	0013      	movs	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	189b      	adds	r3, r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <prvAddNewTaskToReadyList+0xcc>)
 8006e72:	189a      	adds	r2, r3, r2
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	0019      	movs	r1, r3
 8006e7a:	0010      	movs	r0, r2
 8006e7c:	f7ff f9b3 	bl	80061e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e80:	f001 f880 	bl	8007f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <prvAddNewTaskToReadyList+0xc0>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e8c:	4b07      	ldr	r3, [pc, #28]	; (8006eac <prvAddNewTaskToReadyList+0xbc>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d201      	bcs.n	8006e9e <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e9a:	f001 f851 	bl	8007f40 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b002      	add	sp, #8
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	20001194 	.word	0x20001194
 8006eac:	20000cc0 	.word	0x20000cc0
 8006eb0:	200011a0 	.word	0x200011a0
 8006eb4:	200011b0 	.word	0x200011b0
 8006eb8:	2000119c 	.word	0x2000119c
 8006ebc:	20000cc4 	.word	0x20000cc4

08006ec0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d010      	beq.n	8006ef4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	; (8006f08 <vTaskDelay+0x48>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <vTaskDelay+0x1e>
 8006eda:	b672      	cpsid	i
 8006edc:	e7fe      	b.n	8006edc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006ede:	f000 f873 	bl	8006fc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f000 fc7c 	bl	80077e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006eec:	f000 f878 	bl	8006fe0 <xTaskResumeAll>
 8006ef0:	0003      	movs	r3, r0
 8006ef2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006efa:	f001 f821 	bl	8007f40 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b004      	add	sp, #16
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	200011bc 	.word	0x200011bc

08006f0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f0c:	b590      	push	{r4, r7, lr}
 8006f0e:	b089      	sub	sp, #36	; 0x24
 8006f10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f1a:	003a      	movs	r2, r7
 8006f1c:	1d39      	adds	r1, r7, #4
 8006f1e:	2308      	movs	r3, #8
 8006f20:	18fb      	adds	r3, r7, r3
 8006f22:	0018      	movs	r0, r3
 8006f24:	f7ff f906 	bl	8006134 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f28:	683c      	ldr	r4, [r7, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	491e      	ldr	r1, [pc, #120]	; (8006fa8 <vTaskStartScheduler+0x9c>)
 8006f30:	481e      	ldr	r0, [pc, #120]	; (8006fac <vTaskStartScheduler+0xa0>)
 8006f32:	9202      	str	r2, [sp, #8]
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	2300      	movs	r3, #0
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	0022      	movs	r2, r4
 8006f3e:	f7ff fe30 	bl	8006ba2 <xTaskCreateStatic>
 8006f42:	0002      	movs	r2, r0
 8006f44:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <vTaskStartScheduler+0xa4>)
 8006f46:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f48:	4b19      	ldr	r3, [pc, #100]	; (8006fb0 <vTaskStartScheduler+0xa4>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f50:	2301      	movs	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	e001      	b.n	8006f5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d103      	bne.n	8006f68 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8006f60:	f000 fc94 	bl	800788c <xTimerCreateTimerTask>
 8006f64:	0003      	movs	r3, r0
 8006f66:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d113      	bne.n	8006f96 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006f6e:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <vTaskStartScheduler+0xa8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3354      	adds	r3, #84	; 0x54
 8006f76:	001a      	movs	r2, r3
 8006f78:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <vTaskStartScheduler+0xac>)
 8006f7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <vTaskStartScheduler+0xb0>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	4252      	negs	r2, r2
 8006f82:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f84:	4b0e      	ldr	r3, [pc, #56]	; (8006fc0 <vTaskStartScheduler+0xb4>)
 8006f86:	2201      	movs	r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f8a:	4b0e      	ldr	r3, [pc, #56]	; (8006fc4 <vTaskStartScheduler+0xb8>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f90:	f000 ffb2 	bl	8007ef8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f94:	e004      	b.n	8006fa0 <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <vTaskStartScheduler+0x94>
 8006f9c:	b672      	cpsid	i
 8006f9e:	e7fe      	b.n	8006f9e <vTaskStartScheduler+0x92>
}
 8006fa0:	46c0      	nop			; (mov r8, r8)
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b005      	add	sp, #20
 8006fa6:	bd90      	pop	{r4, r7, pc}
 8006fa8:	08008834 	.word	0x08008834
 8006fac:	0800754d 	.word	0x0800754d
 8006fb0:	200011b8 	.word	0x200011b8
 8006fb4:	20000cc0 	.word	0x20000cc0
 8006fb8:	20000190 	.word	0x20000190
 8006fbc:	200011b4 	.word	0x200011b4
 8006fc0:	200011a0 	.word	0x200011a0
 8006fc4:	20001198 	.word	0x20001198

08006fc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006fcc:	4b03      	ldr	r3, [pc, #12]	; (8006fdc <vTaskSuspendAll+0x14>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <vTaskSuspendAll+0x14>)
 8006fd4:	601a      	str	r2, [r3, #0]
}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200011bc 	.word	0x200011bc

08006fe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fee:	4b3a      	ldr	r3, [pc, #232]	; (80070d8 <xTaskResumeAll+0xf8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <xTaskResumeAll+0x1a>
 8006ff6:	b672      	cpsid	i
 8006ff8:	e7fe      	b.n	8006ff8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ffa:	f000 ffb1 	bl	8007f60 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ffe:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <xTaskResumeAll+0xf8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	1e5a      	subs	r2, r3, #1
 8007004:	4b34      	ldr	r3, [pc, #208]	; (80070d8 <xTaskResumeAll+0xf8>)
 8007006:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007008:	4b33      	ldr	r3, [pc, #204]	; (80070d8 <xTaskResumeAll+0xf8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d15b      	bne.n	80070c8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007010:	4b32      	ldr	r3, [pc, #200]	; (80070dc <xTaskResumeAll+0xfc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d057      	beq.n	80070c8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007018:	e02f      	b.n	800707a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800701a:	4b31      	ldr	r3, [pc, #196]	; (80070e0 <xTaskResumeAll+0x100>)
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3318      	adds	r3, #24
 8007026:	0018      	movs	r0, r3
 8007028:	f7ff f935 	bl	8006296 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3304      	adds	r3, #4
 8007030:	0018      	movs	r0, r3
 8007032:	f7ff f930 	bl	8006296 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703a:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <xTaskResumeAll+0x104>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	429a      	cmp	r2, r3
 8007040:	d903      	bls.n	800704a <xTaskResumeAll+0x6a>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007046:	4b27      	ldr	r3, [pc, #156]	; (80070e4 <xTaskResumeAll+0x104>)
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	0013      	movs	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	189b      	adds	r3, r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4a24      	ldr	r2, [pc, #144]	; (80070e8 <xTaskResumeAll+0x108>)
 8007058:	189a      	adds	r2, r3, r2
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3304      	adds	r3, #4
 800705e:	0019      	movs	r1, r3
 8007060:	0010      	movs	r0, r2
 8007062:	f7ff f8c0 	bl	80061e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800706a:	4b20      	ldr	r3, [pc, #128]	; (80070ec <xTaskResumeAll+0x10c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	429a      	cmp	r2, r3
 8007072:	d302      	bcc.n	800707a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007074:	4b1e      	ldr	r3, [pc, #120]	; (80070f0 <xTaskResumeAll+0x110>)
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800707a:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <xTaskResumeAll+0x100>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1cb      	bne.n	800701a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007088:	f000 fb10 	bl	80076ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800708c:	4b19      	ldr	r3, [pc, #100]	; (80070f4 <xTaskResumeAll+0x114>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00f      	beq.n	80070b8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007098:	f000 f83c 	bl	8007114 <xTaskIncrementTick>
 800709c:	1e03      	subs	r3, r0, #0
 800709e:	d002      	beq.n	80070a6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80070a0:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <xTaskResumeAll+0x110>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1f2      	bne.n	8007098 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80070b2:	4b10      	ldr	r3, [pc, #64]	; (80070f4 <xTaskResumeAll+0x114>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <xTaskResumeAll+0x110>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070c0:	2301      	movs	r3, #1
 80070c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070c4:	f000 ff3c 	bl	8007f40 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070c8:	f000 ff5c 	bl	8007f84 <vPortExitCritical>

	return xAlreadyYielded;
 80070cc:	68bb      	ldr	r3, [r7, #8]
}
 80070ce:	0018      	movs	r0, r3
 80070d0:	46bd      	mov	sp, r7
 80070d2:	b004      	add	sp, #16
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	46c0      	nop			; (mov r8, r8)
 80070d8:	200011bc 	.word	0x200011bc
 80070dc:	20001194 	.word	0x20001194
 80070e0:	20001154 	.word	0x20001154
 80070e4:	2000119c 	.word	0x2000119c
 80070e8:	20000cc4 	.word	0x20000cc4
 80070ec:	20000cc0 	.word	0x20000cc0
 80070f0:	200011a8 	.word	0x200011a8
 80070f4:	200011a4 	.word	0x200011a4

080070f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070fe:	4b04      	ldr	r3, [pc, #16]	; (8007110 <xTaskGetTickCount+0x18>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007104:	687b      	ldr	r3, [r7, #4]
}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b002      	add	sp, #8
 800710c:	bd80      	pop	{r7, pc}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	20001198 	.word	0x20001198

08007114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800711a:	2300      	movs	r3, #0
 800711c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800711e:	4b4c      	ldr	r3, [pc, #304]	; (8007250 <xTaskIncrementTick+0x13c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d000      	beq.n	8007128 <xTaskIncrementTick+0x14>
 8007126:	e083      	b.n	8007230 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007128:	4b4a      	ldr	r3, [pc, #296]	; (8007254 <xTaskIncrementTick+0x140>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	3301      	adds	r3, #1
 800712e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007130:	4b48      	ldr	r3, [pc, #288]	; (8007254 <xTaskIncrementTick+0x140>)
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d117      	bne.n	800716c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800713c:	4b46      	ldr	r3, [pc, #280]	; (8007258 <xTaskIncrementTick+0x144>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <xTaskIncrementTick+0x36>
 8007146:	b672      	cpsid	i
 8007148:	e7fe      	b.n	8007148 <xTaskIncrementTick+0x34>
 800714a:	4b43      	ldr	r3, [pc, #268]	; (8007258 <xTaskIncrementTick+0x144>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	4b42      	ldr	r3, [pc, #264]	; (800725c <xTaskIncrementTick+0x148>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	4b40      	ldr	r3, [pc, #256]	; (8007258 <xTaskIncrementTick+0x144>)
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	4b40      	ldr	r3, [pc, #256]	; (800725c <xTaskIncrementTick+0x148>)
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	4b40      	ldr	r3, [pc, #256]	; (8007260 <xTaskIncrementTick+0x14c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	4b3e      	ldr	r3, [pc, #248]	; (8007260 <xTaskIncrementTick+0x14c>)
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	f000 faa0 	bl	80076ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800716c:	4b3d      	ldr	r3, [pc, #244]	; (8007264 <xTaskIncrementTick+0x150>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	429a      	cmp	r2, r3
 8007174:	d34e      	bcc.n	8007214 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007176:	4b38      	ldr	r3, [pc, #224]	; (8007258 <xTaskIncrementTick+0x144>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <xTaskIncrementTick+0x70>
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <xTaskIncrementTick+0x72>
 8007184:	2300      	movs	r3, #0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718a:	4b36      	ldr	r3, [pc, #216]	; (8007264 <xTaskIncrementTick+0x150>)
 800718c:	2201      	movs	r2, #1
 800718e:	4252      	negs	r2, r2
 8007190:	601a      	str	r2, [r3, #0]
					break;
 8007192:	e03f      	b.n	8007214 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007194:	4b30      	ldr	r3, [pc, #192]	; (8007258 <xTaskIncrementTick+0x144>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d203      	bcs.n	80071b4 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071ac:	4b2d      	ldr	r3, [pc, #180]	; (8007264 <xTaskIncrementTick+0x150>)
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	601a      	str	r2, [r3, #0]
						break;
 80071b2:	e02f      	b.n	8007214 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	3304      	adds	r3, #4
 80071b8:	0018      	movs	r0, r3
 80071ba:	f7ff f86c 	bl	8006296 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d004      	beq.n	80071d0 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	3318      	adds	r3, #24
 80071ca:	0018      	movs	r0, r3
 80071cc:	f7ff f863 	bl	8006296 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d4:	4b24      	ldr	r3, [pc, #144]	; (8007268 <xTaskIncrementTick+0x154>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d903      	bls.n	80071e4 <xTaskIncrementTick+0xd0>
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e0:	4b21      	ldr	r3, [pc, #132]	; (8007268 <xTaskIncrementTick+0x154>)
 80071e2:	601a      	str	r2, [r3, #0]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	0013      	movs	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	189b      	adds	r3, r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4a1e      	ldr	r2, [pc, #120]	; (800726c <xTaskIncrementTick+0x158>)
 80071f2:	189a      	adds	r2, r3, r2
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	3304      	adds	r3, #4
 80071f8:	0019      	movs	r1, r3
 80071fa:	0010      	movs	r0, r2
 80071fc:	f7fe fff3 	bl	80061e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007204:	4b1a      	ldr	r3, [pc, #104]	; (8007270 <xTaskIncrementTick+0x15c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	429a      	cmp	r2, r3
 800720c:	d3b3      	bcc.n	8007176 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007212:	e7b0      	b.n	8007176 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <xTaskIncrementTick+0x15c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721a:	4914      	ldr	r1, [pc, #80]	; (800726c <xTaskIncrementTick+0x158>)
 800721c:	0013      	movs	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	189b      	adds	r3, r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	585b      	ldr	r3, [r3, r1]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d907      	bls.n	800723a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800722a:	2301      	movs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	e004      	b.n	800723a <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007230:	4b10      	ldr	r3, [pc, #64]	; (8007274 <xTaskIncrementTick+0x160>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <xTaskIncrementTick+0x160>)
 8007238:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <xTaskIncrementTick+0x164>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8007242:	2301      	movs	r3, #1
 8007244:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007246:	697b      	ldr	r3, [r7, #20]
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b006      	add	sp, #24
 800724e:	bd80      	pop	{r7, pc}
 8007250:	200011bc 	.word	0x200011bc
 8007254:	20001198 	.word	0x20001198
 8007258:	2000114c 	.word	0x2000114c
 800725c:	20001150 	.word	0x20001150
 8007260:	200011ac 	.word	0x200011ac
 8007264:	200011b4 	.word	0x200011b4
 8007268:	2000119c 	.word	0x2000119c
 800726c:	20000cc4 	.word	0x20000cc4
 8007270:	20000cc0 	.word	0x20000cc0
 8007274:	200011a4 	.word	0x200011a4
 8007278:	200011a8 	.word	0x200011a8

0800727c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007282:	4b25      	ldr	r3, [pc, #148]	; (8007318 <vTaskSwitchContext+0x9c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800728a:	4b24      	ldr	r3, [pc, #144]	; (800731c <vTaskSwitchContext+0xa0>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007290:	e03d      	b.n	800730e <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8007292:	4b22      	ldr	r3, [pc, #136]	; (800731c <vTaskSwitchContext+0xa0>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007298:	4b21      	ldr	r3, [pc, #132]	; (8007320 <vTaskSwitchContext+0xa4>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	e007      	b.n	80072b0 <vTaskSwitchContext+0x34>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <vTaskSwitchContext+0x2e>
 80072a6:	b672      	cpsid	i
 80072a8:	e7fe      	b.n	80072a8 <vTaskSwitchContext+0x2c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	607b      	str	r3, [r7, #4]
 80072b0:	491c      	ldr	r1, [pc, #112]	; (8007324 <vTaskSwitchContext+0xa8>)
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	0013      	movs	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	189b      	adds	r3, r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	585b      	ldr	r3, [r3, r1]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0ee      	beq.n	80072a0 <vTaskSwitchContext+0x24>
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	0013      	movs	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	189b      	adds	r3, r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4a15      	ldr	r2, [pc, #84]	; (8007324 <vTaskSwitchContext+0xa8>)
 80072ce:	189b      	adds	r3, r3, r2
 80072d0:	603b      	str	r3, [r7, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	605a      	str	r2, [r3, #4]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d104      	bne.n	80072f2 <vTaskSwitchContext+0x76>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <vTaskSwitchContext+0xac>)
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	4b08      	ldr	r3, [pc, #32]	; (8007320 <vTaskSwitchContext+0xa4>)
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <vTaskSwitchContext+0xac>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3354      	adds	r3, #84	; 0x54
 8007308:	001a      	movs	r2, r3
 800730a:	4b08      	ldr	r3, [pc, #32]	; (800732c <vTaskSwitchContext+0xb0>)
 800730c:	601a      	str	r2, [r3, #0]
}
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	46bd      	mov	sp, r7
 8007312:	b002      	add	sp, #8
 8007314:	bd80      	pop	{r7, pc}
 8007316:	46c0      	nop			; (mov r8, r8)
 8007318:	200011bc 	.word	0x200011bc
 800731c:	200011a8 	.word	0x200011a8
 8007320:	2000119c 	.word	0x2000119c
 8007324:	20000cc4 	.word	0x20000cc4
 8007328:	20000cc0 	.word	0x20000cc0
 800732c:	20000190 	.word	0x20000190

08007330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <vTaskPlaceOnEventList+0x14>
 8007340:	b672      	cpsid	i
 8007342:	e7fe      	b.n	8007342 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007344:	4b08      	ldr	r3, [pc, #32]	; (8007368 <vTaskPlaceOnEventList+0x38>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3318      	adds	r3, #24
 800734a:	001a      	movs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	0011      	movs	r1, r2
 8007350:	0018      	movs	r0, r3
 8007352:	f7fe ff6a 	bl	800622a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2101      	movs	r1, #1
 800735a:	0018      	movs	r0, r3
 800735c:	f000 fa42 	bl	80077e4 <prvAddCurrentTaskToDelayedList>
}
 8007360:	46c0      	nop			; (mov r8, r8)
 8007362:	46bd      	mov	sp, r7
 8007364:	b002      	add	sp, #8
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000cc0 	.word	0x20000cc0

0800736c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	60b9      	str	r1, [r7, #8]
 8007376:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <vTaskPlaceOnEventListRestricted+0x16>
 800737e:	b672      	cpsid	i
 8007380:	e7fe      	b.n	8007380 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007382:	4b0c      	ldr	r3, [pc, #48]	; (80073b4 <vTaskPlaceOnEventListRestricted+0x48>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3318      	adds	r3, #24
 8007388:	001a      	movs	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	0011      	movs	r1, r2
 800738e:	0018      	movs	r0, r3
 8007390:	f7fe ff29 	bl	80061e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800739a:	2301      	movs	r3, #1
 800739c:	425b      	negs	r3, r3
 800739e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	0011      	movs	r1, r2
 80073a6:	0018      	movs	r0, r3
 80073a8:	f000 fa1c 	bl	80077e4 <prvAddCurrentTaskToDelayedList>
	}
 80073ac:	46c0      	nop			; (mov r8, r8)
 80073ae:	46bd      	mov	sp, r7
 80073b0:	b004      	add	sp, #16
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000cc0 	.word	0x20000cc0

080073b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <xTaskRemoveFromEventList+0x1a>
 80073ce:	b672      	cpsid	i
 80073d0:	e7fe      	b.n	80073d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	3318      	adds	r3, #24
 80073d6:	0018      	movs	r0, r3
 80073d8:	f7fe ff5d 	bl	8006296 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073dc:	4b1e      	ldr	r3, [pc, #120]	; (8007458 <xTaskRemoveFromEventList+0xa0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d11d      	bne.n	8007420 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	3304      	adds	r3, #4
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7fe ff54 	bl	8006296 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f2:	4b1a      	ldr	r3, [pc, #104]	; (800745c <xTaskRemoveFromEventList+0xa4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d903      	bls.n	8007402 <xTaskRemoveFromEventList+0x4a>
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fe:	4b17      	ldr	r3, [pc, #92]	; (800745c <xTaskRemoveFromEventList+0xa4>)
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	0013      	movs	r3, r2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	189b      	adds	r3, r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4a14      	ldr	r2, [pc, #80]	; (8007460 <xTaskRemoveFromEventList+0xa8>)
 8007410:	189a      	adds	r2, r3, r2
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	3304      	adds	r3, #4
 8007416:	0019      	movs	r1, r3
 8007418:	0010      	movs	r0, r2
 800741a:	f7fe fee4 	bl	80061e6 <vListInsertEnd>
 800741e:	e007      	b.n	8007430 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	3318      	adds	r3, #24
 8007424:	001a      	movs	r2, r3
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <xTaskRemoveFromEventList+0xac>)
 8007428:	0011      	movs	r1, r2
 800742a:	0018      	movs	r0, r3
 800742c:	f7fe fedb 	bl	80061e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <xTaskRemoveFromEventList+0xb0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743a:	429a      	cmp	r2, r3
 800743c:	d905      	bls.n	800744a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800743e:	2301      	movs	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007442:	4b0a      	ldr	r3, [pc, #40]	; (800746c <xTaskRemoveFromEventList+0xb4>)
 8007444:	2201      	movs	r2, #1
 8007446:	601a      	str	r2, [r3, #0]
 8007448:	e001      	b.n	800744e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800744a:	2300      	movs	r3, #0
 800744c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800744e:	68fb      	ldr	r3, [r7, #12]
}
 8007450:	0018      	movs	r0, r3
 8007452:	46bd      	mov	sp, r7
 8007454:	b004      	add	sp, #16
 8007456:	bd80      	pop	{r7, pc}
 8007458:	200011bc 	.word	0x200011bc
 800745c:	2000119c 	.word	0x2000119c
 8007460:	20000cc4 	.word	0x20000cc4
 8007464:	20001154 	.word	0x20001154
 8007468:	20000cc0 	.word	0x20000cc0
 800746c:	200011a8 	.word	0x200011a8

08007470 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <vTaskInternalSetTimeOutState+0x20>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007480:	4b04      	ldr	r3, [pc, #16]	; (8007494 <vTaskInternalSetTimeOutState+0x24>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	605a      	str	r2, [r3, #4]
}
 8007488:	46c0      	nop			; (mov r8, r8)
 800748a:	46bd      	mov	sp, r7
 800748c:	b002      	add	sp, #8
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200011ac 	.word	0x200011ac
 8007494:	20001198 	.word	0x20001198

08007498 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <xTaskCheckForTimeOut+0x14>
 80074a8:	b672      	cpsid	i
 80074aa:	e7fe      	b.n	80074aa <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <xTaskCheckForTimeOut+0x1e>
 80074b2:	b672      	cpsid	i
 80074b4:	e7fe      	b.n	80074b4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80074b6:	f000 fd53 	bl	8007f60 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ba:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <xTaskCheckForTimeOut+0x98>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	3301      	adds	r3, #1
 80074d0:	d102      	bne.n	80074d8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]
 80074d6:	e024      	b.n	8007522 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4b15      	ldr	r3, [pc, #84]	; (8007534 <xTaskCheckForTimeOut+0x9c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d007      	beq.n	80074f4 <xTaskCheckForTimeOut+0x5c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d302      	bcc.n	80074f4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074ee:	2301      	movs	r3, #1
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e016      	b.n	8007522 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d20c      	bcs.n	8007518 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad2      	subs	r2, r2, r3
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	0018      	movs	r0, r3
 800750e:	f7ff ffaf 	bl	8007470 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]
 8007516:	e004      	b.n	8007522 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800751e:	2301      	movs	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007522:	f000 fd2f 	bl	8007f84 <vPortExitCritical>

	return xReturn;
 8007526:	697b      	ldr	r3, [r7, #20]
}
 8007528:	0018      	movs	r0, r3
 800752a:	46bd      	mov	sp, r7
 800752c:	b006      	add	sp, #24
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20001198 	.word	0x20001198
 8007534:	200011ac 	.word	0x200011ac

08007538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800753c:	4b02      	ldr	r3, [pc, #8]	; (8007548 <vTaskMissedYield+0x10>)
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]
}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	200011a8 	.word	0x200011a8

0800754c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007554:	f000 f84e 	bl	80075f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <prvIdleTask+0x1c>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d9f9      	bls.n	8007554 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007560:	f000 fcee 	bl	8007f40 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007564:	e7f6      	b.n	8007554 <prvIdleTask+0x8>
 8007566:	46c0      	nop			; (mov r8, r8)
 8007568:	20000cc4 	.word	0x20000cc4

0800756c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007572:	2300      	movs	r3, #0
 8007574:	607b      	str	r3, [r7, #4]
 8007576:	e00c      	b.n	8007592 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	0013      	movs	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	189b      	adds	r3, r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4a14      	ldr	r2, [pc, #80]	; (80075d4 <prvInitialiseTaskLists+0x68>)
 8007584:	189b      	adds	r3, r3, r2
 8007586:	0018      	movs	r0, r3
 8007588:	f7fe fe04 	bl	8006194 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	3301      	adds	r3, #1
 8007590:	607b      	str	r3, [r7, #4]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b37      	cmp	r3, #55	; 0x37
 8007596:	d9ef      	bls.n	8007578 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007598:	4b0f      	ldr	r3, [pc, #60]	; (80075d8 <prvInitialiseTaskLists+0x6c>)
 800759a:	0018      	movs	r0, r3
 800759c:	f7fe fdfa 	bl	8006194 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075a0:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <prvInitialiseTaskLists+0x70>)
 80075a2:	0018      	movs	r0, r3
 80075a4:	f7fe fdf6 	bl	8006194 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075a8:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <prvInitialiseTaskLists+0x74>)
 80075aa:	0018      	movs	r0, r3
 80075ac:	f7fe fdf2 	bl	8006194 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075b0:	4b0c      	ldr	r3, [pc, #48]	; (80075e4 <prvInitialiseTaskLists+0x78>)
 80075b2:	0018      	movs	r0, r3
 80075b4:	f7fe fdee 	bl	8006194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <prvInitialiseTaskLists+0x7c>)
 80075ba:	0018      	movs	r0, r3
 80075bc:	f7fe fdea 	bl	8006194 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <prvInitialiseTaskLists+0x80>)
 80075c2:	4a05      	ldr	r2, [pc, #20]	; (80075d8 <prvInitialiseTaskLists+0x6c>)
 80075c4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075c6:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <prvInitialiseTaskLists+0x84>)
 80075c8:	4a04      	ldr	r2, [pc, #16]	; (80075dc <prvInitialiseTaskLists+0x70>)
 80075ca:	601a      	str	r2, [r3, #0]
}
 80075cc:	46c0      	nop			; (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b002      	add	sp, #8
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000cc4 	.word	0x20000cc4
 80075d8:	20001124 	.word	0x20001124
 80075dc:	20001138 	.word	0x20001138
 80075e0:	20001154 	.word	0x20001154
 80075e4:	20001168 	.word	0x20001168
 80075e8:	20001180 	.word	0x20001180
 80075ec:	2000114c 	.word	0x2000114c
 80075f0:	20001150 	.word	0x20001150

080075f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075fa:	e01a      	b.n	8007632 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80075fc:	f000 fcb0 	bl	8007f60 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007600:	4b10      	ldr	r3, [pc, #64]	; (8007644 <prvCheckTasksWaitingTermination+0x50>)
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3304      	adds	r3, #4
 800760c:	0018      	movs	r0, r3
 800760e:	f7fe fe42 	bl	8006296 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007612:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <prvCheckTasksWaitingTermination+0x54>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	1e5a      	subs	r2, r3, #1
 8007618:	4b0b      	ldr	r3, [pc, #44]	; (8007648 <prvCheckTasksWaitingTermination+0x54>)
 800761a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800761c:	4b0b      	ldr	r3, [pc, #44]	; (800764c <prvCheckTasksWaitingTermination+0x58>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	1e5a      	subs	r2, r3, #1
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <prvCheckTasksWaitingTermination+0x58>)
 8007624:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007626:	f000 fcad 	bl	8007f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	0018      	movs	r0, r3
 800762e:	f000 f80f 	bl	8007650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007632:	4b06      	ldr	r3, [pc, #24]	; (800764c <prvCheckTasksWaitingTermination+0x58>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e0      	bne.n	80075fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800763a:	46c0      	nop			; (mov r8, r8)
 800763c:	46c0      	nop			; (mov r8, r8)
 800763e:	46bd      	mov	sp, r7
 8007640:	b002      	add	sp, #8
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20001168 	.word	0x20001168
 8007648:	20001194 	.word	0x20001194
 800764c:	2000117c 	.word	0x2000117c

08007650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	3354      	adds	r3, #84	; 0x54
 800765c:	0018      	movs	r0, r3
 800765e:	f000 ff07 	bl	8008470 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	22b9      	movs	r2, #185	; 0xb9
 8007666:	5c9b      	ldrb	r3, [r3, r2]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d109      	bne.n	8007680 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007670:	0018      	movs	r0, r3
 8007672:	f000 fdb3 	bl	80081dc <vPortFree>
				vPortFree( pxTCB );
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	0018      	movs	r0, r3
 800767a:	f000 fdaf 	bl	80081dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800767e:	e010      	b.n	80076a2 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	22b9      	movs	r2, #185	; 0xb9
 8007684:	5c9b      	ldrb	r3, [r3, r2]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d104      	bne.n	8007694 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	0018      	movs	r0, r3
 800768e:	f000 fda5 	bl	80081dc <vPortFree>
	}
 8007692:	e006      	b.n	80076a2 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	22b9      	movs	r2, #185	; 0xb9
 8007698:	5c9b      	ldrb	r3, [r3, r2]
 800769a:	2b02      	cmp	r3, #2
 800769c:	d001      	beq.n	80076a2 <prvDeleteTCB+0x52>
 800769e:	b672      	cpsid	i
 80076a0:	e7fe      	b.n	80076a0 <prvDeleteTCB+0x50>
	}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b002      	add	sp, #8
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076b2:	4b0e      	ldr	r3, [pc, #56]	; (80076ec <prvResetNextTaskUnblockTime+0x40>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <prvResetNextTaskUnblockTime+0x14>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <prvResetNextTaskUnblockTime+0x16>
 80076c0:	2300      	movs	r3, #0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <prvResetNextTaskUnblockTime+0x44>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	4252      	negs	r2, r2
 80076cc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076ce:	e008      	b.n	80076e2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <prvResetNextTaskUnblockTime+0x40>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <prvResetNextTaskUnblockTime+0x44>)
 80076e0:	601a      	str	r2, [r3, #0]
}
 80076e2:	46c0      	nop			; (mov r8, r8)
 80076e4:	46bd      	mov	sp, r7
 80076e6:	b002      	add	sp, #8
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	2000114c 	.word	0x2000114c
 80076f0:	200011b4 	.word	0x200011b4

080076f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076fa:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <xTaskGetSchedulerState+0x30>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d102      	bne.n	8007708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007702:	2301      	movs	r3, #1
 8007704:	607b      	str	r3, [r7, #4]
 8007706:	e008      	b.n	800771a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007708:	4b07      	ldr	r3, [pc, #28]	; (8007728 <xTaskGetSchedulerState+0x34>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007710:	2302      	movs	r3, #2
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	e001      	b.n	800771a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007716:	2300      	movs	r3, #0
 8007718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800771a:	687b      	ldr	r3, [r7, #4]
	}
 800771c:	0018      	movs	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	b002      	add	sp, #8
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200011a0 	.word	0x200011a0
 8007728:	200011bc 	.word	0x200011bc

0800772c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007738:	2300      	movs	r3, #0
 800773a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d044      	beq.n	80077cc <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007742:	4b25      	ldr	r3, [pc, #148]	; (80077d8 <xTaskPriorityDisinherit+0xac>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	429a      	cmp	r2, r3
 800774a:	d001      	beq.n	8007750 <xTaskPriorityDisinherit+0x24>
 800774c:	b672      	cpsid	i
 800774e:	e7fe      	b.n	800774e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007754:	2b00      	cmp	r3, #0
 8007756:	d101      	bne.n	800775c <xTaskPriorityDisinherit+0x30>
 8007758:	b672      	cpsid	i
 800775a:	e7fe      	b.n	800775a <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007760:	1e5a      	subs	r2, r3, #1
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800776e:	429a      	cmp	r2, r3
 8007770:	d02c      	beq.n	80077cc <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007776:	2b00      	cmp	r3, #0
 8007778:	d128      	bne.n	80077cc <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	3304      	adds	r3, #4
 800777e:	0018      	movs	r0, r3
 8007780:	f7fe fd89 	bl	8006296 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007790:	2238      	movs	r2, #56	; 0x38
 8007792:	1ad2      	subs	r2, r2, r3
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779c:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <xTaskPriorityDisinherit+0xb0>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d903      	bls.n	80077ac <xTaskPriorityDisinherit+0x80>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077a8:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <xTaskPriorityDisinherit+0xb0>)
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b0:	0013      	movs	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	189b      	adds	r3, r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4a09      	ldr	r2, [pc, #36]	; (80077e0 <xTaskPriorityDisinherit+0xb4>)
 80077ba:	189a      	adds	r2, r3, r2
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	3304      	adds	r3, #4
 80077c0:	0019      	movs	r1, r3
 80077c2:	0010      	movs	r0, r2
 80077c4:	f7fe fd0f 	bl	80061e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077c8:	2301      	movs	r3, #1
 80077ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077cc:	68fb      	ldr	r3, [r7, #12]
	}
 80077ce:	0018      	movs	r0, r3
 80077d0:	46bd      	mov	sp, r7
 80077d2:	b004      	add	sp, #16
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	20000cc0 	.word	0x20000cc0
 80077dc:	2000119c 	.word	0x2000119c
 80077e0:	20000cc4 	.word	0x20000cc4

080077e4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077ee:	4b21      	ldr	r3, [pc, #132]	; (8007874 <prvAddCurrentTaskToDelayedList+0x90>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077f4:	4b20      	ldr	r3, [pc, #128]	; (8007878 <prvAddCurrentTaskToDelayedList+0x94>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3304      	adds	r3, #4
 80077fa:	0018      	movs	r0, r3
 80077fc:	f7fe fd4b 	bl	8006296 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3301      	adds	r3, #1
 8007804:	d10b      	bne.n	800781e <prvAddCurrentTaskToDelayedList+0x3a>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d008      	beq.n	800781e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800780c:	4b1a      	ldr	r3, [pc, #104]	; (8007878 <prvAddCurrentTaskToDelayedList+0x94>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	1d1a      	adds	r2, r3, #4
 8007812:	4b1a      	ldr	r3, [pc, #104]	; (800787c <prvAddCurrentTaskToDelayedList+0x98>)
 8007814:	0011      	movs	r1, r2
 8007816:	0018      	movs	r0, r3
 8007818:	f7fe fce5 	bl	80061e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800781c:	e026      	b.n	800786c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	18d3      	adds	r3, r2, r3
 8007824:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007826:	4b14      	ldr	r3, [pc, #80]	; (8007878 <prvAddCurrentTaskToDelayedList+0x94>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	429a      	cmp	r2, r3
 8007834:	d209      	bcs.n	800784a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007836:	4b12      	ldr	r3, [pc, #72]	; (8007880 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b0f      	ldr	r3, [pc, #60]	; (8007878 <prvAddCurrentTaskToDelayedList+0x94>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3304      	adds	r3, #4
 8007840:	0019      	movs	r1, r3
 8007842:	0010      	movs	r0, r2
 8007844:	f7fe fcf1 	bl	800622a <vListInsert>
}
 8007848:	e010      	b.n	800786c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800784a:	4b0e      	ldr	r3, [pc, #56]	; (8007884 <prvAddCurrentTaskToDelayedList+0xa0>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	4b0a      	ldr	r3, [pc, #40]	; (8007878 <prvAddCurrentTaskToDelayedList+0x94>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	3304      	adds	r3, #4
 8007854:	0019      	movs	r1, r3
 8007856:	0010      	movs	r0, r2
 8007858:	f7fe fce7 	bl	800622a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <prvAddCurrentTaskToDelayedList+0xa4>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	429a      	cmp	r2, r3
 8007864:	d202      	bcs.n	800786c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007866:	4b08      	ldr	r3, [pc, #32]	; (8007888 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	601a      	str	r2, [r3, #0]
}
 800786c:	46c0      	nop			; (mov r8, r8)
 800786e:	46bd      	mov	sp, r7
 8007870:	b004      	add	sp, #16
 8007872:	bd80      	pop	{r7, pc}
 8007874:	20001198 	.word	0x20001198
 8007878:	20000cc0 	.word	0x20000cc0
 800787c:	20001180 	.word	0x20001180
 8007880:	20001150 	.word	0x20001150
 8007884:	2000114c 	.word	0x2000114c
 8007888:	200011b4 	.word	0x200011b4

0800788c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800788c:	b590      	push	{r4, r7, lr}
 800788e:	b089      	sub	sp, #36	; 0x24
 8007890:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007896:	f000 fa87 	bl	8007da8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800789a:	4b17      	ldr	r3, [pc, #92]	; (80078f8 <xTimerCreateTimerTask+0x6c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d020      	beq.n	80078e4 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078aa:	003a      	movs	r2, r7
 80078ac:	1d39      	adds	r1, r7, #4
 80078ae:	2308      	movs	r3, #8
 80078b0:	18fb      	adds	r3, r7, r3
 80078b2:	0018      	movs	r0, r3
 80078b4:	f7fe fc56 	bl	8006164 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078b8:	683c      	ldr	r4, [r7, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	490f      	ldr	r1, [pc, #60]	; (80078fc <xTimerCreateTimerTask+0x70>)
 80078c0:	480f      	ldr	r0, [pc, #60]	; (8007900 <xTimerCreateTimerTask+0x74>)
 80078c2:	9202      	str	r2, [sp, #8]
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	2302      	movs	r3, #2
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	2300      	movs	r3, #0
 80078cc:	0022      	movs	r2, r4
 80078ce:	f7ff f968 	bl	8006ba2 <xTaskCreateStatic>
 80078d2:	0002      	movs	r2, r0
 80078d4:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <xTimerCreateTimerTask+0x78>)
 80078d6:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <xTimerCreateTimerTask+0x78>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80078e0:	2301      	movs	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d101      	bne.n	80078ee <xTimerCreateTimerTask+0x62>
 80078ea:	b672      	cpsid	i
 80078ec:	e7fe      	b.n	80078ec <xTimerCreateTimerTask+0x60>
	return xReturn;
 80078ee:	68fb      	ldr	r3, [r7, #12]
}
 80078f0:	0018      	movs	r0, r3
 80078f2:	46bd      	mov	sp, r7
 80078f4:	b005      	add	sp, #20
 80078f6:	bd90      	pop	{r4, r7, pc}
 80078f8:	200011f0 	.word	0x200011f0
 80078fc:	0800883c 	.word	0x0800883c
 8007900:	08007a0d 	.word	0x08007a0d
 8007904:	200011f4 	.word	0x200011f4

08007908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007908:	b590      	push	{r4, r7, lr}
 800790a:	b08b      	sub	sp, #44	; 0x2c
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007916:	2300      	movs	r3, #0
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <xTimerGenericCommand+0x1c>
 8007920:	b672      	cpsid	i
 8007922:	e7fe      	b.n	8007922 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007924:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <xTimerGenericCommand+0x90>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d030      	beq.n	800798e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800792c:	2414      	movs	r4, #20
 800792e:	193b      	adds	r3, r7, r4
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007934:	193b      	adds	r3, r7, r4
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800793a:	193b      	adds	r3, r7, r4
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b05      	cmp	r3, #5
 8007944:	dc19      	bgt.n	800797a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007946:	f7ff fed5 	bl	80076f4 <xTaskGetSchedulerState>
 800794a:	0003      	movs	r3, r0
 800794c:	2b02      	cmp	r3, #2
 800794e:	d109      	bne.n	8007964 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007950:	4b11      	ldr	r3, [pc, #68]	; (8007998 <xTimerGenericCommand+0x90>)
 8007952:	6818      	ldr	r0, [r3, #0]
 8007954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007956:	1939      	adds	r1, r7, r4
 8007958:	2300      	movs	r3, #0
 800795a:	f7fe fdc0 	bl	80064de <xQueueGenericSend>
 800795e:	0003      	movs	r3, r0
 8007960:	627b      	str	r3, [r7, #36]	; 0x24
 8007962:	e014      	b.n	800798e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <xTimerGenericCommand+0x90>)
 8007966:	6818      	ldr	r0, [r3, #0]
 8007968:	2314      	movs	r3, #20
 800796a:	18f9      	adds	r1, r7, r3
 800796c:	2300      	movs	r3, #0
 800796e:	2200      	movs	r2, #0
 8007970:	f7fe fdb5 	bl	80064de <xQueueGenericSend>
 8007974:	0003      	movs	r3, r0
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
 8007978:	e009      	b.n	800798e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <xTimerGenericCommand+0x90>)
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	2314      	movs	r3, #20
 8007982:	18f9      	adds	r1, r7, r3
 8007984:	2300      	movs	r3, #0
 8007986:	f7fe fe6e 	bl	8006666 <xQueueGenericSendFromISR>
 800798a:	0003      	movs	r3, r0
 800798c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007990:	0018      	movs	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	b00b      	add	sp, #44	; 0x2c
 8007996:	bd90      	pop	{r4, r7, pc}
 8007998:	200011f0 	.word	0x200011f0

0800799c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079a6:	4b18      	ldr	r3, [pc, #96]	; (8007a08 <prvProcessExpiredTimer+0x6c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3304      	adds	r3, #4
 80079b4:	0018      	movs	r0, r3
 80079b6:	f7fe fc6e 	bl	8006296 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d119      	bne.n	80079f6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	18d1      	adds	r1, r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	68f8      	ldr	r0, [r7, #12]
 80079d0:	f000 f8b6 	bl	8007b40 <prvInsertTimerInActiveList>
 80079d4:	1e03      	subs	r3, r0, #0
 80079d6:	d00e      	beq.n	80079f6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	2300      	movs	r3, #0
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	2300      	movs	r3, #0
 80079e2:	2100      	movs	r1, #0
 80079e4:	f7ff ff90 	bl	8007908 <xTimerGenericCommand>
 80079e8:	0003      	movs	r3, r0
 80079ea:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <prvProcessExpiredTimer+0x5a>
 80079f2:	b672      	cpsid	i
 80079f4:	e7fe      	b.n	80079f4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	0010      	movs	r0, r2
 80079fe:	4798      	blx	r3
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b004      	add	sp, #16
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	200011e8 	.word	0x200011e8

08007a0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a14:	2308      	movs	r3, #8
 8007a16:	18fb      	adds	r3, r7, r3
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f000 f851 	bl	8007ac0 <prvGetNextExpireTime>
 8007a1e:	0003      	movs	r3, r0
 8007a20:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0011      	movs	r1, r2
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f000 f803 	bl	8007a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a2e:	f000 f8c9 	bl	8007bc4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a32:	e7ef      	b.n	8007a14 <prvTimerTask+0x8>

08007a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a3e:	f7ff fac3 	bl	8006fc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a42:	2308      	movs	r3, #8
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	0018      	movs	r0, r3
 8007a48:	f000 f85a 	bl	8007b00 <prvSampleTimeNow>
 8007a4c:	0003      	movs	r3, r0
 8007a4e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d129      	bne.n	8007aaa <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10c      	bne.n	8007a76 <prvProcessTimerOrBlockTask+0x42>
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d808      	bhi.n	8007a76 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8007a64:	f7ff fabc 	bl	8006fe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	0011      	movs	r1, r2
 8007a6e:	0018      	movs	r0, r3
 8007a70:	f7ff ff94 	bl	800799c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a74:	e01b      	b.n	8007aae <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d006      	beq.n	8007a8a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a7c:	4b0e      	ldr	r3, [pc, #56]	; (8007ab8 <prvProcessTimerOrBlockTask+0x84>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	425a      	negs	r2, r3
 8007a84:	4153      	adcs	r3, r2
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a8a:	4b0c      	ldr	r3, [pc, #48]	; (8007abc <prvProcessTimerOrBlockTask+0x88>)
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	0019      	movs	r1, r3
 8007a98:	f7ff f850 	bl	8006b3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a9c:	f7ff faa0 	bl	8006fe0 <xTaskResumeAll>
 8007aa0:	1e03      	subs	r3, r0, #0
 8007aa2:	d104      	bne.n	8007aae <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8007aa4:	f000 fa4c 	bl	8007f40 <vPortYield>
}
 8007aa8:	e001      	b.n	8007aae <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 8007aaa:	f7ff fa99 	bl	8006fe0 <xTaskResumeAll>
}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b004      	add	sp, #16
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	46c0      	nop			; (mov r8, r8)
 8007ab8:	200011ec 	.word	0x200011ec
 8007abc:	200011f0 	.word	0x200011f0

08007ac0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <prvGetNextExpireTime+0x3c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	425a      	negs	r2, r3
 8007ad0:	4153      	adcs	r3, r2
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	001a      	movs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d105      	bne.n	8007aee <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ae2:	4b06      	ldr	r3, [pc, #24]	; (8007afc <prvGetNextExpireTime+0x3c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	e001      	b.n	8007af2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007af2:	68fb      	ldr	r3, [r7, #12]
}
 8007af4:	0018      	movs	r0, r3
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b004      	add	sp, #16
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	200011e8 	.word	0x200011e8

08007b00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b08:	f7ff faf6 	bl	80070f8 <xTaskGetTickCount>
 8007b0c:	0003      	movs	r3, r0
 8007b0e:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <prvSampleTimeNow+0x3c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d205      	bcs.n	8007b26 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8007b1a:	f000 f8eb 	bl	8007cf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e002      	b.n	8007b2c <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b2c:	4b03      	ldr	r3, [pc, #12]	; (8007b3c <prvSampleTimeNow+0x3c>)
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8007b32:	68fb      	ldr	r3, [r7, #12]
}
 8007b34:	0018      	movs	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b004      	add	sp, #16
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	200011f8 	.word	0x200011f8

08007b40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d812      	bhi.n	8007b8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	1ad2      	subs	r2, r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d302      	bcc.n	8007b7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e01b      	b.n	8007bb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b7a:	4b10      	ldr	r3, [pc, #64]	; (8007bbc <prvInsertTimerInActiveList+0x7c>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3304      	adds	r3, #4
 8007b82:	0019      	movs	r1, r3
 8007b84:	0010      	movs	r0, r2
 8007b86:	f7fe fb50 	bl	800622a <vListInsert>
 8007b8a:	e012      	b.n	8007bb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d206      	bcs.n	8007ba2 <prvInsertTimerInActiveList+0x62>
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d302      	bcc.n	8007ba2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e007      	b.n	8007bb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ba2:	4b07      	ldr	r3, [pc, #28]	; (8007bc0 <prvInsertTimerInActiveList+0x80>)
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	0019      	movs	r1, r3
 8007bac:	0010      	movs	r0, r2
 8007bae:	f7fe fb3c 	bl	800622a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bb2:	697b      	ldr	r3, [r7, #20]
}
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	b006      	add	sp, #24
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	200011ec 	.word	0x200011ec
 8007bc0:	200011e8 	.word	0x200011e8

08007bc4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bc4:	b590      	push	{r4, r7, lr}
 8007bc6:	b08d      	sub	sp, #52	; 0x34
 8007bc8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bca:	e07f      	b.n	8007ccc <prvProcessReceivedCommands+0x108>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bcc:	2208      	movs	r2, #8
 8007bce:	18bb      	adds	r3, r7, r2
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da0f      	bge.n	8007bf6 <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bd6:	18bb      	adds	r3, r7, r2
 8007bd8:	3304      	adds	r3, #4
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d101      	bne.n	8007be6 <prvProcessReceivedCommands+0x22>
 8007be2:	b672      	cpsid	i
 8007be4:	e7fe      	b.n	8007be4 <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bec:	6858      	ldr	r0, [r3, #4]
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	0019      	movs	r1, r3
 8007bf4:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bf6:	2208      	movs	r2, #8
 8007bf8:	18bb      	adds	r3, r7, r2
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	db64      	blt.n	8007cca <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c00:	18bb      	adds	r3, r7, r2
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d004      	beq.n	8007c18 <prvProcessReceivedCommands+0x54>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	3304      	adds	r3, #4
 8007c12:	0018      	movs	r0, r3
 8007c14:	f7fe fb3f 	bl	8006296 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c18:	1d3b      	adds	r3, r7, #4
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f7ff ff70 	bl	8007b00 <prvSampleTimeNow>
 8007c20:	0003      	movs	r3, r0
 8007c22:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8007c24:	2308      	movs	r3, #8
 8007c26:	18fb      	adds	r3, r7, r3
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b09      	cmp	r3, #9
 8007c2c:	d84e      	bhi.n	8007ccc <prvProcessReceivedCommands+0x108>
 8007c2e:	009a      	lsls	r2, r3, #2
 8007c30:	4b2e      	ldr	r3, [pc, #184]	; (8007cec <prvProcessReceivedCommands+0x128>)
 8007c32:	18d3      	adds	r3, r2, r3
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c38:	2408      	movs	r4, #8
 8007c3a:	193b      	adds	r3, r7, r4
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	18d1      	adds	r1, r2, r3
 8007c44:	193b      	adds	r3, r7, r4
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	6a38      	ldr	r0, [r7, #32]
 8007c4c:	f7ff ff78 	bl	8007b40 <prvInsertTimerInActiveList>
 8007c50:	1e03      	subs	r3, r0, #0
 8007c52:	d03b      	beq.n	8007ccc <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	6a3a      	ldr	r2, [r7, #32]
 8007c5a:	0010      	movs	r0, r2
 8007c5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d132      	bne.n	8007ccc <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c66:	193b      	adds	r3, r7, r4
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	6a3b      	ldr	r3, [r7, #32]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	18d2      	adds	r2, r2, r3
 8007c70:	6a38      	ldr	r0, [r7, #32]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	2300      	movs	r3, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	f7ff fe45 	bl	8007908 <xTimerGenericCommand>
 8007c7e:	0003      	movs	r3, r0
 8007c80:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d121      	bne.n	8007ccc <prvProcessReceivedCommands+0x108>
 8007c88:	b672      	cpsid	i
 8007c8a:	e7fe      	b.n	8007c8a <prvProcessReceivedCommands+0xc6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	18fb      	adds	r3, r7, r3
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <prvProcessReceivedCommands+0xde>
 8007c9e:	b672      	cpsid	i
 8007ca0:	e7fe      	b.n	8007ca0 <prvProcessReceivedCommands+0xdc>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	699a      	ldr	r2, [r3, #24]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	18d1      	adds	r1, r2, r3
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	6a38      	ldr	r0, [r7, #32]
 8007cb0:	f7ff ff46 	bl	8007b40 <prvInsertTimerInActiveList>
					break;
 8007cb4:	e00a      	b.n	8007ccc <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	222c      	movs	r2, #44	; 0x2c
 8007cba:	5c9b      	ldrb	r3, [r3, r2]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d105      	bne.n	8007ccc <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f000 fa8a 	bl	80081dc <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cc8:	e000      	b.n	8007ccc <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007cca:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ccc:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <prvProcessReceivedCommands+0x12c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	18b9      	adds	r1, r7, r2
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7fe fd36 	bl	8006748 <xQueueReceive>
 8007cdc:	1e03      	subs	r3, r0, #0
 8007cde:	d000      	beq.n	8007ce2 <prvProcessReceivedCommands+0x11e>
 8007ce0:	e774      	b.n	8007bcc <prvProcessReceivedCommands+0x8>
	}
}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	46c0      	nop			; (mov r8, r8)
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b00b      	add	sp, #44	; 0x2c
 8007cea:	bd90      	pop	{r4, r7, pc}
 8007cec:	08008a5c 	.word	0x08008a5c
 8007cf0:	200011f0 	.word	0x200011f0

08007cf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b088      	sub	sp, #32
 8007cf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cfa:	e03e      	b.n	8007d7a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cfc:	4b28      	ldr	r3, [pc, #160]	; (8007da0 <prvSwitchTimerLists+0xac>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d06:	4b26      	ldr	r3, [pc, #152]	; (8007da0 <prvSwitchTimerLists+0xac>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3304      	adds	r3, #4
 8007d14:	0018      	movs	r0, r3
 8007d16:	f7fe fabe 	bl	8006296 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	0010      	movs	r0, r2
 8007d22:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d126      	bne.n	8007d7a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	18d3      	adds	r3, r2, r3
 8007d34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d90e      	bls.n	8007d5c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d4a:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <prvSwitchTimerLists+0xac>)
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	3304      	adds	r3, #4
 8007d52:	0019      	movs	r1, r3
 8007d54:	0010      	movs	r0, r2
 8007d56:	f7fe fa68 	bl	800622a <vListInsert>
 8007d5a:	e00e      	b.n	8007d7a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	2300      	movs	r3, #0
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2300      	movs	r3, #0
 8007d66:	2100      	movs	r1, #0
 8007d68:	f7ff fdce 	bl	8007908 <xTimerGenericCommand>
 8007d6c:	0003      	movs	r3, r0
 8007d6e:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <prvSwitchTimerLists+0x86>
 8007d76:	b672      	cpsid	i
 8007d78:	e7fe      	b.n	8007d78 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <prvSwitchTimerLists+0xac>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1bb      	bne.n	8007cfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d84:	4b06      	ldr	r3, [pc, #24]	; (8007da0 <prvSwitchTimerLists+0xac>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d8a:	4b06      	ldr	r3, [pc, #24]	; (8007da4 <prvSwitchTimerLists+0xb0>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <prvSwitchTimerLists+0xac>)
 8007d90:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8007d92:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <prvSwitchTimerLists+0xb0>)
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	601a      	str	r2, [r3, #0]
}
 8007d98:	46c0      	nop			; (mov r8, r8)
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	b006      	add	sp, #24
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	200011e8 	.word	0x200011e8
 8007da4:	200011ec 	.word	0x200011ec

08007da8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dae:	f000 f8d7 	bl	8007f60 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007db2:	4b16      	ldr	r3, [pc, #88]	; (8007e0c <prvCheckForValidListAndQueue+0x64>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d123      	bne.n	8007e02 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dba:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <prvCheckForValidListAndQueue+0x68>)
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f7fe f9e9 	bl	8006194 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007dc2:	4b14      	ldr	r3, [pc, #80]	; (8007e14 <prvCheckForValidListAndQueue+0x6c>)
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f7fe f9e5 	bl	8006194 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007dca:	4b13      	ldr	r3, [pc, #76]	; (8007e18 <prvCheckForValidListAndQueue+0x70>)
 8007dcc:	4a10      	ldr	r2, [pc, #64]	; (8007e10 <prvCheckForValidListAndQueue+0x68>)
 8007dce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007dd0:	4b12      	ldr	r3, [pc, #72]	; (8007e1c <prvCheckForValidListAndQueue+0x74>)
 8007dd2:	4a10      	ldr	r2, [pc, #64]	; (8007e14 <prvCheckForValidListAndQueue+0x6c>)
 8007dd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007dd6:	4b12      	ldr	r3, [pc, #72]	; (8007e20 <prvCheckForValidListAndQueue+0x78>)
 8007dd8:	4a12      	ldr	r2, [pc, #72]	; (8007e24 <prvCheckForValidListAndQueue+0x7c>)
 8007dda:	2100      	movs	r1, #0
 8007ddc:	9100      	str	r1, [sp, #0]
 8007dde:	2110      	movs	r1, #16
 8007de0:	200a      	movs	r0, #10
 8007de2:	f7fe fad4 	bl	800638e <xQueueGenericCreateStatic>
 8007de6:	0002      	movs	r2, r0
 8007de8:	4b08      	ldr	r3, [pc, #32]	; (8007e0c <prvCheckForValidListAndQueue+0x64>)
 8007dea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007dec:	4b07      	ldr	r3, [pc, #28]	; (8007e0c <prvCheckForValidListAndQueue+0x64>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d006      	beq.n	8007e02 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007df4:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <prvCheckForValidListAndQueue+0x64>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a0b      	ldr	r2, [pc, #44]	; (8007e28 <prvCheckForValidListAndQueue+0x80>)
 8007dfa:	0011      	movs	r1, r2
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	f7fe fe75 	bl	8006aec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e02:	f000 f8bf 	bl	8007f84 <vPortExitCritical>
}
 8007e06:	46c0      	nop			; (mov r8, r8)
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	200011f0 	.word	0x200011f0
 8007e10:	200011c0 	.word	0x200011c0
 8007e14:	200011d4 	.word	0x200011d4
 8007e18:	200011e8 	.word	0x200011e8
 8007e1c:	200011ec 	.word	0x200011ec
 8007e20:	2000129c 	.word	0x2000129c
 8007e24:	200011fc 	.word	0x200011fc
 8007e28:	08008844 	.word	0x08008844

08007e2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3b04      	subs	r3, #4
 8007e3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2280      	movs	r2, #128	; 0x80
 8007e42:	0452      	lsls	r2, r2, #17
 8007e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3b04      	subs	r3, #4
 8007e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	3b04      	subs	r3, #4
 8007e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <pxPortInitialiseStack+0x50>)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3b14      	subs	r3, #20
 8007e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3b20      	subs	r3, #32
 8007e6e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007e70:	68fb      	ldr	r3, [r7, #12]
}
 8007e72:	0018      	movs	r0, r3
 8007e74:	46bd      	mov	sp, r7
 8007e76:	b004      	add	sp, #16
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	46c0      	nop			; (mov r8, r8)
 8007e7c:	08007e81 	.word	0x08007e81

08007e80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007e86:	2300      	movs	r3, #0
 8007e88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007e8a:	4b08      	ldr	r3, [pc, #32]	; (8007eac <prvTaskExitError+0x2c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	d001      	beq.n	8007e96 <prvTaskExitError+0x16>
 8007e92:	b672      	cpsid	i
 8007e94:	e7fe      	b.n	8007e94 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8007e96:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007e98:	46c0      	nop			; (mov r8, r8)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0fc      	beq.n	8007e9a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ea0:	46c0      	nop			; (mov r8, r8)
 8007ea2:	46c0      	nop			; (mov r8, r8)
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	b002      	add	sp, #8
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	46c0      	nop			; (mov r8, r8)
 8007eac:	2000018c 	.word	0x2000018c

08007eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007eb4:	46c0      	nop			; (mov r8, r8)
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	0000      	movs	r0, r0
 8007ebc:	0000      	movs	r0, r0
	...

08007ec0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007ec0:	4a0b      	ldr	r2, [pc, #44]	; (8007ef0 <pxCurrentTCBConst2>)
 8007ec2:	6813      	ldr	r3, [r2, #0]
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	3020      	adds	r0, #32
 8007ec8:	f380 8809 	msr	PSP, r0
 8007ecc:	2002      	movs	r0, #2
 8007ece:	f380 8814 	msr	CONTROL, r0
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007ed8:	46ae      	mov	lr, r5
 8007eda:	bc08      	pop	{r3}
 8007edc:	bc04      	pop	{r2}
 8007ede:	b662      	cpsie	i
 8007ee0:	4718      	bx	r3
 8007ee2:	46c0      	nop			; (mov r8, r8)
 8007ee4:	46c0      	nop			; (mov r8, r8)
 8007ee6:	46c0      	nop			; (mov r8, r8)
 8007ee8:	46c0      	nop			; (mov r8, r8)
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	46c0      	nop			; (mov r8, r8)
 8007eee:	46c0      	nop			; (mov r8, r8)

08007ef0 <pxCurrentTCBConst2>:
 8007ef0:	20000cc0 	.word	0x20000cc0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007ef4:	46c0      	nop			; (mov r8, r8)
 8007ef6:	46c0      	nop			; (mov r8, r8)

08007ef8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8007efc:	4b0e      	ldr	r3, [pc, #56]	; (8007f38 <xPortStartScheduler+0x40>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	4b0d      	ldr	r3, [pc, #52]	; (8007f38 <xPortStartScheduler+0x40>)
 8007f02:	21ff      	movs	r1, #255	; 0xff
 8007f04:	0409      	lsls	r1, r1, #16
 8007f06:	430a      	orrs	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8007f0a:	4b0b      	ldr	r3, [pc, #44]	; (8007f38 <xPortStartScheduler+0x40>)
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <xPortStartScheduler+0x40>)
 8007f10:	21ff      	movs	r1, #255	; 0xff
 8007f12:	0609      	lsls	r1, r1, #24
 8007f14:	430a      	orrs	r2, r1
 8007f16:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8007f18:	f000 f898 	bl	800804c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f1c:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <xPortStartScheduler+0x44>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007f22:	f7ff ffcd 	bl	8007ec0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f26:	f7ff f9a9 	bl	800727c <vTaskSwitchContext>
	prvTaskExitError();
 8007f2a:	f7ff ffa9 	bl	8007e80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	0018      	movs	r0, r3
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	46c0      	nop			; (mov r8, r8)
 8007f38:	e000ed20 	.word	0xe000ed20
 8007f3c:	2000018c 	.word	0x2000018c

08007f40 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8007f44:	4b05      	ldr	r3, [pc, #20]	; (8007f5c <vPortYield+0x1c>)
 8007f46:	2280      	movs	r2, #128	; 0x80
 8007f48:	0552      	lsls	r2, r2, #21
 8007f4a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8007f4c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007f50:	f3bf 8f6f 	isb	sy
}
 8007f54:	46c0      	nop			; (mov r8, r8)
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	e000ed04 	.word	0xe000ed04

08007f60 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8007f64:	b672      	cpsid	i
    uxCriticalNesting++;
 8007f66:	4b06      	ldr	r3, [pc, #24]	; (8007f80 <vPortEnterCritical+0x20>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	1c5a      	adds	r2, r3, #1
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <vPortEnterCritical+0x20>)
 8007f6e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007f70:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007f74:	f3bf 8f6f 	isb	sy
}
 8007f78:	46c0      	nop			; (mov r8, r8)
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	2000018c 	.word	0x2000018c

08007f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <vPortExitCritical+0x2c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <vPortExitCritical+0x10>
 8007f90:	b672      	cpsid	i
 8007f92:	e7fe      	b.n	8007f92 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8007f94:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <vPortExitCritical+0x2c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	1e5a      	subs	r2, r3, #1
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <vPortExitCritical+0x2c>)
 8007f9c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8007f9e:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <vPortExitCritical+0x2c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d100      	bne.n	8007fa8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8007fa6:	b662      	cpsie	i
    }
}
 8007fa8:	46c0      	nop			; (mov r8, r8)
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	2000018c 	.word	0x2000018c

08007fb4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007fb4:	f3ef 8010 	mrs	r0, PRIMASK
 8007fb8:	b672      	cpsid	i
 8007fba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8007fbc:	46c0      	nop			; (mov r8, r8)
 8007fbe:	0018      	movs	r0, r3

08007fc0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007fc0:	f380 8810 	msr	PRIMASK, r0
 8007fc4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8007fc6:	46c0      	nop			; (mov r8, r8)
	...

08007fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fd0:	f3ef 8009 	mrs	r0, PSP
 8007fd4:	4b0e      	ldr	r3, [pc, #56]	; (8008010 <pxCurrentTCBConst>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	3820      	subs	r0, #32
 8007fda:	6010      	str	r0, [r2, #0]
 8007fdc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007fde:	4644      	mov	r4, r8
 8007fe0:	464d      	mov	r5, r9
 8007fe2:	4656      	mov	r6, sl
 8007fe4:	465f      	mov	r7, fp
 8007fe6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007fe8:	b508      	push	{r3, lr}
 8007fea:	b672      	cpsid	i
 8007fec:	f7ff f946 	bl	800727c <vTaskSwitchContext>
 8007ff0:	b662      	cpsie	i
 8007ff2:	bc0c      	pop	{r2, r3}
 8007ff4:	6811      	ldr	r1, [r2, #0]
 8007ff6:	6808      	ldr	r0, [r1, #0]
 8007ff8:	3010      	adds	r0, #16
 8007ffa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007ffc:	46a0      	mov	r8, r4
 8007ffe:	46a9      	mov	r9, r5
 8008000:	46b2      	mov	sl, r6
 8008002:	46bb      	mov	fp, r7
 8008004:	f380 8809 	msr	PSP, r0
 8008008:	3820      	subs	r0, #32
 800800a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800800c:	4718      	bx	r3
 800800e:	46c0      	nop			; (mov r8, r8)

08008010 <pxCurrentTCBConst>:
 8008010:	20000cc0 	.word	0x20000cc0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008014:	46c0      	nop			; (mov r8, r8)
 8008016:	46c0      	nop			; (mov r8, r8)

08008018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800801e:	f7ff ffc9 	bl	8007fb4 <ulSetInterruptMaskFromISR>
 8008022:	0003      	movs	r3, r0
 8008024:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008026:	f7ff f875 	bl	8007114 <xTaskIncrementTick>
 800802a:	1e03      	subs	r3, r0, #0
 800802c:	d003      	beq.n	8008036 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <SysTick_Handler+0x30>)
 8008030:	2280      	movs	r2, #128	; 0x80
 8008032:	0552      	lsls	r2, r2, #21
 8008034:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	0018      	movs	r0, r3
 800803a:	f7ff ffc1 	bl	8007fc0 <vClearInterruptMaskFromISR>
}
 800803e:	46c0      	nop			; (mov r8, r8)
 8008040:	46bd      	mov	sp, r7
 8008042:	b002      	add	sp, #8
 8008044:	bd80      	pop	{r7, pc}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <prvSetupTimerInterrupt+0x34>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008056:	4b0b      	ldr	r3, [pc, #44]	; (8008084 <prvSetupTimerInterrupt+0x38>)
 8008058:	2200      	movs	r2, #0
 800805a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800805c:	4b0a      	ldr	r3, [pc, #40]	; (8008088 <prvSetupTimerInterrupt+0x3c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	22fa      	movs	r2, #250	; 0xfa
 8008062:	0091      	lsls	r1, r2, #2
 8008064:	0018      	movs	r0, r3
 8008066:	f7f8 f84f 	bl	8000108 <__udivsi3>
 800806a:	0003      	movs	r3, r0
 800806c:	001a      	movs	r2, r3
 800806e:	4b07      	ldr	r3, [pc, #28]	; (800808c <prvSetupTimerInterrupt+0x40>)
 8008070:	3a01      	subs	r2, #1
 8008072:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8008074:	4b02      	ldr	r3, [pc, #8]	; (8008080 <prvSetupTimerInterrupt+0x34>)
 8008076:	2207      	movs	r2, #7
 8008078:	601a      	str	r2, [r3, #0]
}
 800807a:	46c0      	nop			; (mov r8, r8)
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	e000e010 	.word	0xe000e010
 8008084:	e000e018 	.word	0xe000e018
 8008088:	20000180 	.word	0x20000180
 800808c:	e000e014 	.word	0xe000e014

08008090 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008098:	2300      	movs	r3, #0
 800809a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800809c:	f7fe ff94 	bl	8006fc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080a0:	4b49      	ldr	r3, [pc, #292]	; (80081c8 <pvPortMalloc+0x138>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080a8:	f000 f8e0 	bl	800826c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080ac:	4b47      	ldr	r3, [pc, #284]	; (80081cc <pvPortMalloc+0x13c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	4013      	ands	r3, r2
 80080b4:	d000      	beq.n	80080b8 <pvPortMalloc+0x28>
 80080b6:	e079      	b.n	80081ac <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d012      	beq.n	80080e4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80080be:	2208      	movs	r2, #8
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	189b      	adds	r3, r3, r2
 80080c4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2207      	movs	r2, #7
 80080ca:	4013      	ands	r3, r2
 80080cc:	d00a      	beq.n	80080e4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2207      	movs	r2, #7
 80080d2:	4393      	bics	r3, r2
 80080d4:	3308      	adds	r3, #8
 80080d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2207      	movs	r2, #7
 80080dc:	4013      	ands	r3, r2
 80080de:	d001      	beq.n	80080e4 <pvPortMalloc+0x54>
 80080e0:	b672      	cpsid	i
 80080e2:	e7fe      	b.n	80080e2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d060      	beq.n	80081ac <pvPortMalloc+0x11c>
 80080ea:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <pvPortMalloc+0x140>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d85b      	bhi.n	80081ac <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80080f4:	4b37      	ldr	r3, [pc, #220]	; (80081d4 <pvPortMalloc+0x144>)
 80080f6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80080f8:	4b36      	ldr	r3, [pc, #216]	; (80081d4 <pvPortMalloc+0x144>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080fe:	e004      	b.n	800810a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	429a      	cmp	r2, r3
 8008112:	d903      	bls.n	800811c <pvPortMalloc+0x8c>
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1f1      	bne.n	8008100 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800811c:	4b2a      	ldr	r3, [pc, #168]	; (80081c8 <pvPortMalloc+0x138>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	429a      	cmp	r2, r3
 8008124:	d042      	beq.n	80081ac <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2208      	movs	r2, #8
 800812c:	189b      	adds	r3, r3, r2
 800812e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	685a      	ldr	r2, [r3, #4]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	1ad2      	subs	r2, r2, r3
 8008140:	2308      	movs	r3, #8
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	429a      	cmp	r2, r3
 8008146:	d916      	bls.n	8008176 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	18d3      	adds	r3, r2, r3
 800814e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2207      	movs	r2, #7
 8008154:	4013      	ands	r3, r2
 8008156:	d001      	beq.n	800815c <pvPortMalloc+0xcc>
 8008158:	b672      	cpsid	i
 800815a:	e7fe      	b.n	800815a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	1ad2      	subs	r2, r2, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	0018      	movs	r0, r3
 8008172:	f000 f8db 	bl	800832c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008176:	4b16      	ldr	r3, [pc, #88]	; (80081d0 <pvPortMalloc+0x140>)
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	1ad2      	subs	r2, r2, r3
 8008180:	4b13      	ldr	r3, [pc, #76]	; (80081d0 <pvPortMalloc+0x140>)
 8008182:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008184:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <pvPortMalloc+0x140>)
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <pvPortMalloc+0x148>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d203      	bcs.n	8008198 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008190:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <pvPortMalloc+0x140>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <pvPortMalloc+0x148>)
 8008196:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <pvPortMalloc+0x13c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	431a      	orrs	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2200      	movs	r2, #0
 80081aa:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80081ac:	f7fe ff18 	bl	8006fe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2207      	movs	r2, #7
 80081b4:	4013      	ands	r3, r2
 80081b6:	d001      	beq.n	80081bc <pvPortMalloc+0x12c>
 80081b8:	b672      	cpsid	i
 80081ba:	e7fe      	b.n	80081ba <pvPortMalloc+0x12a>
	return pvReturn;
 80081bc:	68fb      	ldr	r3, [r7, #12]
}
 80081be:	0018      	movs	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	b006      	add	sp, #24
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	46c0      	nop			; (mov r8, r8)
 80081c8:	20002af4 	.word	0x20002af4
 80081cc:	20002b00 	.word	0x20002b00
 80081d0:	20002af8 	.word	0x20002af8
 80081d4:	20002aec 	.word	0x20002aec
 80081d8:	20002afc 	.word	0x20002afc

080081dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d035      	beq.n	800825a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081ee:	2308      	movs	r3, #8
 80081f0:	425b      	negs	r3, r3
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	18d3      	adds	r3, r2, r3
 80081f6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	4b18      	ldr	r3, [pc, #96]	; (8008264 <vPortFree+0x88>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4013      	ands	r3, r2
 8008206:	d101      	bne.n	800820c <vPortFree+0x30>
 8008208:	b672      	cpsid	i
 800820a:	e7fe      	b.n	800820a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <vPortFree+0x3c>
 8008214:	b672      	cpsid	i
 8008216:	e7fe      	b.n	8008216 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	4b11      	ldr	r3, [pc, #68]	; (8008264 <vPortFree+0x88>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4013      	ands	r3, r2
 8008222:	d01a      	beq.n	800825a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d116      	bne.n	800825a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	4b0c      	ldr	r3, [pc, #48]	; (8008264 <vPortFree+0x88>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	43db      	mvns	r3, r3
 8008236:	401a      	ands	r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800823c:	f7fe fec4 	bl	8006fc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	4b08      	ldr	r3, [pc, #32]	; (8008268 <vPortFree+0x8c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	18d2      	adds	r2, r2, r3
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <vPortFree+0x8c>)
 800824c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	0018      	movs	r0, r3
 8008252:	f000 f86b 	bl	800832c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008256:	f7fe fec3 	bl	8006fe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800825a:	46c0      	nop			; (mov r8, r8)
 800825c:	46bd      	mov	sp, r7
 800825e:	b004      	add	sp, #16
 8008260:	bd80      	pop	{r7, pc}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	20002b00 	.word	0x20002b00
 8008268:	20002af8 	.word	0x20002af8

0800826c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008272:	23c0      	movs	r3, #192	; 0xc0
 8008274:	015b      	lsls	r3, r3, #5
 8008276:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008278:	4b26      	ldr	r3, [pc, #152]	; (8008314 <prvHeapInit+0xa8>)
 800827a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2207      	movs	r2, #7
 8008280:	4013      	ands	r3, r2
 8008282:	d00c      	beq.n	800829e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3307      	adds	r3, #7
 8008288:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2207      	movs	r2, #7
 800828e:	4393      	bics	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	1ad2      	subs	r2, r2, r3
 8008298:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <prvHeapInit+0xa8>)
 800829a:	18d3      	adds	r3, r2, r3
 800829c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80082a2:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <prvHeapInit+0xac>)
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80082a8:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <prvHeapInit+0xac>)
 80082aa:	2200      	movs	r2, #0
 80082ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	18d3      	adds	r3, r2, r3
 80082b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082b6:	2208      	movs	r2, #8
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	1a9b      	subs	r3, r3, r2
 80082bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2207      	movs	r2, #7
 80082c2:	4393      	bics	r3, r2
 80082c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4b14      	ldr	r3, [pc, #80]	; (800831c <prvHeapInit+0xb0>)
 80082ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80082cc:	4b13      	ldr	r3, [pc, #76]	; (800831c <prvHeapInit+0xb0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2200      	movs	r2, #0
 80082d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082d4:	4b11      	ldr	r3, [pc, #68]	; (800831c <prvHeapInit+0xb0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	1ad2      	subs	r2, r2, r3
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082ea:	4b0c      	ldr	r3, [pc, #48]	; (800831c <prvHeapInit+0xb0>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	4b0a      	ldr	r3, [pc, #40]	; (8008320 <prvHeapInit+0xb4>)
 80082f8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	4b09      	ldr	r3, [pc, #36]	; (8008324 <prvHeapInit+0xb8>)
 8008300:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008302:	4b09      	ldr	r3, [pc, #36]	; (8008328 <prvHeapInit+0xbc>)
 8008304:	2280      	movs	r2, #128	; 0x80
 8008306:	0612      	lsls	r2, r2, #24
 8008308:	601a      	str	r2, [r3, #0]
}
 800830a:	46c0      	nop			; (mov r8, r8)
 800830c:	46bd      	mov	sp, r7
 800830e:	b004      	add	sp, #16
 8008310:	bd80      	pop	{r7, pc}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	200012ec 	.word	0x200012ec
 8008318:	20002aec 	.word	0x20002aec
 800831c:	20002af4 	.word	0x20002af4
 8008320:	20002afc 	.word	0x20002afc
 8008324:	20002af8 	.word	0x20002af8
 8008328:	20002b00 	.word	0x20002b00

0800832c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008334:	4b27      	ldr	r3, [pc, #156]	; (80083d4 <prvInsertBlockIntoFreeList+0xa8>)
 8008336:	60fb      	str	r3, [r7, #12]
 8008338:	e002      	b.n	8008340 <prvInsertBlockIntoFreeList+0x14>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	429a      	cmp	r2, r3
 8008348:	d8f7      	bhi.n	800833a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	18d3      	adds	r3, r2, r3
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d108      	bne.n	800836e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	18d2      	adds	r2, r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	18d2      	adds	r2, r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	429a      	cmp	r2, r3
 8008380:	d118      	bne.n	80083b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <prvInsertBlockIntoFreeList+0xac>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	429a      	cmp	r2, r3
 800838c:	d00d      	beq.n	80083aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685a      	ldr	r2, [r3, #4]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	18d2      	adds	r2, r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e008      	b.n	80083bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <prvInsertBlockIntoFreeList+0xac>)
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	e003      	b.n	80083bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d002      	beq.n	80083ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	46bd      	mov	sp, r7
 80083ce:	b004      	add	sp, #16
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	46c0      	nop			; (mov r8, r8)
 80083d4:	20002aec 	.word	0x20002aec
 80083d8:	20002af4 	.word	0x20002af4

080083dc <__errno>:
 80083dc:	4b01      	ldr	r3, [pc, #4]	; (80083e4 <__errno+0x8>)
 80083de:	6818      	ldr	r0, [r3, #0]
 80083e0:	4770      	bx	lr
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	20000190 	.word	0x20000190

080083e8 <__libc_init_array>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	2600      	movs	r6, #0
 80083ec:	4d0c      	ldr	r5, [pc, #48]	; (8008420 <__libc_init_array+0x38>)
 80083ee:	4c0d      	ldr	r4, [pc, #52]	; (8008424 <__libc_init_array+0x3c>)
 80083f0:	1b64      	subs	r4, r4, r5
 80083f2:	10a4      	asrs	r4, r4, #2
 80083f4:	42a6      	cmp	r6, r4
 80083f6:	d109      	bne.n	800840c <__libc_init_array+0x24>
 80083f8:	2600      	movs	r6, #0
 80083fa:	f000 f9d5 	bl	80087a8 <_init>
 80083fe:	4d0a      	ldr	r5, [pc, #40]	; (8008428 <__libc_init_array+0x40>)
 8008400:	4c0a      	ldr	r4, [pc, #40]	; (800842c <__libc_init_array+0x44>)
 8008402:	1b64      	subs	r4, r4, r5
 8008404:	10a4      	asrs	r4, r4, #2
 8008406:	42a6      	cmp	r6, r4
 8008408:	d105      	bne.n	8008416 <__libc_init_array+0x2e>
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	00b3      	lsls	r3, r6, #2
 800840e:	58eb      	ldr	r3, [r5, r3]
 8008410:	4798      	blx	r3
 8008412:	3601      	adds	r6, #1
 8008414:	e7ee      	b.n	80083f4 <__libc_init_array+0xc>
 8008416:	00b3      	lsls	r3, r6, #2
 8008418:	58eb      	ldr	r3, [r5, r3]
 800841a:	4798      	blx	r3
 800841c:	3601      	adds	r6, #1
 800841e:	e7f2      	b.n	8008406 <__libc_init_array+0x1e>
 8008420:	08008ae4 	.word	0x08008ae4
 8008424:	08008ae4 	.word	0x08008ae4
 8008428:	08008ae4 	.word	0x08008ae4
 800842c:	08008ae8 	.word	0x08008ae8

08008430 <__retarget_lock_acquire_recursive>:
 8008430:	4770      	bx	lr

08008432 <__retarget_lock_release_recursive>:
 8008432:	4770      	bx	lr

08008434 <memcpy>:
 8008434:	2300      	movs	r3, #0
 8008436:	b510      	push	{r4, lr}
 8008438:	429a      	cmp	r2, r3
 800843a:	d100      	bne.n	800843e <memcpy+0xa>
 800843c:	bd10      	pop	{r4, pc}
 800843e:	5ccc      	ldrb	r4, [r1, r3]
 8008440:	54c4      	strb	r4, [r0, r3]
 8008442:	3301      	adds	r3, #1
 8008444:	e7f8      	b.n	8008438 <memcpy+0x4>

08008446 <memset>:
 8008446:	0003      	movs	r3, r0
 8008448:	1882      	adds	r2, r0, r2
 800844a:	4293      	cmp	r3, r2
 800844c:	d100      	bne.n	8008450 <memset+0xa>
 800844e:	4770      	bx	lr
 8008450:	7019      	strb	r1, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	e7f9      	b.n	800844a <memset+0x4>

08008456 <cleanup_glue>:
 8008456:	b570      	push	{r4, r5, r6, lr}
 8008458:	000d      	movs	r5, r1
 800845a:	6809      	ldr	r1, [r1, #0]
 800845c:	0004      	movs	r4, r0
 800845e:	2900      	cmp	r1, #0
 8008460:	d001      	beq.n	8008466 <cleanup_glue+0x10>
 8008462:	f7ff fff8 	bl	8008456 <cleanup_glue>
 8008466:	0029      	movs	r1, r5
 8008468:	0020      	movs	r0, r4
 800846a:	f000 f877 	bl	800855c <_free_r>
 800846e:	bd70      	pop	{r4, r5, r6, pc}

08008470 <_reclaim_reent>:
 8008470:	4b31      	ldr	r3, [pc, #196]	; (8008538 <_reclaim_reent+0xc8>)
 8008472:	b570      	push	{r4, r5, r6, lr}
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	0004      	movs	r4, r0
 8008478:	4283      	cmp	r3, r0
 800847a:	d049      	beq.n	8008510 <_reclaim_reent+0xa0>
 800847c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <_reclaim_reent+0x28>
 8008482:	2500      	movs	r5, #0
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	42ab      	cmp	r3, r5
 8008488:	d147      	bne.n	800851a <_reclaim_reent+0xaa>
 800848a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800848c:	6819      	ldr	r1, [r3, #0]
 800848e:	2900      	cmp	r1, #0
 8008490:	d002      	beq.n	8008498 <_reclaim_reent+0x28>
 8008492:	0020      	movs	r0, r4
 8008494:	f000 f862 	bl	800855c <_free_r>
 8008498:	6961      	ldr	r1, [r4, #20]
 800849a:	2900      	cmp	r1, #0
 800849c:	d002      	beq.n	80084a4 <_reclaim_reent+0x34>
 800849e:	0020      	movs	r0, r4
 80084a0:	f000 f85c 	bl	800855c <_free_r>
 80084a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80084a6:	2900      	cmp	r1, #0
 80084a8:	d002      	beq.n	80084b0 <_reclaim_reent+0x40>
 80084aa:	0020      	movs	r0, r4
 80084ac:	f000 f856 	bl	800855c <_free_r>
 80084b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80084b2:	2900      	cmp	r1, #0
 80084b4:	d002      	beq.n	80084bc <_reclaim_reent+0x4c>
 80084b6:	0020      	movs	r0, r4
 80084b8:	f000 f850 	bl	800855c <_free_r>
 80084bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80084be:	2900      	cmp	r1, #0
 80084c0:	d002      	beq.n	80084c8 <_reclaim_reent+0x58>
 80084c2:	0020      	movs	r0, r4
 80084c4:	f000 f84a 	bl	800855c <_free_r>
 80084c8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084ca:	2900      	cmp	r1, #0
 80084cc:	d002      	beq.n	80084d4 <_reclaim_reent+0x64>
 80084ce:	0020      	movs	r0, r4
 80084d0:	f000 f844 	bl	800855c <_free_r>
 80084d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80084d6:	2900      	cmp	r1, #0
 80084d8:	d002      	beq.n	80084e0 <_reclaim_reent+0x70>
 80084da:	0020      	movs	r0, r4
 80084dc:	f000 f83e 	bl	800855c <_free_r>
 80084e0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80084e2:	2900      	cmp	r1, #0
 80084e4:	d002      	beq.n	80084ec <_reclaim_reent+0x7c>
 80084e6:	0020      	movs	r0, r4
 80084e8:	f000 f838 	bl	800855c <_free_r>
 80084ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ee:	2900      	cmp	r1, #0
 80084f0:	d002      	beq.n	80084f8 <_reclaim_reent+0x88>
 80084f2:	0020      	movs	r0, r4
 80084f4:	f000 f832 	bl	800855c <_free_r>
 80084f8:	69a3      	ldr	r3, [r4, #24]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d008      	beq.n	8008510 <_reclaim_reent+0xa0>
 80084fe:	0020      	movs	r0, r4
 8008500:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008502:	4798      	blx	r3
 8008504:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008506:	2900      	cmp	r1, #0
 8008508:	d002      	beq.n	8008510 <_reclaim_reent+0xa0>
 800850a:	0020      	movs	r0, r4
 800850c:	f7ff ffa3 	bl	8008456 <cleanup_glue>
 8008510:	bd70      	pop	{r4, r5, r6, pc}
 8008512:	5949      	ldr	r1, [r1, r5]
 8008514:	2900      	cmp	r1, #0
 8008516:	d108      	bne.n	800852a <_reclaim_reent+0xba>
 8008518:	3504      	adds	r5, #4
 800851a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800851c:	68d9      	ldr	r1, [r3, #12]
 800851e:	2d80      	cmp	r5, #128	; 0x80
 8008520:	d1f7      	bne.n	8008512 <_reclaim_reent+0xa2>
 8008522:	0020      	movs	r0, r4
 8008524:	f000 f81a 	bl	800855c <_free_r>
 8008528:	e7af      	b.n	800848a <_reclaim_reent+0x1a>
 800852a:	680e      	ldr	r6, [r1, #0]
 800852c:	0020      	movs	r0, r4
 800852e:	f000 f815 	bl	800855c <_free_r>
 8008532:	0031      	movs	r1, r6
 8008534:	e7ee      	b.n	8008514 <_reclaim_reent+0xa4>
 8008536:	46c0      	nop			; (mov r8, r8)
 8008538:	20000190 	.word	0x20000190

0800853c <__malloc_lock>:
 800853c:	b510      	push	{r4, lr}
 800853e:	4802      	ldr	r0, [pc, #8]	; (8008548 <__malloc_lock+0xc>)
 8008540:	f7ff ff76 	bl	8008430 <__retarget_lock_acquire_recursive>
 8008544:	bd10      	pop	{r4, pc}
 8008546:	46c0      	nop			; (mov r8, r8)
 8008548:	20002b04 	.word	0x20002b04

0800854c <__malloc_unlock>:
 800854c:	b510      	push	{r4, lr}
 800854e:	4802      	ldr	r0, [pc, #8]	; (8008558 <__malloc_unlock+0xc>)
 8008550:	f7ff ff6f 	bl	8008432 <__retarget_lock_release_recursive>
 8008554:	bd10      	pop	{r4, pc}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	20002b04 	.word	0x20002b04

0800855c <_free_r>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	0005      	movs	r5, r0
 8008560:	2900      	cmp	r1, #0
 8008562:	d010      	beq.n	8008586 <_free_r+0x2a>
 8008564:	1f0c      	subs	r4, r1, #4
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	da00      	bge.n	800856e <_free_r+0x12>
 800856c:	18e4      	adds	r4, r4, r3
 800856e:	0028      	movs	r0, r5
 8008570:	f7ff ffe4 	bl	800853c <__malloc_lock>
 8008574:	4a1d      	ldr	r2, [pc, #116]	; (80085ec <_free_r+0x90>)
 8008576:	6813      	ldr	r3, [r2, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d105      	bne.n	8008588 <_free_r+0x2c>
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	6014      	str	r4, [r2, #0]
 8008580:	0028      	movs	r0, r5
 8008582:	f7ff ffe3 	bl	800854c <__malloc_unlock>
 8008586:	bd70      	pop	{r4, r5, r6, pc}
 8008588:	42a3      	cmp	r3, r4
 800858a:	d908      	bls.n	800859e <_free_r+0x42>
 800858c:	6821      	ldr	r1, [r4, #0]
 800858e:	1860      	adds	r0, r4, r1
 8008590:	4283      	cmp	r3, r0
 8008592:	d1f3      	bne.n	800857c <_free_r+0x20>
 8008594:	6818      	ldr	r0, [r3, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	1841      	adds	r1, r0, r1
 800859a:	6021      	str	r1, [r4, #0]
 800859c:	e7ee      	b.n	800857c <_free_r+0x20>
 800859e:	001a      	movs	r2, r3
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <_free_r+0x4e>
 80085a6:	42a3      	cmp	r3, r4
 80085a8:	d9f9      	bls.n	800859e <_free_r+0x42>
 80085aa:	6811      	ldr	r1, [r2, #0]
 80085ac:	1850      	adds	r0, r2, r1
 80085ae:	42a0      	cmp	r0, r4
 80085b0:	d10b      	bne.n	80085ca <_free_r+0x6e>
 80085b2:	6820      	ldr	r0, [r4, #0]
 80085b4:	1809      	adds	r1, r1, r0
 80085b6:	1850      	adds	r0, r2, r1
 80085b8:	6011      	str	r1, [r2, #0]
 80085ba:	4283      	cmp	r3, r0
 80085bc:	d1e0      	bne.n	8008580 <_free_r+0x24>
 80085be:	6818      	ldr	r0, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	1841      	adds	r1, r0, r1
 80085c4:	6011      	str	r1, [r2, #0]
 80085c6:	6053      	str	r3, [r2, #4]
 80085c8:	e7da      	b.n	8008580 <_free_r+0x24>
 80085ca:	42a0      	cmp	r0, r4
 80085cc:	d902      	bls.n	80085d4 <_free_r+0x78>
 80085ce:	230c      	movs	r3, #12
 80085d0:	602b      	str	r3, [r5, #0]
 80085d2:	e7d5      	b.n	8008580 <_free_r+0x24>
 80085d4:	6821      	ldr	r1, [r4, #0]
 80085d6:	1860      	adds	r0, r4, r1
 80085d8:	4283      	cmp	r3, r0
 80085da:	d103      	bne.n	80085e4 <_free_r+0x88>
 80085dc:	6818      	ldr	r0, [r3, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	1841      	adds	r1, r0, r1
 80085e2:	6021      	str	r1, [r4, #0]
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	6054      	str	r4, [r2, #4]
 80085e8:	e7ca      	b.n	8008580 <_free_r+0x24>
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	20002b08 	.word	0x20002b08

080085f0 <sqrt>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	0004      	movs	r4, r0
 80085f4:	000d      	movs	r5, r1
 80085f6:	f000 f821 	bl	800863c <__ieee754_sqrt>
 80085fa:	0022      	movs	r2, r4
 80085fc:	0006      	movs	r6, r0
 80085fe:	000f      	movs	r7, r1
 8008600:	002b      	movs	r3, r5
 8008602:	0020      	movs	r0, r4
 8008604:	0029      	movs	r1, r5
 8008606:	f7f9 fe3b 	bl	8002280 <__aeabi_dcmpun>
 800860a:	2800      	cmp	r0, #0
 800860c:	d113      	bne.n	8008636 <sqrt+0x46>
 800860e:	2200      	movs	r2, #0
 8008610:	2300      	movs	r3, #0
 8008612:	0020      	movs	r0, r4
 8008614:	0029      	movs	r1, r5
 8008616:	f7f7 fe19 	bl	800024c <__aeabi_dcmplt>
 800861a:	2800      	cmp	r0, #0
 800861c:	d00b      	beq.n	8008636 <sqrt+0x46>
 800861e:	f7ff fedd 	bl	80083dc <__errno>
 8008622:	2321      	movs	r3, #33	; 0x21
 8008624:	2200      	movs	r2, #0
 8008626:	6003      	str	r3, [r0, #0]
 8008628:	2300      	movs	r3, #0
 800862a:	0010      	movs	r0, r2
 800862c:	0019      	movs	r1, r3
 800862e:	f7f8 fc27 	bl	8000e80 <__aeabi_ddiv>
 8008632:	0006      	movs	r6, r0
 8008634:	000f      	movs	r7, r1
 8008636:	0030      	movs	r0, r6
 8008638:	0039      	movs	r1, r7
 800863a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800863c <__ieee754_sqrt>:
 800863c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800863e:	000b      	movs	r3, r1
 8008640:	000c      	movs	r4, r1
 8008642:	4956      	ldr	r1, [pc, #344]	; (800879c <__ieee754_sqrt+0x160>)
 8008644:	0005      	movs	r5, r0
 8008646:	0002      	movs	r2, r0
 8008648:	0008      	movs	r0, r1
 800864a:	b085      	sub	sp, #20
 800864c:	4020      	ands	r0, r4
 800864e:	4288      	cmp	r0, r1
 8008650:	d10f      	bne.n	8008672 <__ieee754_sqrt+0x36>
 8008652:	0028      	movs	r0, r5
 8008654:	0021      	movs	r1, r4
 8008656:	f7f9 f815 	bl	8001684 <__aeabi_dmul>
 800865a:	0002      	movs	r2, r0
 800865c:	000b      	movs	r3, r1
 800865e:	0028      	movs	r0, r5
 8008660:	0021      	movs	r1, r4
 8008662:	f7f8 f8d1 	bl	8000808 <__aeabi_dadd>
 8008666:	0005      	movs	r5, r0
 8008668:	000c      	movs	r4, r1
 800866a:	0028      	movs	r0, r5
 800866c:	0021      	movs	r1, r4
 800866e:	b005      	add	sp, #20
 8008670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008672:	2c00      	cmp	r4, #0
 8008674:	dc10      	bgt.n	8008698 <__ieee754_sqrt+0x5c>
 8008676:	0061      	lsls	r1, r4, #1
 8008678:	0849      	lsrs	r1, r1, #1
 800867a:	4329      	orrs	r1, r5
 800867c:	d0f5      	beq.n	800866a <__ieee754_sqrt+0x2e>
 800867e:	2100      	movs	r1, #0
 8008680:	428c      	cmp	r4, r1
 8008682:	d100      	bne.n	8008686 <__ieee754_sqrt+0x4a>
 8008684:	e080      	b.n	8008788 <__ieee754_sqrt+0x14c>
 8008686:	0028      	movs	r0, r5
 8008688:	0021      	movs	r1, r4
 800868a:	f7f9 fa67 	bl	8001b5c <__aeabi_dsub>
 800868e:	0002      	movs	r2, r0
 8008690:	000b      	movs	r3, r1
 8008692:	f7f8 fbf5 	bl	8000e80 <__aeabi_ddiv>
 8008696:	e7e6      	b.n	8008666 <__ieee754_sqrt+0x2a>
 8008698:	1521      	asrs	r1, r4, #20
 800869a:	d075      	beq.n	8008788 <__ieee754_sqrt+0x14c>
 800869c:	4840      	ldr	r0, [pc, #256]	; (80087a0 <__ieee754_sqrt+0x164>)
 800869e:	031b      	lsls	r3, r3, #12
 80086a0:	180c      	adds	r4, r1, r0
 80086a2:	2080      	movs	r0, #128	; 0x80
 80086a4:	0b1b      	lsrs	r3, r3, #12
 80086a6:	0340      	lsls	r0, r0, #13
 80086a8:	4303      	orrs	r3, r0
 80086aa:	07c9      	lsls	r1, r1, #31
 80086ac:	d403      	bmi.n	80086b6 <__ieee754_sqrt+0x7a>
 80086ae:	0fd1      	lsrs	r1, r2, #31
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	185b      	adds	r3, r3, r1
 80086b4:	0052      	lsls	r2, r2, #1
 80086b6:	1061      	asrs	r1, r4, #1
 80086b8:	2400      	movs	r4, #0
 80086ba:	9103      	str	r1, [sp, #12]
 80086bc:	005b      	lsls	r3, r3, #1
 80086be:	0fd1      	lsrs	r1, r2, #31
 80086c0:	185b      	adds	r3, r3, r1
 80086c2:	2180      	movs	r1, #128	; 0x80
 80086c4:	2516      	movs	r5, #22
 80086c6:	0020      	movs	r0, r4
 80086c8:	0052      	lsls	r2, r2, #1
 80086ca:	0389      	lsls	r1, r1, #14
 80086cc:	1846      	adds	r6, r0, r1
 80086ce:	429e      	cmp	r6, r3
 80086d0:	dc02      	bgt.n	80086d8 <__ieee754_sqrt+0x9c>
 80086d2:	1870      	adds	r0, r6, r1
 80086d4:	1b9b      	subs	r3, r3, r6
 80086d6:	1864      	adds	r4, r4, r1
 80086d8:	0fd6      	lsrs	r6, r2, #31
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	3d01      	subs	r5, #1
 80086de:	18f3      	adds	r3, r6, r3
 80086e0:	0052      	lsls	r2, r2, #1
 80086e2:	0849      	lsrs	r1, r1, #1
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	d1f1      	bne.n	80086cc <__ieee754_sqrt+0x90>
 80086e8:	2620      	movs	r6, #32
 80086ea:	2780      	movs	r7, #128	; 0x80
 80086ec:	0029      	movs	r1, r5
 80086ee:	9601      	str	r6, [sp, #4]
 80086f0:	063f      	lsls	r7, r7, #24
 80086f2:	197e      	adds	r6, r7, r5
 80086f4:	46b4      	mov	ip, r6
 80086f6:	4283      	cmp	r3, r0
 80086f8:	dc02      	bgt.n	8008700 <__ieee754_sqrt+0xc4>
 80086fa:	d114      	bne.n	8008726 <__ieee754_sqrt+0xea>
 80086fc:	4296      	cmp	r6, r2
 80086fe:	d812      	bhi.n	8008726 <__ieee754_sqrt+0xea>
 8008700:	4665      	mov	r5, ip
 8008702:	4666      	mov	r6, ip
 8008704:	19ed      	adds	r5, r5, r7
 8008706:	9002      	str	r0, [sp, #8]
 8008708:	2e00      	cmp	r6, #0
 800870a:	da03      	bge.n	8008714 <__ieee754_sqrt+0xd8>
 800870c:	43ee      	mvns	r6, r5
 800870e:	0ff6      	lsrs	r6, r6, #31
 8008710:	1986      	adds	r6, r0, r6
 8008712:	9602      	str	r6, [sp, #8]
 8008714:	1a1b      	subs	r3, r3, r0
 8008716:	4562      	cmp	r2, ip
 8008718:	4180      	sbcs	r0, r0
 800871a:	4240      	negs	r0, r0
 800871c:	1a1b      	subs	r3, r3, r0
 800871e:	4660      	mov	r0, ip
 8008720:	1a12      	subs	r2, r2, r0
 8008722:	9802      	ldr	r0, [sp, #8]
 8008724:	19c9      	adds	r1, r1, r7
 8008726:	0fd6      	lsrs	r6, r2, #31
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	199b      	adds	r3, r3, r6
 800872c:	9e01      	ldr	r6, [sp, #4]
 800872e:	0052      	lsls	r2, r2, #1
 8008730:	3e01      	subs	r6, #1
 8008732:	087f      	lsrs	r7, r7, #1
 8008734:	9601      	str	r6, [sp, #4]
 8008736:	2e00      	cmp	r6, #0
 8008738:	d1db      	bne.n	80086f2 <__ieee754_sqrt+0xb6>
 800873a:	4313      	orrs	r3, r2
 800873c:	d003      	beq.n	8008746 <__ieee754_sqrt+0x10a>
 800873e:	1c4b      	adds	r3, r1, #1
 8008740:	d127      	bne.n	8008792 <__ieee754_sqrt+0x156>
 8008742:	0031      	movs	r1, r6
 8008744:	3401      	adds	r4, #1
 8008746:	4b17      	ldr	r3, [pc, #92]	; (80087a4 <__ieee754_sqrt+0x168>)
 8008748:	1060      	asrs	r0, r4, #1
 800874a:	18c0      	adds	r0, r0, r3
 800874c:	0849      	lsrs	r1, r1, #1
 800874e:	07e3      	lsls	r3, r4, #31
 8008750:	d502      	bpl.n	8008758 <__ieee754_sqrt+0x11c>
 8008752:	2380      	movs	r3, #128	; 0x80
 8008754:	061b      	lsls	r3, r3, #24
 8008756:	4319      	orrs	r1, r3
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	000d      	movs	r5, r1
 800875c:	051c      	lsls	r4, r3, #20
 800875e:	1823      	adds	r3, r4, r0
 8008760:	001c      	movs	r4, r3
 8008762:	e782      	b.n	800866a <__ieee754_sqrt+0x2e>
 8008764:	0ad3      	lsrs	r3, r2, #11
 8008766:	3815      	subs	r0, #21
 8008768:	0552      	lsls	r2, r2, #21
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0fa      	beq.n	8008764 <__ieee754_sqrt+0x128>
 800876e:	2480      	movs	r4, #128	; 0x80
 8008770:	0364      	lsls	r4, r4, #13
 8008772:	4223      	tst	r3, r4
 8008774:	d00a      	beq.n	800878c <__ieee754_sqrt+0x150>
 8008776:	2420      	movs	r4, #32
 8008778:	0016      	movs	r6, r2
 800877a:	1a64      	subs	r4, r4, r1
 800877c:	40e6      	lsrs	r6, r4
 800877e:	1e4d      	subs	r5, r1, #1
 8008780:	408a      	lsls	r2, r1
 8008782:	4333      	orrs	r3, r6
 8008784:	1b41      	subs	r1, r0, r5
 8008786:	e789      	b.n	800869c <__ieee754_sqrt+0x60>
 8008788:	2000      	movs	r0, #0
 800878a:	e7ee      	b.n	800876a <__ieee754_sqrt+0x12e>
 800878c:	005b      	lsls	r3, r3, #1
 800878e:	3101      	adds	r1, #1
 8008790:	e7ef      	b.n	8008772 <__ieee754_sqrt+0x136>
 8008792:	2301      	movs	r3, #1
 8008794:	3101      	adds	r1, #1
 8008796:	4399      	bics	r1, r3
 8008798:	e7d5      	b.n	8008746 <__ieee754_sqrt+0x10a>
 800879a:	46c0      	nop			; (mov r8, r8)
 800879c:	7ff00000 	.word	0x7ff00000
 80087a0:	fffffc01 	.word	0xfffffc01
 80087a4:	3fe00000 	.word	0x3fe00000

080087a8 <_init>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr

080087b4 <_fini>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	46c0      	nop			; (mov r8, r8)
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr
